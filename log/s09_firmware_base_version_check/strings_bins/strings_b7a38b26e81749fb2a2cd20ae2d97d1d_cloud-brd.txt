/lib/ld-uClibc.so.0
p0iD
_fini
__uClibc_main
__deregister_frame_info
__register_frame_info
_Jv_RegisterClasses
memset
pipe
__errno_location
fork
puts
luaL_newstate
luaL_openlibs
luaL_loadfile
lua_pcall
lua_getfield
__floatsidf
lua_pushnumber
lua_pushstring
lua_tolstring
strlen
lua_settop
lua_close
exit
wait
malloc
strcpy
cJSON_Parse
cJSON_GetObjectItem
memcpy
cJSON_Delete
cJSON_CreateObject
cJSON_CreateNumber
cJSON_AddItemToObject
cJSON_CreateString
cJSON_Print
cJSON_free
cloud_time_string
access
getpid
mmmFree
putchar
optarg
getopt
cloud_string_dup
fcntl
ftruncate
sprintf
unlink
cloudCfgPath
cloudCfg
cloud_config_destroy
cloudWorker
cloud_worker_destroy
threadWorker
cloudCycle
cloud_cycle_destroy
mmmPrintPool
popen
fgets
atoi
kill
mmmInit
mmmMalloc
cJSON_InitHooks
srand
cloud_config_load
signal
cloud_cycle_init
cloud_worker_init
pthread_attr_init
pthread_attr_setstacksize
pthread_create
thread_worker
cloud_cycle_start
usleep
fopen
fseek
ftell
fread
fclose
__fixdfdi
pthread_mutex_init
cloud_ipc_server_init
pthread_cancel
pthread_join
pthread_mutex_destroy
pthread_testcancel
select
cloud_client_handle_message
cloud_client_handle_new
cloud_socket_destroy
cloud_ip_list_destroy
cloud_mq_destroy
cloud_socket_init
cloud_ip_list_init
cloud_mq_init
SESSION_RECONNECT_TIMEWAIT_MAX
SESSION_RECONNECT_CACHEDSVR_MAX_TIMES
SESSION_RECONNECT_DEFAULTSVR_MAX_TIMES
SESSION_RECONNECT_RANDOM_TIME_MIN
SESSION_RECONNECT_RANDOM_TIME_MAX
tlcc_build_request_of_hello_cloud_v2
tlcc_recv_response_of_hello_cloud_v2
tlcc_respond_cloud
tlcc_free_fn
SESSION_RECONNECT_TIMEWAIT_MIN
cloud_time_ms
cloud_session_dispatch
cloud_heartbeat_insert_into_mq
cloud_mq_send_request
cloud_socket_recv
cloud_server_handle_dispatch
cloud_session_disconnect
cloud_mq_get_id
cJSON_PrintUnformatted
cloud_mq_insert_request
cloud_ipc_send
snprintf
cloud_ipc_recv
pthread_mutex_lock
pthread_mutex_unlock
__moddi3
cloud_cycle_dump
cloud_mq_dump
cloud_session_dump
cloud_cycle_update_last_connected_time
cloud_mq_get_response
accept
cloud_ip_list_get_next
cloud_socket_connect
cloud_handshake_sef
cloud_ip_list_node_free
cloud_ip_list_parse
cloud_handshake_svr
cloud_socket_disconnect
cloud_cycle_reset_notify_flags
__divdi3
cloud_cycle_update_last_request_time
getaddrinfo
inet_ntop
freeaddrinfo
gai_strerror
MD5Init
MD5Update
MD5Final
cJSON_DeleteItemFromObject
cloud_socket_send
strchr
strcmp
cloud_mq_set_response
gettimeofday
localtime
socket
bind
listen
memalign
__ctype_tolower
__eqdf2
__subdf3
__ledf2
floor
__ltdf2
__gtdf2
__gedf2
strncmp
__muldf3
__adddf3
__fixdfsi
__extendsfdf2
SSL_shutdown
SSL_free
SSL_CTX_free
inet_aton
getsockopt
SSL_library_init
SSL_load_error_strings
SSLv23_client_method
SSL_CTX_new
SSL_CTX_load_verify_locations
SSL_CTX_set_verify
SSL_new
SSL_set_fd
SSL_connect
SSL_get_error
SSL_write
SSL_read
strstr
cloud_heartbeat_recv_record
cloud_heartbeat_send_record
libpthread.so.0
_DYNAMIC_LINKING
__RLD_MAP
_GLOBAL_OFFSET_TABLE_
libm.so.0
libssl.so.1.0.0
liblua.so.5.1.5
__fixunsdfdi
__floatunsidf
__fixunsdfsi
__clz_tab
__unpack_f
__make_dp
__unpack_d
__fpcmp_parts_d
__pack_d
libc.so.0
_ftext
_fdata
_edata
__bss_start
_fbss
_end
$!( 
$!(@
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
$!( 
^%&	
$!(`
$!(@
$!(@
$!(@
$!(@
<,hR&0hs&#
<! @
<!  
<!0@
<!0@
<!0@
<!0@
$!( 
$!( 
$!( 
<!( 
D&!(
D&!(
T$ur
<! @
<! @
<! @
<! `
\c$+
<! `
$!( 
D&!(
<!(`
<!( 
$!(`
D&!(
<!( 
D&!(
D&!(
D&!(
D&!(
B$* D
$!( 
$!( 
$!( 
$!( 
$!( 
D&!(
D&!(
c$*8k
$!8@
f$!( 
$!( 
D&!(
D&!(
$!( 
$!( 
<!( 
$&!(
$!(@
$&!(
$!(@
$&!(
$&!(
$!(@
$&!(
$!(@
$&!(
$!(@
$&!(
lR$& 
lR$&4
<! @
<!  
)c$C
<! @
)c$C
)c$C
)c$C
<!0@
)c$C
)c$C
)c$C
$!(`
)c$C
)c$C
)c$C
)c$C
)c$C
)c$C
)c$C
<(*c$C
$!(`
<(*c$C
<(*c$C
<(*c$C
<!(@
<(*c$C
<(*c$C
<! @
<(*c$C
<(*c$C
<! @
^B4!
<h*c$C
<h*c$C
<h*c$C
<h*c$C
$!(`
)c$C
)c$C
$!( 
)c$C
$&!(
*c$C
)c$C
$&!(
)c$C
$!(@
<! @
<! `
$&!(
)c$C
$&!(
)c$C
<!0@
<! @
)c$C
$!( 
$&!(
<! @
)c$C
$!( 
)c$C
$!(@
)c$C
$!( 
$&!(
$&!(
)c$C
)c$C
<!(@
$&!(
)c$C
$!(@
$&!(
$&!(
<H*c$C
$&!(
)c$C
$!(@
)c$C
$!( 
<!  
$&!(
<H*c$C
<!(@
$&!(
*c$C
$&!(
)c$C
$!(@
$&!(
)c$C
$&!(
)c$C
$&!(
*c$C
$&!(
*c$C
$&!(
*c$C
$&!(
)c$C
$&!(
)c$C
<!(@
$&!(
)c$C
$&!(
)c$C
$&!(
)c$C
$&!(
)c$C
d&!(
<P)c$C
$!(@
c$!(@
d&!(
<P)c$C
<P)c$C
<h)c$C
d&!(
<h)c$C
<!(@
d&!(
)c$C
$!(`
d&!(
<h)c$C
d&!(
)c$C
d&!(
<t7c$C
$!(@
d&!(
<t7c$C
d&!(
*c$(
<t7c$C
$!( 
$!( 
d&!(
$!(@
d&!(
<t7c$C
7c$C
$!(@
7c$C
7c$C
$!( 
$!( 
$!(@
*c$(
7c$C
$!( 
7c$C
$!( 
D&!(
7c$C
$!(`
D&!(
7c$C
D&!(
7c$C
$!( 
D&!(
7c$C
D&!(
$!( 
D&!(
$!(`
D&!(
*c$(
7c$C
D&!(
$!( 
7c$C
7c$C
d&!(
$!( 
d&!(
d&!(
d&!(
d&!(
7c$C
$!( 
d&!(
d&!(
d&!(
7c$ 
d&!(
$!( 
d&!(
d&!(
d&!(
d&!(
7c$ 
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
$!(`
d&!(
7c$C
$!(@
d&!(
7c$C
<!(@
d&!(
7c$ 
$!(@
d&!(
7c$C
$!(@
d&!(
7c$ 
$!(@
d&!(
*c$(
7c$C
d&!(
7c$ 
$!(@
d&!(
7c$C
$!(@
d&!(
$!( 
d&!(
d&!(
d&!(
d&!(
$!( 
d&!(
d&!(
d&!(
d&!(
$!( 
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
d&!(
<X7c$C
<!(@
d&!(
d&!(
$!(@
d&!(
$!(@
d&!(
$!(@
d&!(
$!(@
*c$(
<X7c$C
d&!(
$!(@
d&!(
$!(@
<X7c$C
$!( 
<@7c$C
<X7c$C
$!( 
<X7c$
<X7c$
<xhF
<phF
<hhE
<dhE
<`hE
<XhF
<PhF
<L8c$
<@;c$C
$!( 
<L8c$
<h;c$C
<L8c$
;c$C
$!( 
D&!(
<L8c$
;c$C
D&!(
<L8c$
;c$C
<L8c$
<T;c$C
$!(`
<L8c$
<T;c$C
$!(`
$!  
<L8c$
<T;c$C
L8c$
<T;c$
<L8c$
<T;c$C
<L8c$
;c$C
<L8c$
;c$C
$!( 
<L8c$
;c$C
<!  
<!  
<!  
<!  
<!  
<!  
<!  
<!  
<!  
<!  
<!  
<!  
<!0@
<!0@
Ec$C
$!( 
Ec$C
<!( 
Ec$C
$!( 
;c$ 
Ec$C
<! @
<DEc$C
<!( 
Dc$C
>e$O/
F$! 
<DEc$C
<!( 
;c$ 
<DEc$C
;c$ 
Dc$C
;c$ 
<DEc$C
;c$ 
<DEc$C
<DEc$C
$!( 
Dc$C
$!(@
d&!(
Dc$C
<!(`
d&!(
;c$ 
Dc$C
d&!(
<! @
<! @
Dc$C
Dc$C
$!( 
d&!(
d&!(
Dc$C
<!(@
d&!(
Dc$C
$!(`
d&!(
$!(@
d&!(
;c$ 
Dc$C
d&!(
d&!(
Dc$C
;c$ 
Dc$C
d&!(
;c$ 
Dc$C
d&!(
Dc$C
$!(@
d&!(
Dc$C
$!(@
d&!(
;c$ 
Dc$C
d&!(
Dc$C
$!(@
d&!(
;c$ 
Dc$C
<lEc$C
;c$ 
<lEc$C
Dc$C
d&!(
Dc$C
d&!(
;c$ 
Dc$C
d&!(
<! @
<! @
Dc$C
Dc$C
d&!(
d&!(
;c$ 
Dc$C
Dc$C
d&!(
Dc$ 
d&!(
;c$ 
Dc$C
d&!(
Dc$C
d&!(
d&!(
;c$ 
Dc$C
d&!(
;c$ 
Dc$C
d&!(
Dc$C
d&!(
d&!(
Dc$C
Dc$C
d&!(
Dc$C
d&!(
;c$ 
Dc$C
<!  
Fc$C
Fc$C
$!(@
Ec$ 
Fc$C
$!(@
Ec$ 
Fc$C
<! @
D&!(
<0Lc$C
D&!(
<pLc$
D&!(
<pLc$C
<! @
D&!(
<0Lc$C
Fc$ 
<0Lc$C
<0Lc$C
D&!(
<0Lc$C
D&!(
D&!(
<pLc$C
D&!(
D&!(
<pLc$C
D&!(
Lc$C
$!(@
D&!(
<pLc$C
D&!(
Lc$C
D&!(
pLc$C
D&!(
<pLc$C
D&!(
D&!(
D&!(
Lc$C
<!(@
Lc$C
pLc$C
Lc$C
Lc$ 
<!(@
D&!(
Lc$C
D&!(
Fc$ 
Lc$C
D&!(
<PLc$C
<PLc$C
D&!(
Fc$ 
<PLc$C
D&!(
Lc$C
D&!(
D&!(
Lc$C
D&!(
D&!(
Fc$ 
Lc$C
D&!(
D&!(
Lc$C
D&!(
$!( 
$!( 
Qc$C
$!( 
$!( 
$!( 
<(Qc$C
$!( 
(Qc$C
$!( 
(Qc$C
$!( 
<@Qc$C
B0%(
<@Qc$C
Mc$(
<@Qc$C
Mc$(
<@Qc$C
<PQc$C
$!( 
d&!(
<PQc$C
d&!(
Mc$(
<PQc$C
o]B$
1&!0
 Ts&
<<Us&
&!( 
1&PT
<!8@
J%%`
$7%!
()%hV
< mE
F$! 
<pVC
pVB$
<!0@
<!0@
<!8`
S&! `
<0VB$
<LVB$
< mP
< mb
< mT
< mS
< mB
<vTB$
B$%@
%$0d
5$0C
4$ U
&$(w
`Kc$! 
|c$! 
<eVB$!
Yc$!
c4!x
]c$!p
O~c$!h
c4!`
Cc$!Xc
<!Xl
c$!PC
<!PK
~c$!H#
<!H*
c4!@
c4!8
<!Xl
c4!0
T&! 
T&! 
$!  
$! @
<8Wc$
<p`c$C
$!( 
<8Wc$
`c$C
<8Wc$
`c$C
$!(@
$&!(
<8Wc$
`c$C
$!(@
$&!(
<8Wc$
`c$C
$!(@
$&!(
<8Wc$
`c$C
$&!(
<8Wc$
`c$C
$!(@
<8Wc$
`c$C
'! d
<8Wc$
`c$C
$!(`
<8Wc$
`c$C
<8Wc$
`c$C
<8Wc$(
`c$C
<8Wc$
`c$C
<8Wc$(
`c$C
D&!(
<8Wc$(
`c$C
<8Wc$
`c$C
$!(`
<8Wc$
<8Wc$(
`c$C
<8Wc$
`c$C
<8Wc$(
`c$C
<8Wc$
`c$C
<!(@
<8Wc$(
`c$C
<8Wc$(
`c$C
<8Wc$(
`c$C
<8Wc$(
`c$C
<8Wc$
`c$C
$!( 
D&!(
<8Wc$
`c$C
D&!(
<8Wc$
`c$C
<8Wc$
`c$C
<8Wc$
`c$C
$!( 
<8Wc$
`c$C
<8Wc$
`c$C
<8Wc$
`c$C
<8Wc$
`c$C
<8Wc$
$!( 
<8Wc$ 
<8Wc$
<8Wc$
ac$C
<8Wc$
ac$C
<8Wc$
<8Wc$
<8Wc$
<8Wc$(
ac$C
<8Wc$(
<tac$
fc$C
$!( 
<tac$
fc$C
$!( 
<tac$
gc$C
<tac$
gc$C
<tac$
gc$C
$!(@
$&!(
<tac$
gc$C
$!(@
$&!(
<tac$
gc$C
$&!(
<tac$
gc$C
bd&(
0dR&
bd&D
<tac$
<$gc$C
<tac$
<4gc$C
<tac$
<Dgc$C
<tac$
<Dgc$C
<tac$
<\gc$C
<tac$
<\gc$C
<tac$
<\gc$C
$!(@
<tac$
<tgc$C
$!(@
<tac$
<tgc$C
<tac$(
<tgc$C
<tac$
<tgc$C
<tac$
gc$C
<+0F
$+8g
$+0e
$!Xh
$+8g
(1%8
B9'	
create pipe failed: %s!
frok failed
/usr/lib/lua/cloud_dispatcher.lua
dispatcher
params
deviceId
cloudUserName
deviceName
deviceType
alias
deviceMac
hwId
deviceModel
deviceHwVer
fwId
oemId
fwVer
error_code
result
tcspStatus
illegalType
stopConnect
reconnectTime
firmwarePage
tcspInfo
/tmp/log.4
%s | %5s | pid:%d | %s:%d | %s | - receive sigpipe:%d
debug
cloud.c
/tmp/log.3
/tmp/log.2
/tmp/log.1
please use cloud-sdk like this:
        ./cloud-brd -c <config-file-path>
/tmp/cloud.pid
%s | %5s | pid:%d | %s:%d | %s | - can't open %s: %s
error
%s | %5s | pid:%d | %s:%d | %s | - can't lock %s: %s
/tmp/cloud-brd
%s | %5s | pid:%d | %s:%d | %s | - cloud-sdk version: %s, build_time:%s
20210825_030856
%s | %5s | pid:%d | %s:%d | %s | - config path: %s
%s | %5s | pid:%d | %s:%d | %s | - get config path error
%s | %5s | pid:%d | %s:%d | %s | - load config error, path: %s
%s | %5s | pid:%d | %s:%d | %s | - sef domain          : %s
%s | %5s | pid:%d | %s:%d | %s | - sef port            : %d
%s | %5s | pid:%d | %s:%d | %s | - default svr         : %s
%s | %5s | pid:%d | %s:%d | %s | - default port        : %d
%s | %5s | pid:%d | %s:%d | %s | - heartbeat interval  : %d
%s | %5s | pid:%d | %s:%d | %s | - request timeout     : %d
%s | %5s | pid:%d | %s:%d | %s | - noaccount interval  : %lld
%s | %5s | pid:%d | %s:%d | %s | - max message number  : %d
%s | %5s | pid:%d | %s:%d | %s | - max client number   : %d
%s | %5s | pid:%d | %s:%d | %s | - cer file            : %s
%s | %5s | pid:%d | %s:%d | %s | - daemonize success
%s | %5s | pid:%d | %s:%d | %s | - cloud is already running, result:%d
%s | %5s | pid:%d | %s:%d | %s | - cloud-brd run first time
%s | %5s | pid:%d | %s:%d | %s | - cloud cycle init error
%s | %5s | pid:%d | %s:%d | %s | - cloud cycle init success
%s | %5s | pid:%d | %s:%d | %s | - cloud worker init error
%s | %5s | pid:%d | %s:%d | %s | - cloud worker init success
%s | %5s | pid:%d | %s:%d | %s | - init thread attr error
%s | %5s | pid:%d | %s:%d | %s | - set stack size error
%s | %5s | pid:%d | %s:%d | %s | - set stack size success
%s | %5s | pid:%d | %s:%d | %s | - create worker thread error:%d
%s | %5s | pid:%d | %s:%d | %s | - thread worker create success
%s | %5s | pid:%d | %s:%d | %s | - waiting for register
%s | %5s | pid:%d | %s:%d | %s | - cloud-brd end
pgrep -o brd
%s | %5s | pid:%d | %s:%d | %s | - buffer is :%s
%s | %5s | pid:%d | %s:%d | %s | - g_pid is :%d
%s | %5s | pid:%d | %s:%d | %s | - kill_ghost_process return.
%s | %5s | pid:%d | %s:%d | %s | - receive sigint:%d
main
cloud_already_running
kill_myself
cloud_sigint_handle
cloud_sigpipe_handle
%s | %5s | pid:%d | %s:%d | %s | - parameter error
cloud_config.c
%s | %5s | pid:%d | %s:%d | %s | - fail to open the configure file, error=%d, path=%s
%s | %5s | pid:%d | %s:%d | %s | - fail to move curse to the end of the file
%s | %5s | pid:%d | %s:%d | %s | - fail to get file size
%s | %5s | pid:%d | %s:%d | %s | - fail to malloc, size=%d
%s | %5s | pid:%d | %s:%d | %s | - fail to move curse to the head of the file
%s | %5s | pid:%d | %s:%d | %s | - fail to read the configure file, error=%d, path=%s
%s | %5s | pid:%d | %s:%d | %s | - read file %s error
%s | %5s | pid:%d | %s:%d | %s | - config malloc error
%s | %5s | pid:%d | %s:%d | %s | - json parse error
cloud
sefDomain
sefPort
defaultSvr
defaultPort
defaultValidTime
default
heartbeat_interval_ms
request_timeout_ms
max_message_number
max_client_number
reconnect_timewait_max_ms
reconnect_cachedsvr_max_times
reconnect_defaultsvr_max_times
reconnect_random_time_min_ms
reconnect_random_time_max_ms
noaccount_reconnect_interval_ms
cer_file
**************************************************
********************config dump*******************
--------------------------------------------------
sef domain                      : %s
sef port                        : %d
default svr                     : %s
default port                    : %d
default valid time              : %d
heartbeat interval              : %d
request timeout                 : %d
reconnect timewait max          : %lld
reconnect cachedsvr max times   : %d
reconnect defaultsvr max times  : %d
reconnect random time min       : %lld
reconnect random time max       : %lld
noaccount interval              : %lld
max message number              : %d
max client number               : %d
cer file                        : %s
cloud_config_load
cloud_config_read_file
cloud_config_dump
cloud_worker.c
%s | %5s | pid:%d | %s:%d | %s | - malloc worker error
%s | %5s | pid:%d | %s:%d | %s | - malloc client fd error
%s | %5s | pid:%d | %s:%d | %s | - malloc file path error
%s | %5s | pid:%d | %s:%d | %s | - ipc server init error
%s | %5s | pid:%d | %s:%d | %s | - begin cloud worker destroy
%s | %5s | pid:%d | %s:%d | %s | - end cloud worker destroy
%s | %5s | pid:%d | %s:%d | %s | - cloud worker start error
%s | %5s | pid:%d | %s:%d | %s | - begin worker loop
%s | %5s | pid:%d | %s:%d | %s | - select error, result:%d
%s | %5s | pid:%d | %s:%d | %s | - new client receive
%s | %5s | pid:%d | %s:%d | %s | - client %d message receive
cloud_worker_init
cloud_worker_start
cloud_worker_destroy
thread_worker
%s | %5s | pid:%d | %s:%d | %s | - begin cloud cycle destroy
cloud_cycle.c
%s | %5s | pid:%d | %s:%d | %s | - end cloud cycle destroy
%s | %5s | pid:%d | %s:%d | %s | - cloud cycle malloc error
%s | %5s | pid:%d | %s:%d | %s | - cloud cycle sef domain malloc error
%s | %5s | pid:%d | %s:%d | %s | - cloud cycle default svr malloc error
%s | %5s | pid:%d | %s:%d | %s | - cloud socket init error
%s | %5s | pid:%d | %s:%d | %s | - cloud msg queue init error
warn
%s | %5s | pid:%d | %s:%d | %s | - begin cycle loop
%s | %5s | pid:%d | %s:%d | %s | - select error
%s | %5s | pid:%d | %s:%d | %s | - link error
%s | %5s | pid:%d | %s:%d | %s | - rset ok
%s | %5s | pid:%d | %s:%d | %s | - recv string:%s
%s | %5s | pid:%d | %s:%d | %s | - socket closed by peer, result:%d
%s | %5s | pid:%d | %s:%d | %s | - socket receive error:%d
  cycle->status:                        %d
  cycle->sefDomain:                     %s
  cycle->sefPort:                       %d
  cycle->illegalDeviceNotify:           %d
  cycle->reconnectNotify:               %d
  cycle->closeByCloud:                  %d
  cycle->finByCloud:                  	%d
  cycle->flagOfSvr:                     %d
  cycle->cachedSvr:                     %s
  cycle->cachedPort:                    %d
  cycle->validTimeOnDevice:             %lld
  cycle->svrConnectedTime:              %lld
  cycle->defaultSvr:                    %s
  cycle->defaultPort:                   %d
  cycle->cloudSocket:                   %p
        cloudSocket->sockfd:            %d
        cloudSocket->cerFile:           %s
        cloudSocket->status:            %d
  cycle->ipList:                        %p
  cycle->heartbeatInterval:             %lld
  cycle->requestTimeout:                %lld
  cycle->lastRequestTime:               %lld
  cycle->reconnectTimeWait:             %lld
  cycle->noaccountInterval:             %lld
  cycle->lastConnectedTime:             %lld
  cycle->reconnectTimewaitMax:          %lld
  cycle->reconnectCachedsvrMaxTimes:    %d
  cycle->reconnectDefaultsvrMaxTimes:   %d
  cycle->reconnectRandomTimeMin:        %lld
  cycle->reconnectRandomTimeMax:        %lld
  cycle->hasNoAccount:                  %d
  cycle->noNdUpdtLstCnnctTm:            %d
  cycle->heartbeatStatus:               %d
  cycle->heartbeatSendTime:             %lld
  cycle->heartbeatRecvTime:             %lld
  cycle->flagOfMode:                    %d
  cycle->build_hellocloud:              %p
  cycle->response_hellocloud:           %p
  cycle->respond_cloud:                 %p
  cycle->free_fn:                       %p
  cycle->registerFd:                    %d
  cycle->hellocloudStr:                 %p:%s
  cycle->resToCloudStr:                 %p:%s
cloud_cycle_init
cloud_cycle_destroy
cloud_cycle_start
cloud_cycle_reset_notify_flags
cloud_cycle_update_last_request_time
cloud_cycle_update_last_connected_time
cloud_cycle_dump
cloud_client_handle.c
%s | %5s | pid:%d | %s:%d | %s | - get msg id error
timeout
%s | %5s | pid:%d | %s:%d | %s | - parse timeout error
flag
%s | %5s | pid:%d | %s:%d | %s | - parse flag error
request
%s | %5s | pid:%d | %s:%d | %s | - parse request error
%s | %5s | pid:%d | %s:%d | %s | - id got:%d
%s | %5s | pid:%d | %s:%d | %s | - parse inner request error
%s | %5s | pid:%d | %s:%d | %s | - transfer json to str error
%s | %5s | pid:%d | %s:%d | %s | - request will insert into mq:%s
%s | %5s | pid:%d | %s:%d | %s | - msg queue insert error
%s | %5s | pid:%d | %s:%d | %s | - json create error
errorcode
%s | %5s | pid:%d | %s:%d | %s | - json transfer to string error
%s | %5s | pid:%d | %s:%d | %s | - ipc send error
%s | %5s | pid:%d | %s:%d | %s | - mode is not empty, flag of mode:%d
%s | %5s | pid:%d | %s:%d | %s | - message NULL
%s | %5s | pid:%d | %s:%d | %s | - parse message error
{"errorcode":%d}
%s | %5s | pid:%d | %s:%d | %s | - ipc send response of register error
%s | %5s | pid:%d | %s:%d | %s | - fail to send "get hello cloud"
%s | %5s | pid:%d | %s:%d | %s | - fail to recv "hello cloud string"
%s | %5s | pid:%d | %s:%d | %s | - parse hellocloud string error
response
%s | %5s | pid:%d | %s:%d | %s | - dup hellocloud string error
event
%s | %5s | pid:%d | %s:%d | %s | - parse event error
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client request
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client request noaccount
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client get response
%s | %5s | pid:%d | %s:%d | %s | - message null
%s | %5s | pid:%d | %s:%d | %s | - message parse error
%s | %5s | pid:%d | %s:%d | %s | - get id error
{"id":%d, "errorcode":%d}
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client get link status
{"errorcode":0,"status":%d}
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client get account status
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client register
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client unregister
%s | %5s | pid:%d | %s:%d | %s | - mode is not register, no need to unregister, mode:%d
%s | %5s | pid:%d | %s:%d | %s | - not the client which is registed, permission denied
%s | %5s | pid:%d | %s:%d | %s | - ipc send response of unregister error
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client notify brd
%s | %5s | pid:%d | %s:%d | %s | - dispatch as client response cloud
%s | %5s | pid:%d | %s:%d | %s | - string dup error
%s | %5s | pid:%d | %s:%d | %s | - dispatch error
%s | %5s | pid:%d | %s:%d | %s | - accept as client %d
{"errorcode":0,"result":%d}
%s | %5s | pid:%d | %s:%d | %s | - close client %d
%s | %5s | pid:%d | %s:%d | %s | - client %d close
%s | %5s | pid:%d | %s:%d | %s | - cloud ipc recv error, result:%d
%s | %5s | pid:%d | %s:%d | %s | - the closed client is the registed one
cloud_client_handle_new
cloud_client_handle_message
cloud_client_handle_close
cloud_client_handle_dispatch
cloud_client_handle_request
cloud_client_handle_request_noaccount
cloud_client_handle_get_response
cloud_client_handle_register
cloud_client_handle_unregister
cloud_client_handle_notify_brd
cloud_client_handle_response_cloud
%s | %5s | pid:%d | %s:%d | %s | - fail to parse the domain:%s:%d
cloud_session.c
%s | %5s | pid:%d | %s:%d | %s | - got ip num: %d
%s | %5s | pid:%d | %s:%d | %s | - ip %d: %s
%s | %5s | pid:%d | %s:%d | %s | - fail to get ip
%s | %5s | pid:%d | %s:%d | %s | - use IP :%s
%s | %5s | pid:%d | %s:%d | %s | - connect sef error
%s | %5s | pid:%d | %s:%d | %s | - handshake sef error
%s | %5s | pid:%d | %s:%d | %s | - fail to parse the domain:%s
%s | %5s | pid:%d | %s:%d | %s | - connect cachedSvr error
%s | %5s | pid:%d | %s:%d | %s | - handshake cachedSvr error
%s | %5s | pid:%d | %s:%d | %s | - in
%s | %5s | pid:%d | %s:%d | %s | - connect defaultSvr error
%s | %5s | pid:%d | %s:%d | %s | - handshake defaultSvr error
%s | %5s | pid:%d | %s:%d | %s | - out
%s | %5s | pid:%d | %s:%d | %s | - cloud socket already disconnected
%s | %5s | pid:%d | %s:%d | %s | - will connect cloud in %lld seconds
%s | %5s | pid:%d | %s:%d | %s | - begin connect SEF
%s | %5s | pid:%d | %s:%d | %s | - will connect SEF in %lld seconds
%s | %5s | pid:%d | %s:%d | %s | - error code not 0, will connect cachedsvr or defaultSvr
%s | %5s | pid:%d | %s:%d | %s | - illegal device, disconnect with server
%s | %5s | pid:%d | %s:%d | %s | - receive stop connect, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - fail to connect the SEF, result:%d
%s | %5s | pid:%d | %s:%d | %s | - will connect to SEF again, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - will connect to cachedSvr, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - will connect to defaultSvr, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - begin connect cachedSvr
%s | %5s | pid:%d | %s:%d | %s | - will connect cachedSvr in %lld seconds
%s | %5s | pid:%d | %s:%d | %s | - connect cachedSvr success
%s | %5s | pid:%d | %s:%d | %s | - fail to connect the cachedSvr, result:%d
%s | %5s | pid:%d | %s:%d | %s | - will connect to cachedSvr again, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - will connect to SEF, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - begin connect defaultSvr
%s | %5s | pid:%d | %s:%d | %s | - will connect defaultSvr in %lld seconds
%s | %5s | pid:%d | %s:%d | %s | - connect defaultSvr success
%s | %5s | pid:%d | %s:%d | %s | - fail to connect the defaultSvr, result:%d
%s | %5s | pid:%d | %s:%d | %s | - will connect to defaultSvr again, reconnect time:%lld
%s | %5s | pid:%d | %s:%d | %s | - cachedsvr expired
%s | %5s | pid:%d | %s:%d | %s | - socket closed by cloud, will random %lld seconds to reconnect
%s | %5s | pid:%d | %s:%d | %s | - receive FIN, will reconnect in %llds
%s | %5s | pid:%d | %s:%d | %s | - waiting for client to register
***************************************************************
  SESSION_RECONNECT_TIMEWAIT_MIN:         %lld
  SESSION_RECONNECT_TIMEWAIT_MAX:         %lld
  SESSION_RECONNECT_TIMEWAIT_SEF_BASE:    %lld
  SESSION_RECONNECT_SEF_MAX_TIMES:        %d
  SESSION_RECONNECT_CACHEDSVR_MAX_TIMES:  %d
  SESSION_RECONNECT_DEFAULTSVR_MAX_TIMES: %d
  SESSION_RECONNECT_RANDOM_TIME_MIN:      %lld
  SESSION_RECONNECT_RANDOM_TIME_MAX:      %lld
cloud_session_dispatch
cloud_session_with_account
cloud_session_connect_sef
cloud_session_connect_cachedSvr
cloud_session_connect_defaultSvr
cloud_session_without_account
cloud_session_disconnect
%s | %5s | pid:%d | %s:%d | %s | - ip list malloc error
cloud_ip_list.c
%s | %5s | pid:%d | %s:%d | %s | - begin cloud ip list destroy
%s | %5s | pid:%d | %s:%d | %s | - already destroyed
%s | %5s | pid:%d | %s:%d | %s | - end cloud ip list destroy
%s | %5s | pid:%d | %s:%d | %s | - begin to parse the domain, host:%s, port:%d
%s | %5s | pid:%d | %s:%d | %s | - get addr info error, host:%s, serv:%s, %s
%s | %5s | pid:%d | %s:%d | %s | - get zero addr info
%s | %5s | pid:%d | %s:%d | %s | - ip list node malloc error
%s | %5s | pid:%d | %s:%d | %s | - inet_ntop error:%s
%s | %5s | pid:%d | %s:%d | %s | - begin ip list dump
  list->num:          %d
  list->head:         %p
        node:             %p
        node->ip:         %s
        node->next:       %p
cloud_ip_list_init
cloud_ip_list_parse
cloud_ip_list_get_next
cloud_ip_list_destroy
cloud_ip_list_node_free
cloud_ip_list_dump
cloud_handshake.c
%s | %5s | pid:%d | %s:%d | %s | - fail to get the request string of hellocloud
%s | %5s | pid:%d | %s:%d | %s | - fail to create json object
tcspVer
helloCloud
method
%s | %5s | pid:%d | %s:%d | %s | - generate helloCloud json error
%s | %5s | pid:%d | %s:%d | %s | - fail to get params from hellocloud request
%s | %5s | pid:%d | %s:%d | %s | - fail to get hwId from hellocloud request
%s | %5s | pid:%d | %s:%d | %s | - fail to dup hwId from hellocloud request
%s | %5s | pid:%d | %s:%d | %s | - hwId length error
authCode
%s | %5s | pid:%d | %s:%d | %s | - transform from json to string error
%s | %5s | pid:%d | %s:%d | %s | - malloc request with md5 error
%02x
%s | %5s | pid:%d | %s:%d | %s | - generate hellocloud with authCode error
%s | %5s | pid:%d | %s:%d | %s | - send to SEF: %s
%s | %5s | pid:%d | %s:%d | %s | - socket send error
%s | %5s | pid:%d | %s:%d | %s | - socket recv error
%s | %5s | pid:%d | %s:%d | %s | - recv from SEF: %s
%s | %5s | pid:%d | %s:%d | %s | - parse response error
%s | %5s | pid:%d | %s:%d | %s | - parse errorcode error
%s | %5s | pid:%d | %s:%d | %s | - error code of response : %d
%s | %5s | pid:%d | %s:%d | %s | - parse result error
cachedSvr
%s | %5s | pid:%d | %s:%d | %s | - parse cachedSvr error
%s | %5s | pid:%d | %s:%d | %s | - dup cachedSvr:cachedPort error
%s | %5s | pid:%d | %s:%d | %s | - invalid cachedSvr url
validTimeOnDevice
%s | %5s | pid:%d | %s:%d | %s | - parse validTimeOnDevice error
%s | %5s | pid:%d | %s:%d | %s | - illegalType:%d
%s | %5s | pid:%d | %s:%d | %s | - has no "illegalType" item
%s | %5s | pid:%d | %s:%d | %s | - has no "stopConnect" item, too!
%s | %5s | pid:%d | %s:%d | %s | - sef response parse error
%s | %5s | pid:%d | %s:%d | %s | - send to svr: %s
%s | %5s | pid:%d | %s:%d | %s | - recv from svr: %s
%s | %5s | pid:%d | %s:%d | %s | - resStruct malloc error
fwDlPage
%s | %5s | pid:%d | %s:%d | %s | - dup fwDlPage error
%s | %5s | pid:%d | %s:%d | %s | - dup tcspInfo error
%s | %5s | pid:%d | %s:%d | %s | - stopConnect value = 0
%s | %5s | pid:%d | %s:%d | %s | - svr response parse error
cloud_handshake_sef
cloud_handshake_parse_sef_response
cloud_handshake_svr
cloud_handshake_parse_svr_response
cloud_handshake_generate_hellocloud_sef
cloud_handshake_generate_hellocloud_json
cloud_handshake_hellocloud_add_authcode
cloud_handshake_generate_hellocloud_svr
cloud_heartbeat.c
%s | %5s | pid:%d | %s:%d | %s | - send heartBeat timeout %d times
%s | %5s | pid:%d | %s:%d | %s | - send heartBeat timeout 3 times ....
%s | %5s | pid:%d | %s:%d | %s | - cjson create error
heartBeat
cloud_heartbeat_insert_into_mq
cloud_server_handle.c
%s | %5s | pid:%d | %s:%d | %s | - cloud response recv
%s | %5s | pid:%d | %s:%d | %s | - parse id error
%s | %5s | pid:%d | %s:%d | %s | - set response error
%s | %5s | pid:%d | %s:%d | %s | - cloud request recv
%s | %5s | pid:%d | %s:%d | %s | - get response error
%s | %5s | pid:%d | %s:%d | %s | - get register client response is:%s
%s | %5s | pid:%d | %s:%d | %s | - parse get response error
%s | %5s | pid:%d | %s:%d | %s | - trasfer from json to string error
%s | %5s | pid:%d | %s:%d | %s | - response to cloud:%s
%s | %5s | pid:%d | %s:%d | %s | - socket send error, response:%s
notifyEvent
%s | %5s | pid:%d | %s:%d | %s | - parse params error
illegalDevice
%s | %5s | pid:%d | %s:%d | %s | - recv "illegalDevice" notifyEvent
%s | %5s | pid:%d | %s:%d | %s | - recv "stopConnect" notifyEvent
attribute
%s | %5s | pid:%d | %s:%d | %s | - parse attribute error
reason
heartBeatInterval
%s | %5s | pid:%d | %s:%d | %s | - recv "heartbeatInterval" notifyEvent
interval
%s | %5s | pid:%d | %s:%d | %s | - parse intervel error
%s | %5s | pid:%d | %s:%d | %s | - interval is 0
%s | %5s | pid:%d | %s:%d | %s | - device has no account, modify heartBeatInterval is not allowed
connectInterval
%s | %5s | pid:%d | %s:%d | %s | - recv "connectInterval" notifyEvent
%s | %5s | pid:%d | %s:%d | %s | - no such notifyEvent: %s
cloud_server_handle_dispatch
cloud_server_handle_response
cloud_server_handle_request
cloud_server_handle_notify
%04d-%02d-%02d %02d:%02d:%02d.%03d
%s | %5s | pid:%d | %s:%d | %s | - socket create error, errno: %d
../cloud-mod/util/cloud_ipc.c
%s | %5s | pid:%d | %s:%d | %s | - fail to bind the socket, errno:%d:%s
%s | %5s | pid:%d | %s:%d | %s | - fail to listen the socket, errno:%d
%s | %5s | pid:%d | %s:%d | %s | - socket create error, errno: %d:%s
%s | %5s | pid:%d | %s:%d | %s | - fail to connect the socket, errno:%d:%s
%s | %5s | pid:%d | %s:%d | %s | - client init success, fd:%d
%s | %5s | pid:%d | %s:%d | %s | - message header receive error, n:%d
%s | %5s | pid:%d | %s:%d | %s | - message header magic error
%s | %5s | pid:%d | %s:%d | %s | - recv, type:%d, message:(nil)
%s | %5s | pid:%d | %s:%d | %s | - message string malloc error
%s | %5s | pid:%d | %s:%d | %s | - message body receive error, n:%d
%s | %5s | pid:%d | %s:%d | %s | - recv, type:%d, message:%s
%s | %5s | pid:%d | %s:%d | %s | - send to fd:%d, type:%d, message:%s
%s | %5s | pid:%d | %s:%d | %s | - write message header error, n:%d
%s | %5s | pid:%d | %s:%d | %s | - write message error, n:%d
cloud_ipc_server_init
cloud_ipc_client_init
cloud_ipc_recv
cloud_ipc_send
memory talbe has not been initialized
%s():Try to free invalid memory 0x%p.
mem tail fault
%s():There is no memory pool for address 0x%p.
%s():Memory 0x%p overflow, Magic=0x%x, Tail = 0x%x, size=%d.
%s():Try to free invalid memory 0x%p, magic is %d.
*************************************************************
*************************MMM TABLE DUMP**********************
-------------------------------------------------------------
 poolhead(%d)  poolnum  dynamictimes  chainhead  poolend     
 %-16p%-11d%-10d%-10p%-10p
 index  poolhead(%d)    size    blocks    free     usage  
  %-6d%-16p%-12d%-10d%-10d%-10d
 index  chainnode(%d)   magic    length    prev    next      
  %-8d%-14p%-10d%-6d%-11p%-11p
(nil)
idle
busy
There is no pool matched.
*****************MMM BLOCK(SIZE=%d)********************
    index    dataptr    dbgId    status      data      
-------------------------------------------------------
magic error, magic is %d
   %-4d	0x%-8p	%-4x	%-8s	%-20s
%s():mem table already exists!
init error
%s():Total mem size=%d, addr=0x%p.
mmmFreeStatic
mmmFreeDynamic
mmmInit
%.0f
u%04x
null
false
true
$@%s | %5s | pid:%d | %s:%d | %s | - cloud socket malloc error
cloud_socket.c
%s | %5s | pid:%d | %s:%d | %s | - the ssl socket is already disconnected
%s | %5s | pid:%d | %s:%d | %s | - begin to disconnect the socket
%s | %5s | pid:%d | %s:%d | %s | - shut down and free the SSL
%s | %5s | pid:%d | %s:%d | %s | - free the CTX
%s | %5s | pid:%d | %s:%d | %s | - close the socket
%s | %5s | pid:%d | %s:%d | %s | - end to disconnect the socket
%s | %5s | pid:%d | %s:%d | %s | - the port is out of range
%s | %5s | pid:%d | %s:%d | %s | - the ssl socket already connected
%s | %5s | pid:%d | %s:%d | %s | - begin to connect the socket, ip:%s, port:%d
%s | %5s | pid:%d | %s:%d | %s | - create socket error, error:%d
%s | %5s | pid:%d | %s:%d | %s | - inet_aton error
%s | %5s | pid:%d | %s:%d | %s | - connect to server error, result:%d, errno:%d
%s | %5s | pid:%d | %s:%d | %s | - connect to server success immediately
%s | %5s | pid:%d | %s:%d | %s | - select error, result:%d, errno:%d:%s
%s | %5s | pid:%d | %s:%d | %s | - select error, result:%d, error:%d, %s
%s | %5s | pid:%d | %s:%d | %s | - tcp connect to the server success
%s | %5s | pid:%d | %s:%d | %s | - create SSL_CTX error
%s | %5s | pid:%d | %s:%d | %s | - ctx:%p, cerfile:%s
%s | %5s | pid:%d | %s:%d | %s | - load cer file error, result:%d
%s | %5s | pid:%d | %s:%d | %s | - create SSL error
%s | %5s | pid:%d | %s:%d | %s | - set ssl fd error
%s | %5s | pid:%d | %s:%d | %s | - ssl connect timeout
%s | %5s | pid:%d | %s:%d | %s | - ssl connect error, err:%d
%s | %5s | pid:%d | %s:%d | %s | - ssl connect to the server success, ip:%s, port:%d
%s | %5s | pid:%d | %s:%d | %s | - fail to connect the server, ip:%s, port:%d
%s | %5s | pid:%d | %s:%d | %s | - begin cloud socket destroy
%s | %5s | pid:%d | %s:%d | %s | - end cloud socket destroy
%s | %5s | pid:%d | %s:%d | %s | - the ssl socket is disconnected
%s | %5s | pid:%d | %s:%d | %s | - the socket is disconnected, result:%d
%s | %5s | pid:%d | %s:%d | %s | - recv timeout
%s | %5s | pid:%d | %s:%d | %s | - socket send error, result:%d
%s | %5s | pid:%d | %s:%d | %s | - socket recv error, result:%d
%s | %5s | pid:%d | %s:%d | %s | - socket closed by peer
%s | %5s | pid:%d | %s:%d | %s | - socket recv magic header error,0x%02x%02x
%s | %5s | pid:%d | %s:%d | %s | - malloc error
cloud_socket_init
cloud_socket_connect
cloud_socket_disconnect
cloud_socket_destroy
cloud_socket_send_buf
cloud_socket_recv_buf
cloud_socket_send
cloud_socket_recv
%s | %5s | pid:%d | %s:%d | %s | - init num not allowed, num:%d
cloud_mq.c
%s | %5s | pid:%d | %s:%d | %s | - msg queue malloc error
%s | %5s | pid:%d | %s:%d | %s | - free %d request string, %d response string
%s | %5s | pid:%d | %s:%d | %s | - begin cloud mq destroy
%s | %5s | pid:%d | %s:%d | %s | - end cloud mq destroy
********************************************************************
**********************cloud msg queue dump**************************
--------------------------------------------------------------------
     nodeTotal    nodeReady    idNext    nodeNext    node[0]        
       %-4d          %-4d       %-4d       %-4d      %-10p          
   id  clientFd   status   timeout   reqTime   reqStr   resStr   
   %-6d%-8d%-6d%-14lld%-14lld%-12p%-12p
%s | %5s | pid:%d | %s:%d | %s | - msg queue full
%s | %5s | pid:%d | %s:%d | %s | - response timeout, will discard
"method":"heartBeat"
%s | %5s | pid:%d | %s:%d | %s | - coresponding request not found
%s | %5s | pid:%d | %s:%d | %s | - response not arrive, node status:%d
%s | %5s | pid:%d | %s:%d | %s | - timeout
%s | %5s | pid:%d | %s:%d | %s | - string duplicate error
%s | %5s | pid:%d | %s:%d | %s | - response found, id:%d, resStr:%s
%s | %5s | pid:%d | %s:%d | %s | - no such request
%s | %5s | pid:%d | %s:%d | %s | - send request error, result:%d, reqStr:%s
%s | %5s | pid:%d | %s:%d | %s | - send to cloud:%s
cloud_mq_init
cloud_mq_clean
cloud_mq_destroy
cloud_mq_dump
cloud_mq_get_id
cloud_mq_insert_request
cloud_mq_set_response
cloud_mq_get_response
cloud_mq_send_request
