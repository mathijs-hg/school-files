/lib/ld-uClibc.so.0
pPZA
_init
_fini
__uClibc_main
__deregister_frame_info
__register_frame_info
_Jv_RegisterClasses
libubox.so
_DYNAMIC_LINKING
__RLD_MAP
_GLOBAL_OFFSET_TABLE_
stderr
fputs
fprintf
snprintf
fopen
fclose
fgets
strchr
malloc
free
md5sum
md5_begin
read
__errno_location
md5_hash
md5_end
memcmp
write
strcmp
memset
mtd_fixtrx
mtd_fixseama
exit
quiet
sscanf
strstr
ioctl
strdup
stat
lseek
no_erase
optarg
strtoul
getopt
optind
trx_check
sync
perror
mtd_replace_jffs2
mtd_parse_jffs2data
trx_fixup
fputc
mtd_write_jffs2
fflush
system
sleep
syscall
memcpy
strlen
strncmp
erasesize
mtdsize
mtd_block_is_bad
mtd_erase_block
crc32_table
strrchr
mtd_check_open
libc.so.0
_ftext
_fdata
_edata
__bss_start
_fbss
Tc$!
<(SB$
SE$	
<! `
$! @
Ys&#
$!8 
<! @
$!0@
QE&	
QE&	
P$! 
<! @
<8Rs&
Ts&D
B$! 
D$!0 
'! `
B$! 
$!0`
4$Xf
$!H#
s6!8
Fk%!
16!Xs
[c$!0
qs&4
<`Kc$!8
|c$!8
<eVc$!
YR&!
<O~c$!
c4!x
Cc$!(
c$!p
~c$!h
c4!`
c4!(
c4!p
<vTB$
<#0F
R&!  
Usage: mtd [<options> ...] <command> [<arguments> ...] <device>[:<device>...]
The device is in the format of mtdX (eg: mtd4) or its label.
mtd recognizes these commands:
        unlock                  unlock the device
        refresh                 refresh mtd partition
        erase                   erase all data on device
        verify <imagefile>|-    verify <imagefile> (use - for stdin) to device
        write <imagefile>|-     write <imagefile> (use - for stdin) to device
        jffs2write <file>       append <file> to the jffs2 partition on the device
        fixtrx                  fix the checksum in a trx header on first boot
        fixseama                fix the checksum in a seama header on first boot
Following options are available:
        -q                      quiet mode (once: no [w] on writing,
                                           twice: no status messages)
        -n                      write without first erasing the blocks
        -r                      reboot after successful command
        -f                      force write without trx checks
        -e <device>             erase <device> before executing the command
        -d <name>               directory for jffs2write, defaults to "tmp"
        -j <name>               integrate <file> into jffs2 data when writing an image
        -s <number>             skip the first n bytes when appending data to the jffs2 partiton, defaults to "0"
        -p                      write beginning at partition offset
        -o offset               offset of the image header in the partition(for fixtrx)
Example: To write linux.trx to mtd4 labeled as linux and reboot afterwards
         mtd -r write linux.trx linux
Writing from %s to %s ... 
 [ ]
block
"%s"
/proc/mtd
mtd%d:
/dev/mtd%s/%d
/dev/mtd%s%d
Could not open mtd device: %s
Could not get MTD device info from %s
Verifying %s against %s ...
Failed to hash %s
%08x%08x%08x%08x - %s
Success
Failed
Unlocking %s ...
Failed to get erase block status
Erasing %s ...
Skipping bad block at 0x%x   
Failed to erase block on %s at 0x%x
-s: illegal numeric string
-p: illegal numeric string
-o: is not available on this platform
-o: illegal numeric string
frnqe:d:s:j:p:o:
unlock
erase
fixtrx
fixseama
verify
write
<stdin>
Couldn't open image file: %s!
Can't open device for writing!
Image check failed.
jffs2write
Seeking on mtd device '%s' to: %zu
read
Appending jffs2 data from %s to %s...
Skipping bad block at 0x%08x   
Failed to erase block
Error writing image.
Insufficient space.
    
Rebooting ...
/sbin/reboot
File %s does not exist
Appending %s to jffs2 partition %s
Out of memory!
Error: wrong endianness filesystem
Error: No room for additional data
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
