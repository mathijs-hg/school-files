libc.so.0
_GLOBAL_OFFSET_TABLE_
_gp_disp
printf
getethertypebynumber
ebt_mask_to_dotted
ebt_print_mac_and_mask
putchar
__ebt_print_error
ebt_check_option
ebt_errormsg
optarg
_ebt_check_inverse
strtol
strcasecmp
ebt_get_mac_and_mask
ebt_invert
optind
getethertypebyname
ebt_parse_ip_address
puts
memcmp
_init
ebt_register_match
_ftext
_fdata
_edata
__bss_start
_fbss
_end
 c$!
--arp-op 
--arp-htype 
--arp-ptype 
0x%x 
--arp-ip-src 
%d%s
--arp-ip-dst 
--arp-mac-src 
--arp-mac-dst 
--arp-gratuitous 
For (R)ARP filtering the protocol must be specified as ARP or RARP
Option without (mandatory) argument
Request
Reply
Request_Reverse
Reply_Reverse
DRARP_Request
DRARP_Reply
DRARP_Error
InARP_Request
ARP_NAK
Problem with specified ARP opcode
Ethernet
Problem with specified ARP hardware type
Problem with specified ARP protocol type
Problem with ARP MAC address argument
arp options:
--arp-opcode  [!] opcode        : ARP opcode (integer or string)
--arp-htype   [!] type          : ARP hardware type (integer or string)
--arp-ptype   [!] type          : ARP protocol type (hexadecimal or string)
--arp-ip-src  [!] address[/mask]: ARP IP source specification
--arp-ip-dst  [!] address[/mask]: ARP IP target specification
--arp-mac-src [!] address[/mask]: ARP MAC source specification
--arp-mac-dst [!] address[/mask]: ARP MAC target specification
[!] --arp-gratuitous            : ARP gratuitous packet
 opcode strings: 
 %d = %s
 hardware type string: 1 = Ethernet
 protocol type string: see /etc/ethertypes
arp-opcode
arp-op
arp-htype
arp-ptype
arp-ip-src
arp-ip-dst
arp-mac-src
arp-mac-dst
arp-gratuitous
