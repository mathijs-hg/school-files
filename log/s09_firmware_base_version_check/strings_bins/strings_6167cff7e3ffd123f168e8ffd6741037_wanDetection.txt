/lib/ld-uClibc.so.0
_fini
__uClibc_main
__deregister_frame_info
__register_frame_info
_Jv_RegisterClasses
libubus.so
_DYNAMIC_LINKING
__RLD_MAP
_GLOBAL_OFFSET_TABLE_
libubox.so
libblobmsg_json.so
libuci.so
libjson-c.so.2
libpthread.so.0
libeth_encap.so
read
sscanf
ulog
stderr
fprintf
strlen
strncmp
strncpy
json_object_from_file
json_object_object_get
json_object_get_type
json_object_get_boolean
json_object_get_string
json_object_put
ulog_open
ulog_threshold
__errno_location
exit
uci_get_config
uci_get_force_status
handle_mode_test1
handle_mode_test2
clear_dialed_flag
move_all_interfaces_lan
stdout
has_neigh_packets
init_dial_handler
need_force
update_dial_status
update_port_status
freopen
puts
optarg
getopt
wandetect_get_profile_eths
wan_detect_ubus_main_loop
memset
memcpy
__bswapsi2
blobmsg_parse
blobmsg_parse_array
strcmp
ubus_connect
ubus_lookup_id
blob_buf_init
ubus_invoke
ubus_free
blobmsg_add_field
tmpDialState_v6
tmpWanProtocol
tmpWanDefaultGw
tmpDialState
g_log_level
g_log_ident
uci_get_wan_type
uci_alloc_context
uci_lookup_ptr
uci_perror
uci_free_context
uci_set_savedir
snprintf
strcpy
uloop_timeout_set
memcmp
blobmsg_format_json_with_cb
json_tokener_parse
uloop_init
uloop_fd_add
ubus_add_object
ubus_strerror
uloop_run
uloop_done
wan_detect_handle_timeout
pConfig
check_if_existance
socket
sleep
system
inet_addr
ioctl
move_all_interfaces_wan
forced_wan
update_bridge_port
ubus_get_internet_status
get_connect_status
ubus_get_internet_v6_status
uci_get_wan_name
has_wan_device
notify_bridge_prepare
check_lan_bridge
update_bridge_port_static
clear_internal_dial_flag
ubus_get_server_probe
move_portx_force_wan
vsprintf
fgets
strcat
uci_get_profile_eths
popen
pclose
is_interface_wan_device
call_hotplug_bridge
move_interface_lan_bridge
access
move_interface_wan_bridge
set_interface_private_wan_flag
uci_interface_has_neigh
get_ethx_port_id
fork
waitpid
pthread_mutex_lock
pthread_mutex_unlock
setenv
execvp
libc.so.0
_ftext
_fdata
_edata
__bss_start
_fbss
_end
D&!( 
<!  
|$&!
|&&B
D&!(@
<X~s&@
8~E&
<! @
<! @
<!0@
<! @
$!  
<!8@
<!8@
c$* R
e&! 
<!8@
<!8@
<!8@
/tmp/is_binded
get config error...
%s: ERR: get config error...
wanDetect
apmode
test
test1
test2
/tmp/work_mode
open %s error...
%s: ERR: open %s error...
work_mode
%s: dbg: [%s] mode is %s
Get work_wode error
%s: ERR: Get work_wode error
%s: Failed to redirect stdout/stderr to %s: %s
%s [-l]
	-l 		set log level
	-h 		display this help and exit
is_force:%d, force_port:%d 
%s: ERR: is_force:%d, force_port:%d 
get_current_mode
0.0.0.0
%s: dbg: [%s] missing message
%s: dbg: [%s] target is %s
%s: dbg: [%s] nexthop is %s
%s: dbg: [%s] wan protocol is %s
%s: dbg: [%s] wan default gateway is %s
%s: dbg: [%s] connect state is  %s
/var/run/ubus.sock
Failed to connect to ubus...
%s: ERR: Failed to connect to ubus...
Failed to get wan_type...
%s: ERR: Failed to get wan_type...
pptp
l2tp
network.interface.internet
status
%s: dbg: [%s] Network internet object not found, look up wan object!
network.interface.wan
Failed to look up network wan object...
%s: ERR: Failed to look up network wan object...
network.interface.wanv6
server-probe
force
state
proto
route
target
nexthop
get_network_interface_status
receive_network_status_cb
uci_alloc_context failed...
%s: ERR: uci_alloc_context failed...
wanDetect.@wanDetection[0].is_force
lookup ptr
wanDetect.@wanDetection[0].force_port
wanDetect.@wanDetection[0].mode
network_sync.wan.ifname
/var/state
repacd.repacd.eth_HasNeigh
network_sync.wan.wan_type
the wan  is %s
%s: ERR: the wan  is %s
Failed to connect to ubus
%s: ERR: Failed to connect to ubus
Failed to add object: %s
%s: ERR: Failed to add object: %s
Goto uloop_run
%s: INFO: Goto uloop_run
===== uloop_done === over
%s: ERR: ===== uloop_done === over
force_wan
para is null.
%s: ERR: para is null.
get socket error.
%s: ERR: get socket error.
ioctl error,%d,%s.
%s: ERR: ioctl error,%d,%s.
%02x:%02x:%02x:%02x:%02x:%02x
00:00:00:00:00:00
connected
need force wan port.
%s: ERR: need force wan port.
unexpect force wan is empty
%s: ERR: unexpect force wan is empty
br-wan
/etc/init.d/mcsd restart
get main interface connect error...%d
%s: ERR: get main interface connect error...%d
static
ping -q %s -I %s -c 1 > /dev/null
get if we get a WAN device error...%d
%s: INFO: get if we get a WAN device error...%d
get if we get dial status error...%d
%s: INFO: get if we get dial status error...%d
notify_bridge_prepare()
%s: INFO: notify_bridge_prepare()
%s: dbg: [%s] wanDetect result : ConnectStatus=%d, haveWanDev=%d
%s: dbg: [%s] wanDetect result : ipv4 dial_status=(%s), ipv6 dial_status=(%s)
echo %d > %s
/tmp/wanDetection
unexpect force_port is not valid %d
%s: ERR: unexpect force_port is not valid %d
update_dial_status
echo "%s" > /dev/console 
brctl showmacs br-wan | grep -w %s | awk '{print $1}' | sed 's/ //g'
Failed to get current dns
%s: ERR: Failed to get current dns
get interface %s WAN device flag error...%d
%s: ERR: get interface %s WAN device flag error...%d
%s: dbg: [%s] isWanDev=%d
prepare
update
clear
Enter test1 mode! move all ethX to br-lan.
%s: INFO: Enter test1 mode! move all ethX to br-lan.
/usr/sbin/ssdk_sh
echo create a test VLAN! > /dev/console
ssdk_sh vlan entry flush
ssdk_sh vlan entry create 2
ssdk_sh vlan member add 2 0 tagged
ssdk_sh vlan member add 2 4 untagged
ssdk_sh vlan member add 2 5 untagged
ssdk_sh portVlan defaultCVid set 4 2
ssdk_sh portVlan defaultCVid set 5 2
ssdk_sh fdb portLearn set 0 disable
ssdk_sh fdb entry add `getfirm MAC` 2 forward forward 0 yes no no no no no no no
echo 2 > /proc/sys/net/edma/default_lan_tag
Enter test2 mode!move eth1 eth2 to br-lan, move eth0 to br-wan.
%s: INFO: Enter test2 mode!move eth1 eth2 to br-lan, move eth0 to br-wan.
echo Enter NAT test mode! > /dev/console
move all interface to br-lan 
%s: INFO: move all interface to br-lan 
move all interface to br-wan 
%s: INFO: move all interface to br-wan 
move port %d to br-wan 
%s: INFO: move port %d to br-wan 
move interface %s to br-lan
%s: ERR: move interface %s to br-lan
move interface %s to br-wan
%s: ERR: move interface %s to br-wan
%s: dbg: [%s] move interface %s to br-lan
move interface %s to br-lan
%s: INFO: move interface %s to br-lan
port update : %s
%s: ERR: port update : %s
%s-%d get profile eths failed
%s: ERR: %s-%d get profile eths failed
notify_bridge_prepare
update_bridge_port
wandetect_get_profile_eths
%s: dbg: [%s] %s is a wan bridge port...
%s: dbg: [%s] %s is a lan bridge port...
%s: dbg: [%s] set if %s to wan bridge port	ifr.ifr_iflags is 0x%x
%s: dbg: [%s] set if %s to lan bridge port	ifr.ifr_iflags is 0x%x
socket error
ioctl get error
%s: dbg: [%s] get intf %s priv flags is 0x%x
get bridge that %s belongs to error...%d
%s: ERR: get bridge that %s belongs to error...%d
move %s to br-wan...
%s: INFO: move %s to br-wan...
move_interface wan %s;
%s was already under br-wan!
%s: INFO: %s was already under br-wan!
echo 1 > /sys/class/net/br-wan/brif/%s/isolate_mode;
move %s to br-lan...
%s: INFO: move %s to br-lan...
move_interface other %s;
%s was already under br-lan!
%s: INFO: %s was already under br-lan!
/sys/class/net/%s/carrier
get interface %s priv_flags error...%d
%s: ERR: get interface %s priv_flags error...%d
dslite
%s: dbg: [%s] %s has recieved RA or DHCPV6 advertisement!
%s: dbg: [%s] %s has not recieved RA or DHCPV6 advertisement!
%s: dbg: [%s] %s has recieved PADO or DHCP reply!
%s: dbg: [%s] %s has not recieved PADO or DHCP reply!
%s: dbg: [%s] -----> check IPv6
%s has wan flag but is down.
%s: ERR: %s has wan flag but is down.
ACTION
INTERFACE
DEVICE
/sbin/hotplug-call
bridge
%s: dbg: [%s] set intf %s to WAN device!	ifr.ifr_iflags is 0x%x
%s: dbg: [%s] clear intf %s WAN device flag!	ifr.ifr_iflags is 0x%x
brctl showstp br-wan; brctl showstp br-lan; brctl showstp br-iptv
Failed to get %s's port.
%s: ERR: Failed to get %s's port.
%*s%*[ ](%d)
get_interface_bridge_port
set_interface_bridge_port
get_interface_private_flag
is_interface_wan_device
set_interface_private_wan_flag
none
none
eth0
eth1
