_GLOBAL_OFFSET_TABLE_
_gp_disp
_fini
__cxa_finalize
__deregister_frame_info
__register_frame_info
_Jv_RegisterClasses
init_extensions6
libip6t_DNAT_init
libip6t_LOG_init
libip6t_MASQUERADE_init
libip6t_NETMAP_init
libip6t_REDIRECT_init
libip6t_REJECT_init
libip6t_SNAT_init
libip6t_ah_init
libip6t_eui64_init
libip6t_frag_init
libip6t_hbh_init
libip6t_ipv6header_init
libip6t_mh_init
libip6t_rt_init
xtables_option_parse
get_kernel_version
xt_params
strdup
strchr
atoi
xtables_numeric_to_ip6addr
memcpy
free
putchar
xtables_ip6addr_to_numeric
printf
memcmp
puts
xtables_register_target
xtables_save_string
xtables_strtoui
xtables_param_act
xtables_ip6mask_to_cidr
xtables_service_to_port
strlen
strncasecmp
xtables_register_match
strtoul
__errno_location
getprotobynumber
strtok
getprotobyname
strcmp
inet_pton
inet_ntop
libxtables.so.10
libc.so.0
_ftext
_fdata
_edata
__bss_start
_fbss
_end
yR&#
T$!  
&!(`
$lzc$
hzc$!
gc$!
1&'(
(cB$(
1&0}
8}c$
0}c$!
8}c$
0}c$!
&`jR&pj1&
T$!  
&!(`
59'y
59'K
mc$!
l1&(
(c1&
LBW$!
$! @
E9'X
,cR&
c$!(
&@us&
P9'{
P9'o
$! `
yc$!
$!(`
|Y9'Y
hdd&
hdd&
hdd&!(@
|Y9'
'DNAT: Multiple --to-destination not supported
strdup
Invalid address format
Need TCP, UDP, SCTP or DCCP with port specification
Port `%s' not valid
Invalid port:port syntax - use dash
Port range `%s' funky
Bad IP address "%s"
-%hu
DNAT target options:
 --to-destination [<ipaddr>[-<ipaddr>]][:port[-port]]
				Address to map destination to.
[--random] [--persistent]
 --to-destination 
 --random
 --persistent
 to:
 random
 persistent
libxtables.so.10
DNAT
to-destination
random
persistent
 LOG
 flags %u level %u
 level %s
 tcp-sequence
 tcp-options
 ip-options
 uid
 macdecode
 unknown-flags
 prefix "%s"
 UNKNOWN level %u
 --log-prefix
 --log-level %d
 --log-tcp-sequence
 --log-tcp-options
 --log-ip-options
 --log-uid
 --log-macdecode
LOG target options:
 --log-level level		Level of logging (numeric or see syslog.conf)
 --log-prefix prefix		Prefix log messages with this prefix.
 --log-tcp-sequence		Log TCP sequence numbers.
 --log-tcp-options		Log TCP options.
 --log-ip-options		Log IP options.
 --log-uid			Log UID owning the local socket.
 --log-macdecode		Decode MAC addresses and protocol.
Newlines not allowed in --log-prefix
alert
crit
debug
emerg
info
notice
panic
warning
log-level
log-prefix
log-tcp-sequence
log-tcp-options
log-ip-options
log-uid
log-macdecode
MASQUERADE target options:
 --to-ports <port>[-<port>]
				Port (range) to map to.
 --random
				Randomize source port.
MASQUERADE
--to-ports
 --to-ports %hu
 masq ports: 
to-ports
NETMAP target options:
  --%s address[/mask]
				Network address to map to.
 --%s 
NETMAP
REDIRECT
REDIRECT target options:
 --to-ports <port>[-<port>]
				Port (range) to map to.
 [--random]
 --to-ports 
 redir ports 
unknown reject type "%s"
 --reject-with %s
 reject-with %s
REJECT target options:
--reject-with type              drop input packet and send back
                                a reply packet according to type:
Valid reject types:
    %-25s	%s
    %-25s	alias
REJECT
icmp6-no-route
no-route
ICMPv6 no route
icmp6-adm-prohibited
adm-prohibited
ICMPv6 administratively prohibited
icmp6-addr-unreachable
addr-unreach
ICMPv6 address unreachable
icmp6-port-unreachable
port-unreach
ICMPv6 port unreachable
tcp-reset
TCP RST packet
reject-with
SNAT: Multiple --to-source not supported
SNAT target options:
 --to-source [<ipaddr>[-<ipaddr>]][:port[-port]]
				Address to map source to.
[--random] [--persistent]
 --to-source 
SNAT
to-source
%s --ahspi 
%s --ahlen %u
 --ahres
 ah 
%s:%s%u
%ss:%s%u:%u
length
 reserved
 Unknown invflags: 0x%X
ah match options:
[!] --ahspi spi[:spi]          match spi (range)
[!] --ahlen length             total length of this header
 --ahres                       check the reserved field too
ahspi
ahlen
ahres
eui64
%s --fragid 
%s --fraglen %u
 --fragres
 --fragfirst
 --fragmore
 --fraglast
 frag 
:%s%u
s:%s%u:%u
 length:%s%u
 first
 more
 last
frag match options:
[!] --fragid id[:id]           match the id (range)
[!] --fraglen length           total length of this header
 --fragres                     check the reserved field too
 --fragfirst                   matches on the first fragment
 [--fragmore|--fraglast]       there are more fragments or this
                               is the last one
frag
fragid
fraglen
fragres
fragfirst
fragmore
fraglast
hbh: no valid digits in %s `%s'
%s `%s' specified too big: would overflow
hbh: error parsing %s `%s'
strdup failed
too many ports specified
PAD0 has not got length
too many addresses specified
hbh match options:
[!] --hbh-len length            total length of this header
  --hbh-opts TYPE[:LEN][,TYPE[:LEN]...] 
                                Options and its length (list, max: %d)
%s --hbh-len %u
 --hbh-opts
 hbh
 opts
hbh-len
hbh-opts
NONE
ipv6header match options:
[!] --header headers     Type of header to match, by name
                         names: hop,dst,route,frag,auth,esp,none,proto
                    long names: hop-by-hop,ipv6-opts,ipv6-route,
                                ipv6-frag,ah,esp,ipv6-nonxt,protocol
                       numbers: 0,60,43,44,51,50,59
--soft                    The header CONTAINS the specified extensions
unknown header `%s' specified
unknown header `%d' specified
ip6t_ipv6header: cannot parse header names
%s --header 
 --soft
 ipv6header
 flags:%s
0x%02X
 soft
ipv6header
hop-by-hop
protocol
route
auth
none
prot
soft
<@+ ,
mh match options:
[!] --mh-type type[:type]	match mh type
Valid MH types:
 (%s)
Invalid MH type `%s'
Invalid MH type range (min > max)
 --mh-type %u:%u
 --mh-type %u
binding-refresh-request
home-test-init
hoti
careof-test-init
coti
home-test
careof-test
binding-update
binding-acknowledgement
binding-error
mh-type
`--rt-type 0' required before `--rt-0-res'
`--rt-type 0' required before `--rt-0-addrs'
bad address: %s
`--rt-0-addr ...' required before `--rt-0-not-strict'
rt match options:
[!] --rt-type type             match the type
[!] --rt-segsleft num[:num]    match the Segments Left field (range)
[!] --rt-len length            total length of this header
 --rt-0-res                    check the reserved field too (type 0)
 --rt-0-addrs ADDR[,ADDR...]   Type=0 addresses (list, max: %d)
 --rt-0-not-strict             List of Type=0 addresses not a strict list
%c%s
%s --rt-type %u
%s --rt-segsleft 
%s --rt-len %u
 --rt-0-res
 --rt-0-addrs
 --rt-0-not-strict
 type:%s%d
segsleft
s:%s
 0-addrs
 0-not-strict
rt-type
rt-segsleft
rt-len
rt-0-res
rt-0-addrs
rt-0-not-strict
