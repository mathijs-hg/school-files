
-----------------------------------------------------------------

[[0;33m*[0m] Emulating binary name: [0;33mstunnel[0m
[[0;33m*[0m] Emulator used: [0;33mqemu-mips-static[0m
[[0;33m*[0m] Using root directory: [0;33m/logs/s115_usermode_emulator/firmware/unblob_extracted/firmware_extract/1446946-7513122.squashfs_v4_le_extract[0m ([0;33m1/1[0m)
[[0;33m*[0m] Using CPU config: [0;33mNONE[0m
[[0;33m*[0m] Emulating binary: [0;33m/bin/stunnel[0m

[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33mNONE[0m
[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file NONE
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33m-v[0m
[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file -v
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33m-V[0m
[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file -V
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33m-h[0m
[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file -h
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33m-help[0m
stunnel 5.21 on mips-unknown-linux-gnu platform
Compiled/running with OpenSSL 1.0.1t  3 May 2016
Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
 
Global options:
chroot                 = directory to chroot stunnel process
compression            = compression type
debug                  = [facility].level (e.g. daemon.info)
EGD                    = path to Entropy Gathering Daemon socket
engine                 = auto|engine_id
engineCtrl             = cmd[:arg]
engineDefault          = TASK_LIST
fips                   = yes|no FIPS 140-2 mode
foreground             = yes|no foreground mode (don't fork, log to stderr)
log                    = append|overwrite log file
output                 = file to append log messages
pid                    = pid file
RNDbytes               = bytes to read from random seed files
RNDfile                = path to file with random seed data
RNDoverwrite           = yes|no overwrite seed datafiles with new random data
service                = service name
setgid                 = groupname for setgid()
setuid                 = username for setuid()
socket                 = a|l|r:option=value[:value]
                         set an option on accept/local/remote socket
syslog                 = yes|no send logging messages to syslog
 
Service-level options:
accept                 = [host:]port accept connections on specified host:port
CApath                 = CA certificate directory for 'verify' option
CAfile                 = CA certificate file for 'verify' option
cert                   = certificate chain
ciphers                = list of permitted SSL ciphers
client                 = yes|no client mode (remote service uses SSL)
connect                = [host:]port to connect
CRLpath                = CRL directory
CRLfile                = CRL file
curve                  = ECDH curve name
debug                  = level (e.g. info)
delay                  = yes|no delay DNS lookup for 'connect' option
engineId               = ID of engine to read the key from
engineNum              = number of engine to read the key from
exec                   = file execute local inetd-type program
execArgs               = arguments for 'exec' (including $0)
failover               = rr|prio failover strategy
ident                  = username for IDENT (RFC 1413) checking
key                    = certificate private key
local                  = IP address to be used as source for remote connections
logId                  = connection identifier type
ocsp                   = OCSP server URL
OCSPaia                = yes|no check the AIA responders from certificates
OCSPflag               = OCSP server flags
options                = SSL option
                         set an SSL option
protocol               = protocol to negotiate before SSL initialization
                         currently supported: cifs, connect, imap,
                             nntp, pgsql, pop3, proxy, smtp
protocolAuthentication = authentication type for protocol negotiations
protocolHost           = host:port for protocol negotiations
protocolPassword       = password for protocol negotiations
protocolUsername       = username for protocol negotiations
PSKidentity            = identity for PSK authentication
PSKsecrets             = secrets for PSK authentication
pty                    = yes|no allocate pseudo terminal for 'exec' option
redirect               = [host:]port to redirect on authentication failures
renegotiation          = yes|no support renegotiation
retry                  = yes|no send TCP RST on error
retry                  = yes|no retry connect+exec section
sessionCacheSize       = session cache size
sessionCacheTimeout    = session cache timeout (in seconds)
sessiond               = [host:]port use sessiond at host:port
sni                    = master_service:host_name for an SNI virtual service
sslVersion             = all|SSLv2|SSLv3|TLSv1|TLSv1.1|TLSv1.2 SSL method
TIMEOUTbusy            = seconds to wait for expected data
TIMEOUTclose           = seconds to wait for close_notify
TIMEOUTconnect         = seconds to connect remote host
TIMEOUTidle            = seconds to keep an idle connection
transparent            = none|source|destination|both transparent proxy mode
verify                 = level of peer certificate verification
                         level 0 - request and ignore peer cert
                         level 1 - only validate peer cert if present
                         level 2 - always require a valid peer cert
                         level 3 - verify peer with locally installed cert
                         level 4 - ignore CA chain and only verify peer cert
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33m--help[0m
[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file --help
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33m--version[0m
[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file --version
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options
[[0;33m*[0m] Emulating binary [0;33m./bin/stunnel[0m with parameter [0;33mversion[0m

-----------------------------------------------------------------

[.] stunnel 5.21 on mips-unknown-linux-gnu platform
[.] Compiled/running with OpenSSL 1.0.1t  3 May 2016
[.] Threading:FORK Sockets:POLL,IPv6 TLS:ENGINE,FIPS,OCSP,PSK,SNI
[ ] errno: (*__errno_location ())
[.] Reading configuration from file version
[!] Cannot open configuration file
[.]  
[.] Syntax:
[.] stunnel [<filename>] ] -fd <n> | -help | -version | -sockets
[.]     <filename>  - use specified config file
[.]     -fd <n>     - read the config file from a file descriptor
[.]     -help       - get config file help
[.]     -version    - display version and defaults
[.]     -sockets    - display default socket options


For reproducing the EMBA user-mode emulation mechanism, the following commands could be used as starting point:

 - Start EMBA docker container with the firmware directory as log directory:
      # [0;33mEMBA="." FIRMWARE="/home/kali/Downloads/DCS-935L_A1_FW_1.09.02_20160713_r3952.bin" LOG="/absolute/path/to/EMBA/log/directory" docker-compose run emba[0m

 - Change your working directory to the root directory of your firmware:
      # [0;33mcd /logs/s115_usermode_emulator/firmware/unblob_extracted/firmware_extract/1446946-7513122.squashfs_v4_le_extract[0m

 - Copy the static compiled user-mode emulator to your current working directory
      # [0;33mcp $(which qemu-mips-static) .[0m

 - Start the emulation with the following command: 
      # [0;33mjchroot  . -- ./qemu-mips-static ./bin/stunnel <parameters like -v or --help>[0m

[0;33mWARNING: EMBA is doing some more magic in the background. Probably it is not that easy, but give it a try.[0m
