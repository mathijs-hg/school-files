fw_upgrade;FUN_00400a6c_00400a6c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;memset(auStack_123,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;18;signal(2,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;19;signal(0xf,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
fw_upgrade;FUN_00400a6c_00400a6c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;sprintf(&local_124,"/var/reboot -d %d 2>/dev/null 1>/dev/null&",param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;20;signal(3,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
fw_upgrade;FUN_00400a6c_00400a6c.c;external.semgrep-rules-0xdea.c.raptor-command-injection;19;system(&local_124);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;21;signal(0xb,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
fw_upgrade;FUN_00400a6c_00400a6c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;system(&local_124);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;22;signal(0x10,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;23;signal(0x11,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
netmgr;FUN_004018a4_004018a4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;__fd = open("/dev/hwmon",2,param_3,param_4,&_gp);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;IPReset_00401de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;5;system("/etc/init.d/ipv4 restart");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;62;_Var4 = fork();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;LEDcontrol_00401e18.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;7;sprintf(acStack_108,"%s %s","/etc/init.d/led.sh",param_1,&_gp);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;24;signal(0xd,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
netmgr;FUN_00401ed0_00401ed0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;system("msger hwmon 0 datatransfer 0 1 0 0 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;MsgManager_00401f34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;system("msger netmgr 0 wifi.adhoc 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;wiredOff_004029a0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;system("msger netmgr 0 wifi.adhoc 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;71;signal(2,FUN_00401854);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
netmgr;LEDcontrol_00401e18.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;sprintf(acStack_108,"%s %s","/etc/init.d/led.sh",param_1,&_gp);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;25;signal(0x12,(__sighandler_t)&LAB_00400a08);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
netmgr;DaulBandSiteScan_00402f90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;__src = (char *)malloc(0x5554);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;MsgManager_00401f34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;70;system("/usr/sbin/userconfig -write WIRELESS Mode 0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;setWlanDrv_004030a4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;48;sVar2 = strlen((char *)((int)param_1 + param_1[0x11] * 0x41 + 0x48));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;72;signal(0xf,FUN_00401854);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
netmgr;LEDcontrol_00401e18.c;external.semgrep-rules-0xdea.c.raptor-command-injection;8;system(acStack_108);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;39;iVar1 = stat(*(char **)(param_2 + 4),&sStack_c0);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;system("iwpriv wlan0 set_mib antdiv_select=0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;DaulBandSiteScan_00402f90.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;__src = (char *)malloc(0x5554);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
netmgr;MsgManager_00401f34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;95;system("/usr/sbin/userconfig -write WIRELESS Mode 0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;UpdateWPSStatus_00403d90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;system("msger camsvr 0 csmodlazy 0 0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;LEDcontrol_00401e18.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;system(acStack_108);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;73;signal(3,FUN_00401854);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;iVar1 = stat(*(char **)(param_2 + 4),&sStack_c0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;startWPS_00404070.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;system("rm -rf /tmp/wscd_status");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;55;system("/usr/sbin/userconfig -write DHCPD Enable 1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;DaulBandSiteScan_00402f90.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;memset(__src,0,0x5554);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
netmgr;MsgManager_00401f34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;141;system("/usr/sbin/userconfig -write WIRELESS Mode 1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;UpdateWPSStatus_00403d90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;system("msger camsvr 0 csmodlazy 0 0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;iVar1 = open("/var/run/netmgr.pid",0x501,0x284);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;59;system("iwpriv wlan0 set_mib antdiv_select=2");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;48;__stream = fopen(*(char **)(param_2 + 4),"r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;DaulBandSiteScan_00402f90.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;21;strcpy((char *)(iVar1 + 8),__src);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
netmgr;UpdateWPSStatus_00403d90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;system("/usr/sbin/userconfig -write WIRELESS Mode 1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;84;sprintf((char *)&local_20,"%d",_Var4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;system("/usr/sbin/userconfig -write DHCPD Enable 0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;58;system("/etc/init.d/stop_daemon_when_fwup.sh 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;DaulBandSiteScan_00402f90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;strcpy((char *)(iVar1 + 8),__src);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;91;signal(0xe,FUN_00401700);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;86;system("ifconfig br0 192.168.0.20 netmask 255.255.255.0 up");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;62;__ptr = malloc(sStack_c0.st_blocks);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;main_0040195c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;99;unlink("/var/run/netmgr.pid");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;87;system("route add default gw 192.168.0.1 metric 10");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;75;sVar2 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
netmgr;APMode_00403550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;103;system("/usr/sbin/userconfig -write DHCPD Enable 1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;79;sVar2 = fread(__ptr_00,1,__n,__stream);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;79;sVar2 = fread(__ptr_00,1,__n,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;79;sVar2 = fread(__ptr_00,1,__n,__stream);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-incorrect-unsigned-comparison;81;if ((int)sVar2 < 0) {;Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;103;system("/usr/sbin/twinkling 2>/dev/null 1>/dev/null&");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
fw_upgrade;main_00400bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;106;system("/usr/sbin/userconfig -backup /mnt/flash/config/restore.ini 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401174_00401174.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;iVar1 = open(param_2,1,0,param_4,puVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-scanf-etc;24;sscanf(__s1,"auth-%s.pid",param_1 + DAT_00418314 * 0x18 + 8);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;27;memset(acStack_6c,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401f94_00401f94.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;iVar1 = sockets_open();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;75;memset(acStack_7bc,0,0x79c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;pFVar6 = fopen("/var/run/iwcontrol.pid","r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;iVar2 = sockets_open();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;36;sprintf(acStack_6c,"Receive Event %s",pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;sscanf(__s1,"auth-%s.pid",param_1 + DAT_00418314 * 0x18 + 8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;fgets(acStack_6c,0x14,pFVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;iw_message_004058fc.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;10;vsnprintf(&DAT_00418d20,0x1ff,param_2,&local_res8);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;strncpy((char *)apcStack_a0,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;sprintf(acStack_6c,"Receive Event %s",pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;24;sscanf(__s1,"auth-%s.pid",param_1 + DAT_00418314 * 0x18 + 8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;check_addr_type_00405b60.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;strncpy(acStack_30,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00405c6c_00405c6c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;strncpy(acStack_30,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;76;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;iw_message_004058fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;vsnprintf(&DAT_00418d20,0x1ff,param_2,&local_res8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;iVar7 = sscanf(acStack_6c,"%d",&local_70);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;27;cVar2 = param_1[1];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;43;sprintf(acStack_6c,"Receive Event %s",pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;52;strncpy((char *)apcStack_a0,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-scanf-etc;46;sscanf(pdVar3->d_name,"autoconf-%s.pid",param_2 + DAT_0041831c * 0x18 + 8);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;check_addr_type_00405b60.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;10;strncpy(acStack_30,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;52;strcpy(&DAT_00418a6c + DAT_00418310 * 0x14,(char *)puVar15[1]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;76;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;iw_message_004058fc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;10;vsnprintf(&DAT_00418d20,0x1ff,param_2,&local_res8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00405c6c_00405c6c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;strncpy(acStack_30,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;sprintf(acStack_6c,"Receive Event %s",pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;52;strncpy((char *)apcStack_a0,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;sscanf(pdVar3->d_name,"autoconf-%s.pid",param_2 + DAT_0041831c * 0x18 + 8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;check_addr_type_00405b60.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;10;strncpy(acStack_30,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00405e2c_00405e2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;memcpy(param_2 + 2,*phVar3->h_addr_list,phVar3->h_length);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;82;strcpy(acStack_7bc,(char *)&local_8cc);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;strcpy(&DAT_00418a6c + DAT_00418310 * 0x14,(char *)puVar15[1]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00405c6c_00405c6c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;14;strncpy(acStack_30,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;sprintf(acStack_6c,"Receive Invalid or Unhandled Event %d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;91;strncpy((char *)apcStack_a0,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;memcpy(auStack_68,auStack_78,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;46;sscanf(pdVar3->d_name,"autoconf-%s.pid",param_2 + DAT_0041831c * 0x18 + 8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;check_addr_type_00405b60.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;strncpy(acStack_30,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00405e2c_00405e2c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;28;strcpy(param_1,phVar3->h_name);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;82;strcpy(acStack_7bc,(char *)&local_8cc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;iVar7 = open("/var/run/iwcontrol.pid",0x101,0x1a4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;91;strncpy((char *)apcStack_a0,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;60;strcpy((char *)(param_3 + iVar1 + 8),"wlan0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;22;memcpy(auStack_68,auStack_78,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;74;sprintf(acStack_6c,"Receive Event %s",pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;check_addr_type_00405b60.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;strncpy(acStack_30,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00405e2c_00405e2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;strcpy(param_1,phVar3->h_name);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;87;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;pr_ether_004060fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;6;(uint)param_1[2],(uint)param_1[3],(uint)param_1[4],(uint)param_1[5],&_gp);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;86;pFVar6 = fdopen(iVar7,"w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;91;strncpy((char *)apcStack_a0,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;63;strcpy((char *)(param_3 + iVar1 + 8),"wlan1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;strncpy(acStack_34,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;sprintf(acStack_6c,"Receive Event %s",pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00405e2c_00405e2c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;32;strcpy(param_1,pnVar2->n_name);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;check_addr_type_00405b60.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;17;strncpy(acStack_30,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;87;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;101;sprintf(acStack_58,"/var/auth-%s.fifo",&DAT_00418324 + (iVar7 * 3 + 1) * 2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;95;iVar4 = sscanf(pcVar11,"%lX",&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;strncpy(acStack_34,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-scanf-etc;66;sscanf(pdVar3->d_name,"wscd-%s.pid",param_3 + DAT_00418320 * 0x18 + 8);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00405e2c_00405e2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;strcpy(param_1,pnVar2->n_name);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;108;sprintf(acStack_6c,"Receive Event %s",pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;87;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;get_range_info_004065d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;strncpy(acStack_4a8,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;101;sprintf(acStack_58,"/var/auth-%s.fifo",&DAT_00418324 + (iVar7 * 3 + 1) * 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;141;strncpy((char *)apcStack_a0,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;RegisterPID_00406810.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;strncpy((char *)&local_34,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;66;sscanf(pdVar3->d_name,"wscd-%s.pid",param_3 + DAT_00418320 * 0x18 + 8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;25;strncpy(acStack_34,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;108;sprintf(acStack_6c,"Receive Event %s",pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;94;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;get_range_info_004065d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;strncpy(acStack_4a8,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;116;sprintf(acStack_58,"/var/autoconf-%s.fifo",&DAT_00418b34 + (iVar7 * 3 + 1) * 2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;strncpy((char *)&local_38,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;RegisterPID_00406810.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;22;strncpy((char *)&local_34,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;141;strncpy((char *)apcStack_a0,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00401210_00401210.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;66;sscanf(pdVar3->d_name,"wscd-%s.pid",param_3 + DAT_00418320 * 0x18 + 8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;memcpy(param_4,local_58,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;167;sprintf(acStack_6c,"Receive Event %s",pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;94;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;get_range_info_004065d0.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;14;strncpy(acStack_4a8,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;116;sprintf(acStack_58,"/var/autoconf-%s.fifo",&DAT_00418b34 + (iVar7 * 3 + 1) * 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;strncpy((char *)&local_38,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;RegisterPID_00406810.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;22;strncpy((char *)&local_34,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;in_addr_00405f4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memcpy(param_4,local_58,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;141;strncpy((char *)apcStack_a0,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;94;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;167;sprintf(acStack_6c,"Receive Event %s",pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;get_range_info_004065d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;memcpy(param_3,local_488,0x238);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;125;sprintf(acStack_58,"/var/wscd-%s.fifo",&DAT_00418c24 + (iVar7 * 3 + 1) * 2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;20;strncpy((char *)&local_38,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;150;sVar7 = strlen(pcVar11 + 2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;101;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;175;sprintf(acStack_6c,"Receive Event %s",pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;get_range_info_004065d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memcpy(param_3,local_488,0x238);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;125;sprintf(acStack_58,"/var/wscd-%s.fifo",&DAT_00418c24 + (iVar7 * 3 + 1) * 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;21;__ptr = (undefined *)malloc(0x618);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;101;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;156;strncpy((char *)local_30._4_4_,*local_40 + 2,(uint)local_8c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00401650_00401650.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;175;sprintf(acStack_6c,"Receive Event %s",pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;171;sprintf(local_34,"/dev/wl_chr%d",iVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;__ptr = (undefined *)malloc(0x618);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;101;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;156;strncpy((char *)local_30._4_4_,*local_40 + 2,(uint)local_8c);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;__ptr = (undefined *)malloc(0x618);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;172;DAT_00418d14 = (undefined *)open(local_34,2,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;110;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;164;local_3c = (char *)malloc(sVar7 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;memcpy(param_3,local_28,(uint)local_24);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;188;signal(0x16,FUN_00401f2c);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;110;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;164;local_3c = (char *)malloc(sVar7 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;RequestIndication_004068d8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;33;memcpy(param_3,local_28,(uint)local_24);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;main_00401fe8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;192;signal(0x16,FUN_00401f2c);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;110;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;172;strcpy(local_3c,pcVar11);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;118;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;172;strcpy(local_3c,pcVar11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;118;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;174;pcVar11 = strtok(local_3c,"-:.,");;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;118;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;177;iVar6 = sscanf(pcVar11,"%2X",local_38);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;122;memcpy(auStack_6e8,&local_8cc,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;186;pcVar12 = strtok((char *)0x0,"-:.,");;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;122;memcpy(auStack_6e8,&local_8cc,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;200;iVar3 = sscanf(*(char **)(param_2 + iVar4 * 4),"[%d]",&local_a8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;124;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;285;strncpy((char *)apcStack_a0,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;124;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;285;strncpy((char *)apcStack_a0,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;124;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;285;strncpy((char *)apcStack_a0,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;131;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;297;strcpy((char *)local_80,pcVar11);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;131;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;297;strcpy((char *)local_80,pcVar11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;131;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;299;iVar6 = sscanf(*(char **)(param_2 + iVar3 * 4),"[%d]",&local_a8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;138;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;403;strncpy((char *)apcStack_a0,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;138;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;403;strncpy((char *)apcStack_a0,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;138;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;403;strncpy((char *)apcStack_a0,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;145;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;410;iVar6 = sscanf((char *)local_30._4_4_,"%lg",&local_a8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;145;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;493;strncpy((char *)local_30._4_4_,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;145;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;493;strncpy((char *)local_30._4_4_,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;152;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;493;strncpy((char *)local_30._4_4_,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;152;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;497;iVar4 = sscanf((char *)local_40,"%ld",&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;152;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;544;strncpy((char *)local_30._4_4_,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;160;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;544;strncpy((char *)local_30._4_4_,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;160;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;544;strncpy((char *)local_30._4_4_,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;160;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;548;iVar4 = sscanf((char *)local_40,"%ld",&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;168;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;572;iVar4 = sscanf(*local_40,"%d",&local_a8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;168;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;625;strncpy((char *)apcStack_a0,pcVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;168;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;625;strncpy((char *)apcStack_a0,pcVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;175;strncpy(acStack_8dc,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;pFVar2 = fopen("/mnt/flash/device/dev_unique.ini","r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;625;strncpy((char *)apcStack_a0,pcVar10,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;175;strncpy(acStack_8dc,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;system("mkdir -p /mnt/flash/device/ 2 > /dev/null 1 > /dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;668;iVar3 = sscanf(*ppcVar13,"%lg",&local_a8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;175;strncpy(acStack_8dc,param_2,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;pFVar2 = fopen("/mnt/flash/device/dev_unique.ini","w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00403bb8_00403bb8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;743;iVar4 = sscanf(*(char **)(param_2 + (iVar3 + 1) * 4),"%d",&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;182;__stream = fopen("/proc/net/wireless","r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;36;tStack_38.tv_usec << 0xc);The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;185;pcVar5 = fgets(local_8bc,0xff,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;tStack_38.tv_usec << 0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;197;iVar1 = strncmp(pcVar5,param_2,__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;39;iVar4 = rand();The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;200;pcVar4 = strtok(pcVar4 + 1," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeDevUid;main_00400930.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;iVar4 = rand();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;201;sscanf(pcVar4,"%X",&local_8e0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;201;sscanf(pcVar4,"%X",&local_8e0);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;203;pcVar4 = strtok((char *)0x0," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;208;sscanf(pcVar4,"%d",&local_8e0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;208;sscanf(pcVar4,"%d",&local_8e0);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;210;pcVar4 = strtok((char *)0x0," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;215;sscanf(pcVar4,"%d",&local_8e0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;215;sscanf(pcVar4,"%d",&local_8e0);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;217;pcVar4 = strtok((char *)0x0," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;222;sscanf(pcVar4,"%d",&local_8e0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;222;sscanf(pcVar4,"%d",&local_8e0);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;224;pcVar4 = strtok((char *)0x0," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;225;sscanf(pcVar4,"%d",&local_278);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;225;sscanf(pcVar4,"%d",&local_278);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;226;pcVar4 = strtok((char *)0x0," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;227;sscanf(pcVar4,"%d",local_274);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;227;sscanf(pcVar4,"%d",local_274);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;228;pcVar4 = strtok((char *)0x0," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;229;sscanf(pcVar4,"%d",local_268);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
iwcontrol;FUN_00402978_00402978.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;229;sscanf(pcVar4,"%d",local_268);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
hnap_push_service;random_hash_004024f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;strncpy(param_1,__src,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;21;signal(2,FUN_00401ae0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
hnap_push_service;ixmlGetElementValueByTag_s_00402ab4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;snprintf(param_3,param_4,"%s",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;random_hash_004024f0.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;12;strncpy(param_1,__src,param_2);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;22;signal(0xf,FUN_00401ae0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
hnap_push_service;FUN_00402e94_00402e94.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memset(auStack_2f,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;58;memset(auStack_287,0,0x1ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00404d40_00404d40.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;iVar1 = sprintf((char *)(param_2 + iVar2),"%c%02X",0x25,iVar1,puVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;memset(auStack_16f,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;random_hash_004024f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;iVar2 = (int)param_2 / 2;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;59;sprintf((char *)&local_80,local_48,*param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;23;signal(3,FUN_00401ae0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
hnap_push_service;FUN_004058a8_004058a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;sprintf((char *)&local_48,"%d",*param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00402e94_00402e94.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset((void *)((int)&local_50 + 1),0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;67;memset(aiStack_55888,0,0x55600);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;27;memset(auStack_14f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;89;memset(auStack_567,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;random_hash_004024f0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;17;iVar1 = rand();The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;59;sprintf((char *)&local_80,local_48,*param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;24;signal(0xd,(__sighandler_t)0x1);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
hnap_push_service;FUN_004058a8_004058a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;sprintf((char *)&local_48,"%d",puVar5[0x21]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;77;memset(aiStack_55888,0,0x55600);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00402e94_00402e94.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;local_50 >> 8 & 0xff,local_50 & 0xff,local_4c >> 0x18,local_4c >> 0x10 & 0xff,puVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;memset(acStack_a0,0,0x81);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;memset(auStack_267,0,0x1ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;sprintf((char *)&local_48,"%ld",local_50.tv_sec);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;random_hash_004024f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;iVar1 = rand();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;25;signal(0xb,(__sighandler_t)&DAT_004022ac);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;78;sprintf((char *)&local_80,__format,puVar6[0x21]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_004058a8_004058a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;50;sprintf((char *)&local_48,"%d",puVar5[0x33]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;36;strcpy((char *)&local_d8,param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;91;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;107;memset(auStack_587,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;local_178 >> 8 & 0xff,local_178 & 0xff,local_174 >> 0x18,local_174 >> 0x10 & 0xff);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;g_pPushThread = malloc(0x52b16);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;94;memset(auStack_9ef,0,0x1ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;sprintf((char *)&local_80,__format,puVar6[0x21]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_004058a8_004058a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;69;sprintf((char *)&local_48,"%d",puVar5[0x541]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;strcpy((char *)&local_d8,param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;100;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00410640_00410640.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;pcVar1 = getenv("REMOTE_ADDR");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;109;memset((void *)((int)&local_5a8 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;sprintf(&local_150,"%d",param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;98;memset((void *)((int)&local_7e8 + 1),0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;86;sprintf((char *)&local_80,__format,puVar6[0x33]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;main_00401c74.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;38;g_pPushThread = malloc(0x52b16);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004058a8_004058a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;77;sprintf((char *)&local_48,"%d",puVar5[0x553]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;37;strcpy((char *)&local_b4,param_2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;114;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00410864_00410864.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;pcVar1 = getenv("REMOTE_ADDR");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;86;sprintf((char *)&local_80,__format,puVar6[0x33]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;sprintf(&local_150,"%d",param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;111;memset(auStack_467,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;100;memset(auStack_7c7,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004058a8_004058a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;84;sprintf((char *)&local_48,"%d",puVar5[0x565]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;strcpy((char *)&local_b4,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00410ae0_00410ae0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memset(acStack_130,0,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;117;strcpy((char *)(aiStack_55888 + (local_40 * 0x556 + 1) * 2),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00410864_00410864.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;__s = fopen("/mnt/flash/config/hnap_notifier.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;113;sprintf((char *)local_70,local_48,puVar6[0x541]);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;113;memset(auStack_367,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;54;sprintf(&local_150,"%d",param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;108;memset(aiStack_55ff0,0,0x55600);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;39;strcpy(param_3,acStack_a0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00410ae0_00410ae0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;memset(local_b0,0,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;117;strcpy((char *)(aiStack_55888 + (local_40 * 0x556 + 1) * 2),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00404e70_00404e70.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;56;memset(&local_150,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;113;sprintf((char *)local_70,local_48,puVar6[0x541]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;121;local_5ac >> 0x10 & 0xff);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;113;memset(aiStack_55ff0,0,0x55600);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_0040710c_0040710c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;strcpy(param_3,acStack_a0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00410ae0_00410ae0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;33;strcpy(acStack_130,pcVar5);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00411588_00411588.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;16;strcpy(param_2,__src);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;122;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_0041161c_0041161c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memset(auStack_67,0,0x4f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;113;sprintf((char *)local_70,local_48,puVar6[0x541]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;121;local_5ac >> 0x10 & 0xff);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;130;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411860_00411860.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memset(auStack_5cf,0,0x5b3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00410ae0_00410ae0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;strcpy(acStack_130,pcVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;125;strcpy(acStack_5585f + local_40 * 0x2ab0,&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00411588_00411588.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;strcpy(param_2,__src);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411af8_00411af8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;sVar3 = recv(param_1,__buf,1,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;121;sprintf((char *)local_70,local_48,puVar6[0x553]);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;139;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;local_658 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;130;snprintf(local_5c,0x100,local_34,local_64,local_4c,local_54);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411860_00411860.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;32;,param_2,sVar3,param_2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00410ae0_00410ae0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;56;cVar1 = local_b0[uVar9];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;125;strcpy(acStack_5585f + local_40 * 0x2ab0,&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411af8_00411af8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;sVar3 = recv(param_1,__buf,1,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;121;sprintf((char *)local_70,local_48,puVar6[0x553]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;memset(local_b8 + 1,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset(local_5cc + 1,0,0x5b3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;153;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;130;snprintf(local_5c,0x100,local_34,local_64,local_4c,local_54);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411860_00411860.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;,param_2,sVar3,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00410ae0_00410ae0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;67;__s = fopen("/mnt/flash/config/hnap_policy.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;130;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;memset(local_5cc,0,0x5b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;36;strcpy(local_b8,param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;121;sprintf((char *)local_70,local_48,puVar6[0x553]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;156;strcpy((char *)(aiStack_55ff0 + (local_64 * 0x556 + 1) * 2),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;135;sprintf(local_5c,"%08x%08x%08x%08x",local_598,local_594,local_590,local_58c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411860_00411860.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;37;,param_2,param_3,sVar3,param_2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;159;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004126e4_004126e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;strcpy(local_b8,param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;sscanf(acStack_5c4,"%d",&local_65c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;128;sprintf((char *)local_70,local_48,puVar6[0x565]);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;156;strcpy((char *)(aiStack_55ff0 + (local_64 * 0x556 + 1) * 2),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;139;,local_50,local_4c,local_54,local_5c,local_2c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;memset(auStack_148bf,0,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411860_00411860.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;,param_2,param_3,sVar3,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_004126e4_004126e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;system("cp -f /tmp/.hnap_device_list_tmp.xml /tmp/.hnap_device_list.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;162;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar8 * 0x29 + 0x1c),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;44;memset(auStack_4cf,0,0x3ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;FUN_00401cd0_00401cd0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;strncpy(param_1,__src,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;38;sscanf(acStack_5c4,"%d",&local_65c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;79;memset(auStack_87,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;161;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;128;sprintf((char *)local_70,local_48,puVar6[0x565]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;139;,local_50,local_4c,local_54,local_5c,local_2c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;FUN_00402294_00402294.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;snprintf(param_3,param_4,"%s",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411860_00411860.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;52;sVar4 = 0x5b4;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;memset(auStack_148a7,0,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;162;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar8 * 0x29 + 0x1c),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;54;local_5c = fopen(pcVar6,"w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;FUN_00401cd0_00401cd0.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;12;strncpy(param_1,__src,param_2);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;sscanf(pcVar2 + 0x10,"%d",&local_658);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00405228_00405228.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;128;sprintf((char *)local_70,local_48,puVar6[0x565]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;164;strcpy(acStack_55fc7 + local_64 * 0x2ab0,&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;81;memset(auStack_67,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-command-injection;141;system((char *)local_64);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;memset(acStack_14880,0,0x14868);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;60;__s = tmpfile();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;167;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;FUN_00401cd0_00401cd0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;iVar2 = (int)param_2 / 2;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;47;sscanf(pcVar2 + 0x10,"%d",&local_658);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;164;strcpy(acStack_55fc7 + local_64 * 0x2ab0,&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00412afc_00412afc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;11;iVar1 = rand();The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;83;memset(auStack_97,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;NotifierSettingsCheck_00406a78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;141;system((char *)local_64);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;snprintf(acStack_14880,0x23,"%s",&uStack_148c0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00412bd8_00412bd8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;memset(puVar1,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;FUN_00401cd0_00401cd0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;17;iVar1 = rand();The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;pcVar6 = (char *)malloc(0x5554);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;encrypt_00412d44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;memset(puVar1,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;176;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;local_658 = 3;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;169;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00412afc_00412afc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;iVar1 = rand();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;90;strcpy(param_2,&local_68);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00412bd8_00412bd8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;memcpy(local_80 + 0x10,param_1,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;snprintf(acStack_14880,0x23,"%s",&uStack_148c0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;61;pcVar6 = (char *)malloc(0x5554);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;FUN_00401cd0_00401cd0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;iVar1 = rand();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;encrypt_00412d44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;memcpy(local_80 + 0x10,__block,__edflag);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;179;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar8 * 0x29 + 0x22),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;53;__n = local_658;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;198;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00412eb4_00412eb4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;16;local_28 = "0123456789abcdefpMsgInfo->stHeader.uPayloadLen: [%d]
"[*pbVar1 >> 4];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;getTargetIPAndPort_00412140.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;90;strcpy(param_2,&local_68);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;snprintf(acStack_1485c,0x23,"%s",&uStack_148a8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00412f7c_00412f7c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;26;local_1f = param_1[1];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;FUN_00412bd8_00412bd8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;memcpy(puVar1,param_3,param_4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;70;system("iwpriv wlan0 set_mib band2G5GSelected=2");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;63;memset(local_5cc,0,0x5b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;encrypt_00412d44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;memcpy(local_80 + 0x10,__block,__edflag);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;179;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar8 * 0x29 + 0x22),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;201;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar5 * 0x29 + 0x1c),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00412eb4_00412eb4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;17;local_27 = "0123456789abcdefpMsgInfo->stHeader.uPayloadLen: [%d]
"[*pbVar1 & 0xf];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;snprintf(acStack_1485c,0x23,"%s",&uStack_148a8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;AESEncrypt_0041313c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;27;memset(auStack_98,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;73;system("iwpriv wlan0 set_mib band2G5GSelected=1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;75;iVar4 = recv(local_660,local_5cc + iVar1,__n,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;encrypt_00412d44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;memcpy(puVar1,in_a2,in_a3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;184;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;AESDecrypt_0041326c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;memset(auStack_70,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;201;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar5 * 0x29 + 0x1c),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00412eb4_00412eb4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;19;strcat(param_2,&local_28);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;snprintf(__s,0xb,"%s",auStack_14890);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;AESEncrypt_0041313c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;39;memset(auStack_58,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;33;memset(auStack_467,0,0x3ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;system("iwpriv wlan0 set_mib band2G5GSelected=3");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;iVar4 = recv(local_660,local_5cc + iVar1,__n,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;206;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;187;strcpy(acStack_557df + iVar8 * 0xa4 + iVar4,&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_00412eb4_00412eb4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;strcat(param_2,&local_28);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-incorrect-unsigned-comparison;45;if ((int)param_5 < 0) {;Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code.;
hnap_push_service;create_hnap_login_info_00412848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;snprintf(__s,0xb,"%s",auStack_14890);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;__s = tmpfile();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;sendEventMsg_00413d34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;26;memset(auStack_71,0,0x31);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;iVar4 = recv(local_660,local_5cc + iVar1,0x5b4,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-free;80;free(pcVar6);The software calls free() on a pointer to memory that has a short  lifetime and was not allocated using associated heap allocation  functions such as malloc(), calloc(), or realloc().;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;215;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;187;strcpy(acStack_557df + iVar8 * 0xa4 + iVar4,&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;55;memset(auStack_4b,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;initEventMsg_00414014.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;__s = (undefined4 *)malloc(0x10010);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;102;memset(&local_468,0,0x400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;sendEventMsg_00413d34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memset(auStack_3f,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;78;iVar4 = recv(local_660,local_5cc + iVar1,0x5b4,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;95;pcVar6 = fgets(&local_4d0,0x400,__s);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;192;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;218;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar5 * 0x29 + 0x22),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;memcpy(puVar10 + 4,param_3,sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;initEventMsg_00414014.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;__s = (undefined4 *)malloc(0x10010);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;while (sVar2 = fread(&local_468,1,0x3ff,__s), sVar2 != 0) {;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;sendEventMsg_00413d34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;36;sVar1 = strlen((char *)&local_80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_00411cec_00411cec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;80;__n = __n - iVar4;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;97;memset(acStack_d0,0,0x6b);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;201;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;77;sprintf(&local_4c,"%d",param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;218;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar5 * 0x29 + 0x22),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;initEventMsg_00414014.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;memset(__s,0,0x10010);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;103;while (sVar2 = fread(&local_468,1,0x3ff,__s), sVar2 != 0) {;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;sendEventMsg_00413d34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;47;sVar1 = *(ushort *)(param_1 + 0xe) + 0x10;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;98;strncpy(acStack_d0,&local_4d0,4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;84;memcpy(puVar10 + 4,&local_4c,sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;204;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar8 * 0x29 + 0x34),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;223;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;while (sVar2 = fread(&local_468,1,0x3ff,__s), sVar2 != 0) {;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;98;strncpy(acStack_d0,&local_4d0,4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;95;memcpy((undefined *)((int)psVar7 + (ushort)psVar7[1] + 4),param_4,param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;204;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar8 * 0x29 + 0x34),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;226;strcpy(acStack_55f47 + iVar5 * 0xa4 + iVar6,&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;FUN_004133d0_004133d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;105;memset(&local_468,0,0x400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;98;strncpy(acStack_d0,&local_4d0,4);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;112;memcpy(puVar10 + 4,local_90,sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;226;strcpy(acStack_55f47 + iVar5 * 0xa4 + iVar6,&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;235;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;99;strncpy(acStack_cb,acStack_4cc,0x21);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
hnap_push_service;fillEventMessageContent_00413878.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;114;memcpy(puVar10 + 4 + sVar2,param_4,param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;231;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;238;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar9 * 0x2b + 0x53c),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;99;strncpy(acStack_cb,acStack_4cc,0x21);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;240;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;238;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar9 * 0x2b + 0x53c),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;99;strncpy(acStack_cb,acStack_4cc,0x21);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;243;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar5 * 0x29 + 0x34),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;243;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;99;strncpy(acStack_cb,acStack_4cc,0x21);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;252;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;243;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar5 * 0x29 + 0x34),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;100;strncpy(local_a9,acStack_4ab,0x14);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;255;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar9 * 0x2b + 0x542),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;274;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;100;strncpy(local_a9,acStack_4ab,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;255;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar9 * 0x2b + 0x542),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;277;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar4 * 0x2b + 0x53c),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;100;strncpy(local_a9,acStack_4ab,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;260;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;277;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar4 * 0x2b + 0x53c),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;100;strncpy(local_a9,acStack_4ab,0x14);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;263;strcpy(acStack_5435f + iVar9 * 0xac + iVar8,&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;282;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;101;strncpy(acStack_94,acStack_497,0x17);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;263;strcpy(acStack_5435f + iVar9 * 0xac + iVar8,&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;291;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;101;strncpy(acStack_94,acStack_497,0x17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;268;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;294;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar4 * 0x2b + 0x542),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;101;strncpy(acStack_94,acStack_497,0x17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;277;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;294;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar4 * 0x2b + 0x542),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;101;strncpy(acStack_94,acStack_497,0x17);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;280;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar9 * 0x2b + 0x554),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;299;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;102;strncpy(acStack_7c,acStack_480,10);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;280;strcpy((char *)(aiStack_55888 + iVar2 * 0xaac + iVar9 * 0x2b + 0x554),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;302;strcpy(acStack_54ac7 + iVar4 * 0xac + iVar5,&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;102;strncpy(acStack_7c,acStack_480,10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;285;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;302;strcpy(acStack_54ac7 + iVar4 * 0xac + iVar5,&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;102;strncpy(acStack_7c,acStack_480,10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;305;memset(&local_288,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;307;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;102;strncpy(acStack_7c,acStack_480,10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;308;strcpy((char *)(aiStack_55888 + local_40 * 0xaac + 0xa9e),&local_288);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;316;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;103;strncpy(acStack_71,acStack_476,8);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;308;strcpy((char *)(aiStack_55888 + local_40 * 0xaac + 0xa9e),&local_288);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;319;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar4 * 0x2b + 0x554),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;103;strncpy(acStack_71,acStack_476,8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;522;system("/usr/sbin/msger eventd 0 eiotenablesnapshot 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;319;strcpy((char *)(aiStack_55ff0 + iVar3 * 0xaac + iVar4 * 0x2b + 0x554),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;strncpy(acStack_71,acStack_476,8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;526;system("/usr/sbin/msger eventd 0 eiotenablesnapshot 0 0 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;324;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;103;strncpy(acStack_71,acStack_476,8);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;529;system("/usr/sbin/msger eventd 0 eiotenablevideoclip 0 0 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;344;memset(&local_9f0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;104;strncpy(acStack_68,acStack_46e,2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;532;system("/usr/sbin/msger eventd 0 eiotenablevideoclip 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;347;strcpy((char *)(aiStack_55ff0 + local_64 * 0xaac + 0xa9e),&local_9f0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;104;strncpy(acStack_68,acStack_46e,2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;535;system("/usr/sbin/msger eventd 0 eiotenablenotification 0 0 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;347;strcpy((char *)(aiStack_55ff0 + local_64 * 0xaac + 0xa9e),&local_9f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_tool_wifi_sitesurvey;main_0040107c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;104;strncpy(acStack_68,acStack_46e,2);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
hnap_push_service;ReviewPolicyFromFile_00402fa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;538;system("/usr/sbin/msger eventd 0 eiotenablenotification 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;378;local_7e8 >> 8 & 0xff,local_7e8 & 0xff,local_7e4 >> 0x18,local_7e4 >> 0x10 & 0xff);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;430;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;435;,0,local_70,piVar17[-0x12],0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;435;,0,local_70,piVar17[-0x12],0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;436;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;436;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;456;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;461;,1,local_70,piVar17[-0x12],0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;461;,1,local_70,piVar17[-0x12],0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;67;local_34 = fopen(param_1,"rb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;24;strcpy((char *)&uStack_a4,*(char **)(param_2 + 4));A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;FUN_004026cc_004026cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;__n = 0xffffffff;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_CreateCompress_00402f44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset(param_1,0,0x178);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;462;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;FUN_004026cc_004026cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;__n = pfRead(iVar1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;strcpy((char *)&uStack_a4,*(char **)(param_2 + 4));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;81;puVar1 = (uint *)malloc((int)local_48c << 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;462;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00403ca0_00403ca0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;__n = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_004026cc_004026cc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;__s = fopen(param_1,"wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;32;strcat((char *)&uStack_a4,*(char **)(param_2 + 0x10));A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;83;__ptr = (void **)malloc(local_490 << 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;482;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_004042b0_004042b0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;9;sVar1 = fwrite((void *)puVar2[6],1,0x1000,(FILE *)puVar2[5]);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;strcat((char *)&uStack_a4,*(char **)(param_2 + 0x10));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00403ca0_00403ca0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;memcpy(*param_2,param_3,0x11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_004026cc_004026cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;__n = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040433c_0040433c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;10;__n = 0x1000 - *(int *)(iVar2 + 4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;84;pvVar2 = malloc(0x500);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;488;,0,local_70,piVar17[-0x12],0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;ptVar3->tm_mon + 1,ptVar3->tm_mday,ptVar3->tm_hour,ptVar3->tm_min,ptVar3->tm_sec);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00403ca0_00403ca0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;15;memcpy(*param_2,param_3,0x11);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;84;pvVar2 = malloc(0x500);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_004026cc_004026cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;26;__n = __n - 0x44;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040433c_0040433c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;sVar1 = fwrite(*(void **)(iVar2 + 0x18),1,__n,*(FILE **)(iVar2 + 0x14));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;488;,0,local_70,piVar17[-0x12],0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;46;sprintf((char *)&uStack_a4,"rm -f %s","/tmp/mysnapshot.jpg");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;FUN_00403ca0_00403ca0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;__n = __n + *pbVar3;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;84;pvVar2 = malloc(0x500);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;489;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;sprintf((char *)&uStack_a4,"rm -f %s","/tmp/mysnapshot.jpg");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00403ca0_00403ca0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;memcpy((void *)((int)*param_2 + 0x11),param_4,__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;85;piVar3 = (int *)malloc(0x500);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
getpreviewimg;jinit_c_prep_controller_004067a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;68;memcpy(__dest,__src,iVar12 * 0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;489;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-command-injection;47;system((char *)&uStack_a4);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;85;piVar3 = (int *)malloc(0x500);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;main_00402888.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;system((char *)&uStack_a4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;509;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;85;piVar3 = (int *)malloc(0x500);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00409264_00409264.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;memcpy(local_68 + 2,(void *)(iVar6 + 0xc),0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;515;,1,local_70,piVar17[-0x12],0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;87;local_30 = malloc(local_490 * 3 * (int)local_6c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
getpreviewimg;jpeg_make_c_derived_tbl_00409b48.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;memset((void *)(iVar7 + 0x400),0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00409e4c_00409e4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;memset(*(void **)(iVar5 + (uVar9 + 0x12) * 4 + 4),0,0x404);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_gen_optimal_table_0040a0cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;memset(acStack_850,0,0x21);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00409264_00409264.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;memcpy(local_68 + 2,(void *)(iVar6 + 0xc),0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;515;,1,local_70,piVar17[-0x12],0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;87;local_30 = malloc(local_490 * 3 * (int)local_6c);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
getpreviewimg;FUN_00409e4c_00409e4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;56;memset(*(void **)(iVar5 + (uVar6 + 0x16) * 4 + 4),0,0x404);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_gen_optimal_table_0040a0cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memset(local_82c,0,0x404);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00409264_00409264.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;79;memcpy((void *)(iVar6 + 0xc),local_68 + 2,0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;516;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;87;local_30 = malloc(local_490 * 3 * (int)local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0040b4e4_0040b4e4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;87;memset(*(void **)(iVar6 + (uVar9 + 0x16) * 4 + 4),0,0x404);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_gen_optimal_table_0040a0cc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;85;memcpy(param_2,acStack_850,0x11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;516;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00409264_00409264.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;79;memcpy((void *)(iVar6 + 0xc),local_68 + 2,0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;89;local_48 = malloc((int)local_6c * 0x10 + local_3c8 * -0x20);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
getpreviewimg;FUN_0040bc58_0040bc58.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;44;sVar9 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;jpeg_gen_optimal_table_0040a0cc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;85;memcpy(param_2,acStack_850,0x11);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;537;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040bc58_0040bc58.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;45;sVar8 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;89;local_48 = malloc((int)local_6c * 0x10 + local_3c8 * -0x20);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
getpreviewimg;jpeg_CreateDecompress_0040d510.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset(param_1,0,0x1d0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040bc58_0040bc58.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;50;if ((iVar7 <= iVar10) && (sVar9 = (short)(iVar10 / iVar7), iVar7 == 0)) {;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;543;,4,local_70,piVar17[-0x12],0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;89;local_48 = malloc((int)local_6c * 0x10 + local_3c8 * -0x20);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0040ddc8_0040ddc8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;9;sVar1 = fread((void *)puVar2[8],1,0x1000,(FILE *)puVar2[7]);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040bc58_0040bc58.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;55;else if ((iVar7 <= iVar6) && (sVar8 = (short)(iVar6 / iVar7), iVar7 == 0)) {;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;543;,4,local_70,piVar17[-0x12],0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;90;local_50 = (undefined *)malloc(0x38400);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
getpreviewimg;jinit_master_decompress_0040e620.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset(__s,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040ddc8_0040ddc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;9;sVar1 = fread((void *)puVar2[8],1,0x1000,(FILE *)puVar2[7]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0040eb3c_0040eb3c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;101;memcpy(__dest,(void *)param_1[uVar3 + 0x29],0x84);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;544;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;90;local_50 = (undefined *)malloc(0x38400);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0040f678_0040f678.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;19;cVar1 = param_2[5];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;jinit_master_decompress_0040e620.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;36;memset((void *)((int)__s + 0x380),0,0x180);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040ddc8_0040ddc8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;9;sVar1 = fread((void *)puVar2[8],1,0x1000,(FILE *)puVar2[7]);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040eb3c_0040eb3c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;101;memcpy(__dest,(void *)param_1[uVar3 + 0x29],0x84);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;544;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;90;local_50 = (undefined *)malloc(0x38400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_0040f678_0040f678.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;57;cVar1 = param_2[5];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;jinit_master_decompress_0040e620.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;memcpy((void *)((int)__s + 0x500),(void *)param_1[0x51],0x80);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0040ddc8_0040ddc8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;sVar1 = 2;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_004106f8_004106f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;169;memcpy(*ppvVar11,local_2c,0x11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;565;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;141;memset(pvVar2,0,0x500);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jinit_master_decompress_0040e620.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;37;memcpy((void *)((int)__s + 0x500),(void *)param_1[0x51],0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00411bd0_00411bd0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;68;memcpy(local_34,(void *)(iVar9 + 0x14),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_004106f8_004106f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;169;memcpy(*ppvVar11,local_2c,0x11);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_make_d_derived_tbl_00412264.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;125;memset((void *)(iVar12 + 0x90),0,0x400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;571;,4,local_70,piVar17[-0x12],0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;142;memset(piVar3,0,0x500);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00411bd0_00411bd0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;68;memcpy(local_34,(void *)(iVar9 + 0x14),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_004106f8_004106f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;170;memcpy((void *)((int)*ppvVar11 + 0x11),local_13c,0x100);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;571;,4,local_70,piVar17[-0x12],0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;200;memset(pvVar2,local_70,0x500);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00413630_00413630.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;memcpy(auStack_4c,(void *)(iVar8 + 0x14),0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00411bd0_00411bd0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;229;memcpy((void *)(iVar9 + 0x14),auStack_68,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_004106f8_004106f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;170;memcpy((void *)((int)*ppvVar11 + 0x11),local_13c,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;201;memset(piVar3,local_70,0x500);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;572;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;FUN_00413630_00413630.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;memcpy(auStack_4c,(void *)(iVar8 + 0x14),0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00411bd0_00411bd0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;229;memcpy((void *)(iVar9 + 0x14),auStack_68,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00414d64_00414d64.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;194;local_136 = (short)iVar16;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;214;local_5c = fopen(param_2,"wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00413630_00413630.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;99;memcpy((void *)(iVar8 + 0x14),auStack_4c,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;572;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_00414d64_00414d64.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;218;local_128 = (short)iVar16;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;jinit_inverse_dct_00415de4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset(__s,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;FUN_00413630_00413630.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;99;memcpy((void *)(iVar8 + 0x14),auStack_4c,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_idct_float_00416360.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;43;sVar1 = param_3[8];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;268;__n = *(size_t *)((int)local_a4 + iVar6 + 0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;593;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jpeg_idct_4x4_00417380.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;41;sVar1 = param_3[0x38];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;FUN_00414d64_00414d64.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;242;local_118 = (short)iVar16;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;616;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;FUN_00401cb0_00401cb0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;274;memcpy(pvVar2,__src,__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;jpeg_idct_4x4_00417380.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;43;sVar2 = param_3[0x28];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;FUN_00414d64_00414d64.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;266;local_126 = (short)iVar16;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;616;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;jpeg_idct_4x4_00417380.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;46;sVar3 = param_3[0x18];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
getpreviewimg;FUN_00414d64_00414d64.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;290;local_134 = (short)iVar16;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;637;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;655;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
getpreviewimg;jcopy_sample_rows_0041bb6c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;memcpy(__dest,__src,param_6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;655;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0041bd10_0041bd10.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;52;&_gp);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
getpreviewimg;jinit_memory_mgr_0041c504.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;__s = getenv("JPEGMEM");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0041bd10_0041bd10.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;52;&_gp);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;676;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
getpreviewimg;jinit_memory_mgr_0041c504.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;44;iVar2 = sscanf(__s,"%ld%c",local_14,local_18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
getpreviewimg;FUN_0041bd10_0041bd10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;&_gp);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;685;,param_3,0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;685;,param_3,0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;692;,param_3,0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;692;,param_3,0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;695;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;695;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;728;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;737;,param_3,0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;737;,param_3,0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;744;,param_3,0,local_6c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;744;,param_3,0,local_6c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;747;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;747;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;796;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;14;signal(2,FUN_00400b90);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
sysmgr;sysfun_init_00401140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;56;memset(acStack_8b,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;798;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;15;signal(0xf,FUN_00400b90);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
sysmgr;sysfun_init_00401140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;58;memset(auStack_7b,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;800;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;16;signal(3,FUN_00400b90);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
sysmgr;sysfun_init_00401140.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;60;memset(auStack_5b,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;806;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;17;signal(0xd,(__sighandler_t)0x1);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
sysmgr;sysfun_init_00401140.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;67;iVar2 = sscanf(acStack_8b,"%d:%d",&local_98,&local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;806;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;18;signal(0xb,FUN_00400ebc);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
sysmgr;sysfun_init_00401140.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;&local_28,&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;807;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;iVar1 = open("/var/run/sysmgr.pid",0x501,0x284);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
sysmgr;sysfun_init_00401140.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;79;local_14,&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;807;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;sprintf(acStack_24,"%d",_Var3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;814;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
sysmgr;main_00400bec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;48;unlink("/var/run/sysmgr.pid");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;816;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;818;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;824;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;824;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;825;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;825;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;873;memset((undefined *)((int)&local_79c + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;875;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;877;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;883;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;883;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;884;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;884;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;892;);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;894;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;896;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;902;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;902;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;903;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;903;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;952;);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;954;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;956;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;962;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;962;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;963;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;963;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;972;0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;974;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;976;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;982;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;982;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;983;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;983;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1034;0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1036;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1038;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;1044;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;1044;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;1045;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;1045;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1054;0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1056;memset((void *)((int)&local_69c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1058;memset((void *)((int)&local_39c + 1),0,0x2ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;1064;,*piVar17);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;1064;,*piVar17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-command-injection;1065;system(local_94);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;1065;system(local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1105;memset(local_94,0,0x81);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;1113;sprintf((char *)&local_39c,"%ld",local_69c._0_4_);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;1175;memset(&local_79c,0,0x81);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
hnap_push_service;PushDCHEventNotifyCheck_00407210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;1182;sprintf((char *)&local_39c,"%ld",local_69c._0_4_);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_00401120_00401120.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;12;sprintf(acStack_90,"/var/run/ipfind-%s.pid",param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
ipfind;FUN_00400f50_00400f50.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memset(auStack_4f,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_004013f4_004013f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;89;system("/sbin/reboot&");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;38;memset(auStack_357,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_00401df4_00401df4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;44;strncpy(acStack_34,ifname,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_00401120_00401120.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;sprintf(acStack_90,"/var/run/ipfind-%s.pid",param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_00402198_00402198.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;7;sprintf(acStack_88,"/var/run/ipfind-%s.pid",param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
ipfind;main_00402210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;62;strncpy(acStack_8f4,ifname,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;44;memset(auStack_250,0,0x21d);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_00401df4_00401df4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;44;strncpy(acStack_34,ifname,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_00401120_00401120.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;__fd = open(acStack_90,0x501,0x284);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_00402198_00402198.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;sprintf(acStack_88,"/var/run/ipfind-%s.pid",param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;main_00402210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;62;strncpy(acStack_8f4,ifname,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;49;memset(&local_358,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_00401df4_00401df4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;44;strncpy(acStack_34,ifname,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
ipfind;FUN_00401120_00401120.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;sprintf(acStack_90,"%d",_Var3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_00402198_00402198.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;9;unlink(acStack_88);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;main_00402210.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;62;strncpy(acStack_8f4,ifname,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;strncpy(acStack_233,&local_358,0x40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;main_00402210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;109;memset(&uStack_854,0,0x800);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;strncpy(acStack_233,&local_358,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;main_00402210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;110;recvfrom(server_sockfd,&uStack_854,0x800,0,(sockaddr *)client_addr,local_40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;51;strncpy(acStack_233,&local_358,0x40);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;52;memset(&local_358,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;main_00402210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;110;recvfrom(server_sockfd,&uStack_854,0x800,0,(sockaddr *)client_addr,local_40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;56;sprintf(acStack_1c3,"%u.%u.%u",(uint)local_2c,(uint)local_2a,(uint)local_28[0]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;78;memset(&local_358,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;80;strncpy(acStack_1f3,&local_358,0x20);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;80;strncpy(acStack_1f3,&local_358,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;80;strncpy(acStack_1f3,&local_358,0x20);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;81;memset(&local_358,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;83;strncpy(acStack_1d3,&local_358,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;83;strncpy(acStack_1d3,&local_358,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;83;strncpy(acStack_1d3,&local_358,0x10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;84;memset(&local_358,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;86;strncpy((char *)((int)&uStack_1b8 + 3),&local_358,0x40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;86;strncpy((char *)((int)&uStack_1b8 + 3),&local_358,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ipfind;FUN_0040172c_0040172c.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;86;strncpy((char *)((int)&uStack_1b8 + 3),&local_358,0x40);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;snprintf(g_devname,0x100,"/dev/video0");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004051e4_004051e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;54;local_30 = sf_read(g_devname,*(undefined4 *)(param_1 + 0xc),*(undefined2 *)(param_1 + 0x10));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;uvc_open_device_00406138.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;5;uvc_open(param_1,2,param_3,param_4,&_gp);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;snprintf(g_devname,0x100,"/dev/video0");The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;check_erase_result_00406624.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;memset(auStack_118,0,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;uvc_download_fm_0040686c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;local_54 = malloc(param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;uvc_write_to_flash_0040726c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;local_10 = malloc(param_4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004078e4_004078e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;__fd = open(param_1,2,param_3,param_4,puVar1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_00407860_00407860.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;memset(&sStack_a0,0,0x98);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;iVar6 = getopt_long(param_1,param_2,&DAT_004173e0,longopts,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;download_fw_00407b24.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;local_24 = malloc(__size);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;check_erase_result_00406624.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memset(auStack_98,0,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;uvc_download_fm_0040686c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;iVar1 = uvc_spi_sf_read(param_1,local_58,uVar2 & 0xffff,(int)local_54 + local_58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;uvc_write_to_flash_0040726c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;50;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;erase_fw_004083ac.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;iVar1 = uvc_spi_sf_read(__fd,0,0x20,&local_48);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_00407860_00407860.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;8;stat(param_1,&sStack_a0);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;check_erase_result_00406624.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;memset(auStack_98,0xff,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;download_fw_00407b24.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;if ((local_24 != (void *)0x0) && (local_28 = fopen(param_2,"rb"), local_28 != (FILE *)0x0)) {;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;read_mem_00408c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;local_18 = malloc((uint)param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;uvc_download_fm_0040686c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;98;iVar1 = memcmp(param_2,local_54,param_3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;erase_fw_004083ac.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;39;memset(auStack_28,0xff,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_00407860_00407860.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;stat(param_1,&sStack_a0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;check_erase_result_00406624.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;iVar1 = uvc_spi_sf_read(param_1,param_2,0x80,auStack_118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;download_fw_00407b24.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;fread(local_24,1,__size,local_28);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;sf_read_004097a4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;local_18 = malloc((uint)param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;download_fw_00407b24.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;fread(local_24,1,__size,local_28);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_fw_version_00409e2c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;27;memset(auStack_9c,0,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memset(auStack_16c,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;sf_read_004097a4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;local_10 = uvc_spi_sf_read(__fd,param_2,param_3,local_18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;download_fw_00407b24.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;local_18 = uvc_download_fm(local_1c,local_24,__size);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_fw_version_00409e2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;(uint)local_4f,(uint)local_4e,(uint)local_4d);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;22;memset(acStack_12c,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_0040a9ac_0040a9ac.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;8;local_10 = 3;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;33;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;rts_dump_fw_uvc_0040b5ec.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;21;__s = malloc(local_38 * 0x400);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
rscam_uvc;UVC_ReadI2CGeneric_0040b988.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;5;uvc_i2c_normal_read(param_1,param_2,param_3,param_4,&_gp);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_fw_version_00409e2c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;47;(uint)local_4f,(uint)local_4e,(uint)local_4d);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_0040a9ac_0040a9ac.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;10;local_10 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memset(&local_2c,0,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;rts_dump_fw_uvc_0040b5ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;__s = malloc(local_38 * 0x400);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_0040a9ac_0040a9ac.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;14;local_10 = *(short *)(param_1 + local_14 * 0xc + 4) * 3 + local_10 + 3;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;34;iVar2 = access(param_1,0);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
rscam_uvc;get_fw_version_00409e2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;(uint)local_57,(uint)local_56,(uint)local_55);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;33;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;rts_dump_fw_uvc_0040b5ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;memcpy(acStack_2c,"rscam_fw.bin",0xd);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_fw_version_00409e2c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;(uint)local_57,(uint)local_56,(uint)local_55);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;iVar2 = access(param_1,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;34;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;rts_dump_fw_uvc_0040b5ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;27;memcpy(acStack_2c,"rscam_fw.bin",0xd);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;38;memset(auStack_16c,0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;56;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;rts_dump_fw_uvc_0040b5ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;local_48 = fopen(acStack_2c,"wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-scanf-etc;39;sscanf(param_1,"/dev/%s",auStack_16c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
twinkling;main_004008cc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;10;signal(2,FUN_00400880);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;56;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;rts_dump_fw_uvc_0040b5ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;local_34 = uvc_spi_sf_read(__fd,iVar1,0x400,(void *)((int)__s + iVar1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;uvc_open_0040e3c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;__fd = open(param_1,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;sscanf(param_1,"/dev/%s",auStack_16c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
twinkling;main_004008cc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;11;signal(0xf,FUN_00400880);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;56;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;39;sscanf(param_1,"/dev/%s",auStack_16c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;get_xu_id_0040ea00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;memcpy(auStack_3c,&DAT_00418918,0x28);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
twinkling;main_004008cc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;12;signal(3,FUN_00400880);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;57;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;snprintf(acStack_12c,0x100,"/sys/class/video4linux/%s/device/modalias",auStack_16c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_xu_id_0040ea00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;memcpy(auStack_3c,&DAT_00418918,0x28);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;59;snprintf((char *)((int)pvVar2 + 0x18),0x100,"%s",optarg);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
twinkling;main_004008cc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;13;signal(0xd,(__sighandler_t)0x1);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;59;snprintf((char *)((int)pvVar2 + 0x18),0x100,"%s",optarg);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
twinkling;main_004008cc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;14;signal(0xb,FUN_00400ab0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;42;snprintf(acStack_12c,0x100,"/sys/class/video4linux/%s/device/modalias",auStack_16c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;uvc_write_i2c_reg16_0040f87c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;memset(&local_10,0,2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
twinkling;main_004008cc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;DAT_00410cf0 = open("/dev/hwmon",2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;64;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;49;__stream = fopen(acStack_12c,"rb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;64;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;55;fread(&local_2c,1,0x13,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;64;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;55;fread(&local_2c,1,0x13,__stream);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;65;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;57;sscanf((char *)&local_2c,"usb:v%04xp%04xd%04x",&local_18,&local_14,local_10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;81;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;get_device_modalias_0040a134.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;57;sscanf((char *)&local_2c,"usb:v%04xp%04xd%04x",&local_18,&local_14,local_10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;81;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;81;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;82;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;98;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;98;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;98;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;99;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;110;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;110;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;110;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;111;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;124;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;124;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;125;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;add_xu_ctrls_004163e0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;memset(local_58,0,0x44);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_get_status_00416730.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;memset(&local_1c,0,0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_set_cmnd_00416670.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;memset(&local_14,0,0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_set_data_00416848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;11;memset(&local_18,0,0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_get_data_004168fc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;11;memset(&local_18,0,0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;137;pvVar4 = malloc((uint)*(ushort *)((int)pvVar2 + 0x10));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;xu_write_data_004169b0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;31;__n = param_3 & 0x80000007;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_read_data_00416b30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;__n = param_3 & 0x80000007;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_write_data_004169b0.c;external.semgrep-rules-0xdea.c.raptor-incorrect-unsigned-comparison;32;if ((int)__n < 0) {;Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;137;pvVar4 = malloc((uint)*(ushort *)((int)pvVar2 + 0x10));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
rscam_uvc;xu_read_data_00416b30.c;external.semgrep-rules-0xdea.c.raptor-incorrect-unsigned-comparison;36;if ((int)__n < 0) {;Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code.;
rscam_uvc;xu_write_data_004169b0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;33;__n = (__n - 1 | 0xfffffff8) + 1;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;137;pvVar4 = malloc((uint)*(ushort *)((int)pvVar2 + 0x10));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;xu_read_data_00416b30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;37;__n = (__n - 1 | 0xfffffff8) + 1;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;xu_write_data_004169b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;memcpy(&local_14,local_20,__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;157;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;xu_read_data_00416b30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;memcpy(local_20,&local_14,__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;157;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;157;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;158;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;166;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;166;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;166;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;167;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;174;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;174;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;174;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;175;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;181;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;181;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;181;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;182;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;193;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;193;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;193;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;194;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;203;pvVar2 = malloc(0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;203;pvVar2 = malloc(0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;203;pvVar2 = malloc(0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;204;memset(pvVar2,0,0x118);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;234;snprintf(g_devname,0x100,"%s",optarg);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
rscam_uvc;FUN_004040ec_004040ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;234;snprintf(g_devname,0x100,"%s",optarg);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ntpclient;FUN_004010e8_004010e8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;134;sVar6 = recvfrom(param_1,&DAT_00415194,0x514,0,psVar8,&local_150);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;iVar1 = getopt(param_1,param_2,"c:df:g:h:i:lp:q:rst6");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ntpclient;contemplate_data_00402ed0.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;103;*(undefined4 *)(&DAT_004156e4 + iVar18));The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
ntpclient;FUN_004010e8_004010e8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;134;sVar6 = recvfrom(param_1,&DAT_00415194,0x514,0,psVar8,&local_150);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;96;printf(local_60,iVar1);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;139;pcVar9 = fgets((char *)&local_cc,100,stdin);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;146;local_4c,local_48);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-scanf-etc;146;local_4c,local_48);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;146;local_4c,local_48);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;155;printf(local_30,iVar5,local_f0._0_4_,local_f0._4_4_,puVar13,(int)uVar10,local_108);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;171;printf(local_2c);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
ntpclient;main_00401e3c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;242;memcpy(&local_128,*phVar3->h_addr_list,phVar3->h_length);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00401c38_00401c38.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;13;__s = (char *)malloc(sVar2 + 7);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00401be8_00401be8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;8;puVar1 = (undefined4 *)malloc(8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00401e50_00401e50.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;28;__s = (char *)malloc(sVar2 + 7);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00402248_00402248.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;if (((__n <= sVar1) && (iVar2 = memcmp(__s,param_2,__n), iVar2 == 0)) &&;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00401c38_00401c38.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;13;__s = (char *)malloc(sVar2 + 7);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPCreateControlPoint_0040264c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;9;ppcVar1 = (code **)malloc(0x5c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00401be8_00401be8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;puVar1 = (undefined4 *)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00402b64_00402b64.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;iVar3 = strncmp(*(char **)(param_1 + 4),DeviceType,__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00401e50_00401e50.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;28;__s = (char *)malloc(sVar2 + 7);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00402bf8_00402bf8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;iVar1 = strncmp(*(char **)(param_1 + 4),DeviceType,__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00401c38_00401c38.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;__s = (char *)malloc(sVar2 + 7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPCreateControlPoint_0040264c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;9;ppcVar1 = (code **)malloc(0x5c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPGetService_00402cf8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;if ((sVar1 == param_3) && (iVar2 = strncmp(__s,param_2,param_3), iVar2 == 0)) break;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00401be8_00401be8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;puVar1 = (undefined4 *)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00402e04_00402e04.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;19;__dest = (char *)malloc((size_t)(ppcVar4[3] + 1));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00401e50_00401e50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;__s = (char *)malloc(sVar2 + 7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;41;__s = (undefined4 *)malloc(0x5c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00401c38_00401c38.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;14;iVar3 = sprintf(__s,"%s:%d",param_1,param_2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPCreateControlPoint_0040264c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;9;ppcVar1 = (code **)malloc(0x5c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;35;ppvVar5 = (void **)malloc(8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00402e04_00402e04.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;19;__dest = (char *)malloc((size_t)(ppcVar4[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00401e50_00401e50.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;29;sprintf(__s,"%s:%d",local_3c,(uint)local_40[0]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00401c38_00401c38.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;iVar3 = sprintf(__s,"%s:%d",param_1,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;__s = (undefined4 *)malloc(0x5c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;ppvVar5 = (void **)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00404c30_00404c30.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;17;ppvVar2 = (void **)malloc(0x1c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00402e04_00402e04.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;__dest = (char *)malloc((size_t)(ppcVar4[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00401e50_00401e50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;sprintf(__s,"%s:%d",local_3c,(uint)local_40[0]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00404ee4_00404ee4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;28;__dest = (char *)malloc(sVar2 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;41;__s = (undefined4 *)malloc(0x5c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;ppvVar5 = (void **)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;28;pcVar3 = (char *)malloc(sVar2 + 7);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00404c30_00404c30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;ppvVar2 = (void **)malloc(0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004053b0_004053b0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;26;__s = (char *)malloc(sVar2 + 7);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00402e04_00402e04.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;20;strcpy(__dest,ppcVar4[2]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00404ee4_00404ee4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;28;__dest = (char *)malloc(sVar2 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;42;memset(__s,0,0x5c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;28;pcVar3 = (char *)malloc(sVar2 + 7);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;46;pvVar10 = malloc(sVar6 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00402e04_00402e04.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;strcpy(__dest,ppcVar4[2]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00404c30_00404c30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;ppvVar2 = (void **)malloc(0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004053b0_004053b0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;26;__s = (char *)malloc(sVar2 + 7);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00404ee4_00404ee4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;__dest = (char *)malloc(sVar2 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;pcVar2 = (char *)malloc(0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;pcVar3 = (char *)malloc(sVar2 + 7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;46;pvVar10 = malloc(sVar6 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00402e04_00402e04.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;iVar2 = strncmp(WAN_Service,__s,sVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00404c30_00404c30.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;20;pvVar4 = malloc(sVar3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004053b0_004053b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;__s = (char *)malloc(sVar2 + 7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00404ee4_00404ee4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;30;strcpy(__dest,param_3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;29;sprintf(pcVar3,"%s:%d",local_3c,(uint)local_40[0]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;45;pcVar2 = (char *)malloc(0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;pvVar10 = malloc(sVar6 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00404c30_00404c30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;pvVar4 = malloc(sVar3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x112);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004053b0_004053b0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;27;sprintf(__s,"%s:%d",local_3c,(uint)local_40[0]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00404ee4_00404ee4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;strcpy(__dest,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;sprintf(pcVar3,"%s:%d",local_3c,(uint)local_40[0]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;48;memcpy(pvVar10,local_30[0],sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;48;param_5 >> 0x18,puVar12);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0xfe);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00404c30_00404c30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;memcpy(pvVar4,param_2,sVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeBonjourFile;FUN_00400950_00400950.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;memset(auStack_20f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
makeBonjourFile;main_00401060.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;5;system("rm -f /var/bonjour-dhnap_service.txt 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeBonjourFile;FUN_00400ad8_00400ad8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;memset(auStack_277,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x112);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004053b0_004053b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;sprintf(__s,"%s:%d",local_3c,(uint)local_40[0]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;36;sVar2 = strlen(*(char **)(*(int *)(param_1 + 0x20) + 0x40));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;70;puVar7 = (undefined4 *)malloc(0x20);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;78;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0xfe);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
makeBonjourFile;FUN_00400950_00400950.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;memset(auStack_10f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
makeBonjourFile;FUN_00400ad8_00400ad8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memset(auStack_173,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x112);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeBonjourFile;main_00401060.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;6;system("rm -f /var/bonjour-http_service.txt 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;38;pcVar3 = (char *)malloc(sVar2 + sVar4 + 0x10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;70;puVar7 = (undefined4 *)malloc(0x20);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;78;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0xfe);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
makeBonjourFile;FUN_00400950_00400950.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;__stream = fopen("/var/bonjour-http_service.txt","w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
makeBonjourFile;FUN_00400ad8_00400ad8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;memset(auStack_73,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x112);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;38;pcVar3 = (char *)malloc(sVar2 + sVar4 + 0x10);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;70;puVar7 = (undefined4 *)malloc(0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
makeBonjourFile;FUN_00400ad8_00400ad8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__stream = fopen("/var/bonjour-dhnap_service.txt","w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;pcVar3 = (char *)malloc(sVar2 + sVar4 + 0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x112);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;87;pvVar10 = malloc(sVar6 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;80;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x116);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;41;sprintf(pcVar3,"<http://%s:%d%s>",local_20,uVar5,local_38);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x112);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x14c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;87;pvVar10 = malloc(sVar6 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;89;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x14b);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x116);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa4 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405070_00405070.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;sprintf(pcVar3,"<http://%s:%d%s>",local_20,uVar5,local_38);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x14c);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;89;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;87;pvVar10 = malloc(sVar6 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x14b);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa4 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x116);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x14c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x14b);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;89;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;89;memcpy(pvVar10,local_30[0],sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;26;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa4 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetConnectionTypeInfo",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;32;,*param_1,param_4 & 0xffff,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;91;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;32;,*param_1,param_4,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;102;ppvVar8 = (void **)malloc(8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetUserName",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004055f0_004055f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetConnectionTypeInfo",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;,*param_1,param_4 & 0xffff,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;103;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;102;ppvVar8 = (void **)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;,*param_1,param_4,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;26;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb0 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405848_00405848.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetUserName",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;103;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;102;ppvVar8 = (void **)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb3 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;31;__s = (char *)malloc(local_30 + sVar1 + 0x180 + sVar2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb0 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetIdleDisconnectTime",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;105;pvVar10 = malloc(sVar6 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb3 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;103;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;31;__s = (char *)malloc(local_30 + sVar1 + 0x180 + sVar2);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb0 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb3 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405aa0_00405aa0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetIdleDisconnectTime",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;105;pvVar10 = malloc(sVar6 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;105;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xae + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;__s = (char *)malloc(local_30 + sVar1 + 0x180 + sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;40;);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;114;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;42;iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;105;pvVar10 = malloc(sVar6 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;29;__s = (char *)malloc(sVar1 + sVar2 + 0x144 + sVar3);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00405cf8_00405cf8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;36;,*param_1,param_4,(uint)param_5,param_6,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;41;,local_48,local_4c,(uint)local_50[0],*param_1,"SetIdleDisconnectTime",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;114;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00405f50_00405f50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;107;memcpy(pvVar10,local_30[0],sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;29;__s = (char *)malloc(sVar1 + sVar2 + 0x144 + sVar3);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x120);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;,*param_1,param_4,(uint)param_5,param_6,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004061b0_004061b0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;,local_48,local_4c,(uint)local_50[0],*param_1,"SetIdleDisconnectTime",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;114;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;120;pvVar10 = malloc(puVar7[4] << 2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x120);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;__s = (char *)malloc(sVar1 + sVar2 + 0x144 + sVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;42;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xb4 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;25;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;116;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x120);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;120;pvVar10 = malloc(puVar7[4] << 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;34;,*param_1,param_4,param_5,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;42;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xb4 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x108);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;127;iVar3 = ILibParseString(local_68,0,sVar4,&DAT_00415bb4,3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;32;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;150;pvVar10 = malloc(sVar6 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;,*param_1,param_4,param_5,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xb4 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x108);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x118);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;131;pvVar11 = malloc(sVar4 + 1 + sVar10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;150;pvVar10 = malloc(sVar6 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;40;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xac + sVar3);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;46;iVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;30;__s = (char *)malloc(local_30 + sVar1 + 0x16c + sVar2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x108);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x118);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;131;pvVar11 = malloc(sVar4 + 1 + sVar10);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb5 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;150;pvVar10 = malloc(sVar6 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x108);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;46;iVar3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;40;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xac + sVar3);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;30;__s = (char *)malloc(local_30 + sVar1 + 0x16c + sVar2);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x118);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;131;pvVar11 = malloc(sVar4 + 1 + sVar10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb5 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xac + sVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x108);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;152;memcpy(pvVar10,local_30[0],sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetSpecificPortMappingEntry_00406410.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;iVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;__s = (char *)malloc(local_30 + sVar1 + 0x16c + sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;134;memcpy(pvVar11,param_3,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;161;pvVar10 = malloc(sVar6 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;43;,local_48,local_4c,(uint)local_50[0],*param_1,"ConfigureConnection",iVar4);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb5 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x108);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;35;,*param_1,param_4,(uint)param_5,param_6,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa9 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;141;pvVar11 = malloc(sVar4 + 2 + sVar10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;42;iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;161;pvVar10 = malloc(sVar6 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004066b4_004066b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;,local_48,local_4c,(uint)local_50[0],*param_1,"ConfigureConnection",iVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;,*param_1,param_4,(uint)param_5,param_6,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa9 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;141;pvVar11 = malloc(sVar4 + 2 + sVar10);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb1 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040694c_0040694c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;161;pvVar10 = malloc(sVar6 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;41;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa9 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb1 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;141;pvVar11 = malloc(sVar4 + 2 + sVar10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;26;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;163;memcpy(pvVar10,local_30[0],sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa9 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0xfe);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;41;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetNATRSIPStatus",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;33;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;144;memcpy(pvVar11,param_3,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb1 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;173;pvVar10 = malloc(sVar6 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa9 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0xfe);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00406ba4_00406ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetNATRSIPStatus",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;149;strcpy(__dest,pcVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;26;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;40;iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa9 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;173;pvVar10 = malloc(sVar6 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0xfe);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;44;,local_48,local_4c,(uint)local_50[0],*param_1,"DeletePortMapping",iVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;33;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;149;strcpy(__dest,pcVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;31;__s = (char *)malloc(local_30 + sVar1 + 0x16c + sVar2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"ForceTermination",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00406dfc_00406dfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;173;pvVar10 = malloc(sVar6 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;44;,local_48,local_4c,(uint)local_50[0],*param_1,"DeletePortMapping",iVar3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;40;__s = (char *)malloc(local_30 + local_34 + 0x239 + local_38 + sVar1 + sVar2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;152;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;31;__s = (char *)malloc(local_30 + sVar1 + 0x16c + sVar2);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004072f8_004072f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"ForceTermination",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040418c_0040418c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;175;memcpy(pvVar10,local_30[0],sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407054_00407054.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;44;,local_48,local_4c,(uint)local_50[0],*param_1,"DeletePortMapping",iVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;152;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;40;__s = (char *)malloc(local_30 + local_34 + 0x239 + local_38 + sVar1 + sVar2);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;__s = (char *)malloc(local_30 + sVar1 + 0x16c + sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa4 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;25;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;152;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;__s = (char *)malloc(local_30 + local_34 + 0x239 + local_38 + sVar1 + sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;36;,*param_1,param_4,(uint)param_5,param_6,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa4 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;28;__s = (char *)malloc(sVar1 + sVar2 + 0x131);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;154;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;46;"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;,*param_1,param_4,(uint)param_5,param_6,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa4 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;28;__s = (char *)malloc(sVar1 + sVar2 + 0x131);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x10a);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;171;sVar4 = sVar4 - 5;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;42;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetPassword",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;__s = (char *)malloc(sVar1 + sVar2 + 0x131);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;28;__s = (char *)malloc(sVar1 + 0x110);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;174;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;52;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xa7 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x10a);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x102);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;42;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;__s = (char *)malloc(sVar1 + 0x11a);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;33;,*param_1,param_4,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00407550_00407550.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetPassword",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;28;__s = (char *)malloc(sVar1 + 0x110);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;52;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xa7 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x10a);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;174;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x102);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memset(local_ad0 + 1,0,0x1ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;__s = (char *)malloc(sVar1 + 0x11a);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;,*param_1,param_4,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x102);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;174;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;__s = (char *)malloc(sVar1 + 0x110);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xa7 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;memset(local_8d0 + 1,0,0x3ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;45;,local_48,local_4c,(uint)local_50[0],*param_1,"DeletePortMapping",iVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;__s = (char *)malloc(sVar1 + 0x11a);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;39;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00408bfc_00408bfc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;iVar1 = strncmp(*ppcVar2,WAN_Service,__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;30;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;176;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;31;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;55;,local_58,local_5c,(uint)local_60[0],*param_1,"AddPortMapping",iVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;32;memset(auStack_4cf,0,0x47f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;31;,*param_1,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;45;,local_48,local_4c,(uint)local_50[0],*param_1,"DeletePortMapping",iVar3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;39;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;55;,local_58,local_5c,(uint)local_60[0],*param_1,"AddPortMapping",iVar3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;187;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;47;memset(local_ad0,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xaa + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;,*param_1,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_DeletePortMapping_004077a8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;,local_48,local_4c,(uint)local_50[0],*param_1,"DeletePortMapping",iVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;187;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;__s_00 = (char *)malloc(sVar1 + sVar2 + 0xaa + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_AddPortMapping_00407a4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;55;,local_58,local_5c,(uint)local_60[0],*param_1,"AddPortMapping",iVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;37;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xad + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa6 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;memset(local_44,0,0x400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xaa + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;37;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb2 + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;37;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xad + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;42;,local_48,local_4c,(uint)local_50[0],*param_1,"SetConnectionType",iVar3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;187;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa6 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;62;fprintf(stderr,local_38,local_4c,local_48,local_ad0);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xaa + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;37;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb2 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xad + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;189;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xa6 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00407d64_00407d64.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;,local_48,local_4c,(uint)local_50[0],*param_1,"SetConnectionType",iVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;63;sprintf(local_40,local_34,local_4c,local_48,local_44);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"RequestConnection",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;__s_00 = (char *)malloc(sVar1 + sVar3 + 0xb2 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;40;,local_48,local_4c,(uint)local_50[0],*param_1,"GetExternalIPAddress",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;196;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetStatusInfo",iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;63;sprintf(local_40,local_34,local_4c,local_48,local_44);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00407fdc_00407fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"RequestConnection",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;41;iVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;196;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;UPnPInvoke_WANConnection_GetExternalIPAddress_00408234.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;,local_48,local_4c,(uint)local_50[0],*param_1,"GetExternalIPAddress",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;63;sprintf(local_40,local_34,local_4c,local_48,local_44);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040848c_0040848c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;,local_48,local_4c,(uint)local_50[0],*param_1,"GetStatusInfo",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040be80_0040be80.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;21;__dest = (char *)malloc((size_t)(ppcVar4[3] + 1));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;pcVar3 = (char *)malloc(sVar2 + 0x12);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004086e4_004086e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;196;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-command-injection;64;system(local_40);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
upnp_igd;FUN_0040be80_0040be80.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;21;__dest = (char *)malloc((size_t)(ppcVar4[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;74;pcVar4 = (char *)malloc(sVar3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;198;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;27;pcVar3 = (char *)malloc(sVar2 + 0x12);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;13;ppcVar2 = (code **)malloc(0x4c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
bundle_restore;main_004008f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;64;system(local_40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;74;pcVar4 = (char *)malloc(sVar3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibAddRequest_DirectEx_0040cfe4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;16;puVar2 = (undefined4 *)malloc(0x34);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040be80_0040be80.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;__dest = (char *)malloc((size_t)(ppcVar4[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;207;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;pcVar3 = (char *)malloc(sVar2 + 0x12);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibDeleteRequests_0040d1e4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;89;ppvVar2 = (void **)malloc(0x34);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;ppcVar2 = (code **)malloc(0x4c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;32;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibAddRequest_DirectEx_0040cfe4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;puVar2 = (undefined4 *)malloc(0x34);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040be80_0040be80.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;23;strcpy(__dest,ppcVar4[2]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;pcVar4 = (char *)malloc(sVar3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;207;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibDeleteRequests_0040d1e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;89;ppvVar2 = (void **)malloc(0x34);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;28;sprintf(pcVar3,"http://%s:%d/",local_34,(uint)local_38[0]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;ppcVar2 = (code **)malloc(0x4c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;32;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040e7b8_0040e7b8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;10;__s = (char *)malloc(0x10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;75;strcpy(pcVar4,param_4);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibAddRequest_DirectEx_0040cfe4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;puVar2 = (undefined4 *)malloc(0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040be80_0040be80.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;strcpy(__dest,ppcVar4[2]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibDeleteRequests_0040d1e4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;89;ppvVar2 = (void **)malloc(0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;207;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;sprintf(pcVar3,"http://%s:%d/",local_34,(uint)local_38[0]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;15;srand(local_20.tv_sec);The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
upnp_igd;FUN_0040e7b8_0040e7b8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;__s = (char *)malloc(0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;strcpy(pcVar4,param_4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibDeleteRequests_0040d1e4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;90;memset(ppvVar2,0,0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;45;strcpy(WAN_Service,*ppcVar7);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;209;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;srand(local_20.tv_sec);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040e7b8_0040e7b8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;10;__s = (char *)malloc(0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;32;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;76;piVar5 = (int *)malloc(8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateMiniWebServer_0040e84c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;12;ppcVar2 = (code **)malloc(0x24);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;strcpy(WAN_Service,*ppcVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;219;pvVar11 = malloc(sVar4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;local_18 = (int)param_2 * 0x850;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;sVar1 = recv(param_1[0x209],(void *)(param_1[0x201] + iVar2),param_1[0x207] - iVar2,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040e7b8_0040e7b8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;uVar1 >> 0x18,puVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;piVar5 = (int *)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateMiniWebServer_0040e84c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;ppcVar2 = (code **)malloc(0x24);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;29;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;219;pvVar11 = malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;50;strcpy(WAN_Service,*ppcVar7);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;21;pcVar3 = (code *)malloc(local_18);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;25;puVar1 = (undefined4 *)malloc(0x30);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;81;memcpy((void *)param_1[0x201],(void *)((int)(void *)param_1[0x201] + iVar5),iVar4 - iVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateMiniWebServer_0040e84c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;ppcVar2 = (code **)malloc(0x24);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040c89c_0040c89c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;76;piVar5 = (int *)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;29;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibSSDP_IPAddressListChanged_0040f9fc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;25;__s = (char *)malloc(*(int *)(param_1 + 0x14) + 0x69);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;219;pvVar11 = malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;50;strcpy(WAN_Service,*ppcVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;21;pcVar3 = (code *)malloc(local_18);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;puVar1 = (undefined4 *)malloc(0x30);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;81;memcpy((void *)param_1[0x201],(void *)((int)(void *)param_1[0x201] + iVar5),iVar4 - iVar5);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibCreateMiniWebServer_0040e84c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;14;pcVar3 = (code *)malloc((int)param_2 * 0x838);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSSDP_IPAddressListChanged_0040f9fc.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;25;__s = (char *)malloc(*(int *)(param_1 + 0x14) + 0x69);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;221;memcpy(pvVar11,local_68,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;59;pcVar3 = (char *)malloc(sVar2 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateHTTPClientModule_0040cd70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;pcVar3 = (code *)malloc(local_18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;92;sVar1 = recv(param_1[0x209],(void *)((int)param_1 + param_1[0x203] + 4),0x800 - param_1[0x203],0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;puVar1 = (undefined4 *)malloc(0x30);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;33;local_40 = malloc(0x1000);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateMiniWebServer_0040e84c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;14;pcVar3 = (code *)malloc((int)param_2 * 0x838);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;240;sVar4 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibSSDP_IPAddressListChanged_0040f9fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;__s = (char *)malloc(*(int *)(param_1 + 0x14) + 0x69);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;pvVar3 = realloc((void *)param_1[0x201],iVar2 + 0x1000U);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;152;__nptr = (char *)malloc((size_t)(ppcVar9[3] + 1));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;59;pcVar3 = (char *)malloc(sVar2 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;44;pvVar2 = malloc(param_3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;local_40 = malloc(0x1000);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateMiniWebServer_0040e84c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;pcVar3 = (code *)malloc((int)param_2 * 0x838);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;243;sVar7 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibSSDP_IPAddressListChanged_0040f9fc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;,*(undefined4 *)(param_1 + 0x10));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;sVar1 = recv(param_1[0x209],(void *)(param_1[0x201] + iVar2),param_1[0x207] - iVar2,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;152;__nptr = (char *)malloc((size_t)(ppcVar9[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;59;pcVar3 = (char *)malloc(sVar2 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;44;pvVar2 = malloc(param_3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;33;local_40 = malloc(0x1000);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00410748_00410748.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;21;local_30 = (undefined *)malloc((param_2 >> 2) + 4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibSSDP_IPAddressListChanged_0040f9fc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;28;,*(undefined4 *)(param_1 + 0x10));A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;245;sVar10 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;80;memcpy((void *)param_1[0x201],(void *)((int)(void *)param_1[0x201] + iVar5),iVar8 - iVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;152;__nptr = (char *)malloc((size_t)(ppcVar9[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;44;pvVar2 = malloc(param_3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;61;strcpy(pcVar3,param_4);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;18;ppiVar3 = (int **)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
rtkmib;main_00400a4c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;79;sscanf(param_2[2],"%d",auStack_24);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;sVar2 = recvfrom(param_1,local_40,0x1000,0,local_34,&local_5c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410748_00410748.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;21;local_30 = (undefined *)malloc((param_2 >> 2) + 4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibSSDP_IPAddressListChanged_0040f9fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;,*(undefined4 *)(param_1 + 0x10));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;283;ppcVar5 = (char **)malloc(0x28);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;153;memcpy(__nptr,ppcVar9[2],(size_t)ppcVar9[3]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;80;memcpy((void *)param_1[0x201],(void *)((int)(void *)param_1[0x201] + iVar5),iVar8 - iVar5);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;memcpy(pvVar2,param_2,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;ppiVar3 = (int **)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;strcpy(pcVar3,param_4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;38;sVar2 = recvfrom(param_1,local_40,0x1000,0,local_34,&local_5c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
rtkmib;main_00400a4c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;79;sscanf(param_2[2],"%d",auStack_24);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00410748_00410748.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;local_30 = (undefined *)malloc((param_2 >> 2) + 4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;283;ppcVar5 = (char **)malloc(0x28);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;161;__size = param_1[0x202];The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;90;sVar1 = recv(param_1[0x209],(void *)((int)param_1 + param_1[0x203] + 4),0x800 - param_1[0x203],0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;ppiVar3 = (int **)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;76;pcVar3 = (char *)malloc(sVar2 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;23;ppiVar4 = (int **)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;71;pvVar2 = malloc(param_3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;50;__dest = malloc((size_t)(ppcVar8[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00410748_00410748.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;39;cVar2 = cVar2 + -0x3d;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;283;ppcVar5 = (char **)malloc(0x28);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;117;__nptr = (char *)malloc((size_t)(ppcVar7[3] + 1));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;163;pvVar3 = malloc(0x1000);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;23;piVar5 = (int *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;71;pvVar2 = malloc(param_3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;ppiVar4 = (int **)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;76;pcVar3 = (char *)malloc(sVar2 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;50;__dest = malloc((size_t)(ppcVar8[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;291;local_48 = sVar7 + 1;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;117;__nptr = (char *)malloc((size_t)(ppcVar7[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;163;pvVar3 = malloc(0x1000);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;piVar5 = (int *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410dc0_00410dc0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;8;puVar1 = (undefined4 *)malloc(8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;ppiVar4 = (int **)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;pcVar3 = (char *)malloc(sVar2 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;71;pvVar2 = malloc(param_3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;memcpy(__dest,ppcVar8[2],(size_t)ppcVar8[3]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;163;pvVar3 = malloc(0x1000);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;piVar5 = (int *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;117;__nptr = (char *)malloc((size_t)(ppcVar7[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410dc0_00410dc0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;puVar1 = (undefined4 *)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;294;local_2c = (char *)malloc(local_48 + sVar6);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;30;piVar6 = (int *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;77;memcpy(pcVar3,local_2c,sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;memcpy(pvVar2,param_2,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;124;__dest = malloc((size_t)(ppcVar8[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;172;pvVar3 = malloc(__size);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;118;memcpy(__nptr,ppcVar7[2],(size_t)ppcVar7[3]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410dc0_00410dc0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;puVar1 = (undefined4 *)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;47;piVar5 = (int *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;294;local_2c = (char *)malloc(local_48 + sVar6);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;piVar6 = (int *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;81;pcVar3 = (char *)malloc(sVar2 + 2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;74;__s = (char *)malloc(param_3 + 0x69);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;124;__dest = malloc((size_t)(ppcVar8[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;172;pvVar3 = malloc(__size);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;126;__size = param_1[0x202];The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;piVar5 = (int *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;piVar6 = (int *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;294;local_2c = (char *)malloc(local_48 + sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;74;__s = (char *)malloc(param_3 + 0x69);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;81;pcVar3 = (char *)malloc(sVar2 + 2);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040fc44_0040fc44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;125;memcpy(__dest,ppcVar8[2],(size_t)ppcVar8[3]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410e10_00410e10.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;8;puVar1 = (undefined4 *)malloc(8);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;195;memcpy((void *)param_1[0x201],(void *)((int)param_1 + iVar4 + 8),(-4 - iVar4) + param_1[0x203]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;128;pvVar3 = malloc(0x1000);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;47;cVar1 = *(char *)(param_1 + param_2);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;ILibParseString_004109c0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;47;piVar5 = (int *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;297;memcpy(local_2c,param_3,sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;__s = (char *)malloc(param_3 + 0x69);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;81;pcVar3 = (char *)malloc(sVar2 + 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410e10_00410e10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;puVar1 = (undefined4 *)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;214;param_1[0x206] - iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;59;cVar1 = *(char *)(param_1 + param_2);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;ILibAddToChain_00410e78.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;14;pvVar1 = malloc(0x10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;128;pvVar3 = malloc(0x1000);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;299;memcpy(ppcVar5[3] + sVar6,local_5c,sVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040c250_0040c250.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;82;memcpy(pcVar3,local_2c,sVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;77;,pvVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00410e10_00410e10.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;puVar1 = (undefined4 *)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibCreateLifeTime_00410f08.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;7;ppcVar1 = (code **)malloc(0x28);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0040d47c_0040d47c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;236;param_1[0x206] - iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;73;piVar6 = (int *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibAddToChain_00410e78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;pvVar1 = malloc(0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;128;pvVar3 = malloc(0x1000);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;305;local_2c = (char *)malloc(local_48 + sVar6);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateSSDPClientModule_0040f5c8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;77;,pvVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateLifeTime_00410f08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;ppcVar1 = (code **)malloc(0x28);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;73;piVar6 = (int *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddToChain_00410e78.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;pvVar1 = malloc(0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;137;pvVar3 = malloc(__size);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;305;local_2c = (char *)malloc(local_48 + sVar6);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004113e4_004113e4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;36;puVar5 = (undefined4 *)malloc(0x1c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateLifeTime_00410f08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;ppcVar1 = (code **)malloc(0x28);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00410b58_00410b58.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;73;piVar6 = (int *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;305;local_2c = (char *)malloc(local_48 + sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;137;pvVar3 = malloc(__size);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004113e4_004113e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;puVar5 = (undefined4 *)malloc(0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;308;memcpy(local_2c,param_3,sVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-pointer-subtraction;20;return (int)__dest - (int)param_1;The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;143;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;9;ppvVar1 = (void **)malloc(0x18);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;7;pvVar1 = malloc((int)param_3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibSetStatusCode_00411df8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;8;__dest = malloc(param_4 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004113e4_004113e4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;36;puVar5 = (undefined4 *)malloc(0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00411e70_00411e70.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;11;__dest = malloc(param_3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00411f08_00411f08.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;11;puVar1 = (undefined *)malloc(param_3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;310;memcpy(ppcVar5[3] + sVar6,local_5c + 1,sVar7 - 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;22;cVar1 = param_2[iVar4];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;161;param_1[0x206] - iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;9;ppvVar1 = (void **)malloc(0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;7;pvVar1 = malloc((int)param_3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibSetStatusCode_00411df8.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;8;__dest = malloc(param_4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_004113e4_004113e4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;40;puVar5 = (undefined4 *)malloc(0x1c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00411e70_00411e70.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;11;__dest = malloc(param_3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00411f08_00411f08.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;11;puVar1 = (undefined *)malloc(param_3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0040ec90_0040ec90.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;181;param_1[0x206] - iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;315;pcVar2 = (char *)malloc(sVar7 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;26;__n = 6;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;9;ppvVar1 = (void **)malloc(0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;pvVar1 = malloc((int)param_3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_004113e4_004113e4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;puVar5 = (undefined4 *)malloc(0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetStatusCode_00411df8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;__dest = malloc(param_4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411e70_00411e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;__dest = malloc(param_3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411f08_00411f08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;puVar1 = (undefined *)malloc(param_3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;315;pcVar2 = (char *)malloc(sVar7 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;memcpy(__dest,__src,__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;11;pvVar2 = malloc((int)param_3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_004113e4_004113e4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;puVar5 = (undefined4 *)malloc(0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;pvVar1 = malloc((int)param_3 + 1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00411e70_00411e70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;memcpy(__dest,param_2,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetStatusCode_00411df8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;memcpy(__dest,param_3,param_4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;iVar1 = strncasecmp(param_2,*ppcVar4,param_3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00411f08_00411f08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;11;puVar1 = (undefined *)malloc(param_3 + 1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;317;memcpy(pcVar2,local_5c,sVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;memcpy(__dest,__src,__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;11;pvVar2 = malloc((int)param_3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;20;__dest = malloc((size_t)(ppcVar4[3] + 1));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;9;memcpy(pvVar1,param_2,(size_t)param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411f08_00411f08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;memcpy(__dest_00,param_1 + 1,(uint)*param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;__n = 4;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;325;pcVar2 = (char *)malloc(sVar4 + 1 + sVar7);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibCreateEmptyPacket_004120e8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;7;__s = malloc(0x44);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;pvVar2 = malloc((int)param_3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;20;__dest = malloc((size_t)(ppcVar4[3] + 1));The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;memcpy(local_20,param_1,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;12;pvVar1 = malloc((int)param_5 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibInitHashTree_004122e8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;8;puVar1 = (undefined4 *)malloc(0x14);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00411f08_00411f08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;memcpy(__dest,__dest + -((uint)pbVar2[1] * 4 + (uint)(*pbVar2 >> 6)),__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;325;pcVar2 = (char *)malloc(sVar4 + 1 + sVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00411aa0_00411aa0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;49;__n = 5;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibCreateEmptyPacket_004120e8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;__s = malloc(0x44);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;11;pvVar2 = malloc((int)param_3 + 1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;__dest = malloc((size_t)(ppcVar4[3] + 1));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;memcpy(local_20,param_1,4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;12;pvVar1 = malloc((int)param_5 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibInitHashTree_004122e8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;puVar1 = (undefined4 *)malloc(0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;328;memcpy(pcVar2,param_3,sVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateEmptyPacket_004120e8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;__s = malloc(0x44);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;memcpy(pvVar2,param_2,(size_t)param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00412368_00412368.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;7;puVar1 = (undefined4 *)malloc(0x18);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;memcpy(__dest,ppcVar4[2] + (int)pcVar2,(int)pcVar3 - (int)pcVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;pvVar1 = malloc((int)param_5 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memcpy(local_20,param_1,4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibInitHashTree_004122e8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;puVar1 = (undefined4 *)malloc(0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;330;memcpy(ppcVar5[2] + sVar7,local_58[0],sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;78;cVar1 = *(char *)(local_40 + iVar6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;ILibCreateEmptyPacket_004120e8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;8;memset(__s,0,0x44);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;16;pvVar2 = malloc((int)param_5 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00412368_00412368.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;puVar1 = (undefined4 *)malloc(0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;memcpy(local_20,(void *)((int)param_1 + (param_2 - 4)),4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;pvVar1 = malloc((int)param_5 + 1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memcpy(__dest,ppcVar4[2] + (int)pcVar2,(int)pcVar3 - (int)pcVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;90;piVar7 = (int *)malloc(0x34);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;336;pcVar2 = (char *)malloc(sVar4 + 1 + sVar7);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibInitHashTree_004122e8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;9;puVar2 = (undefined4 *)malloc(0x18);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;16;pvVar2 = malloc((int)param_5 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00412368_00412368.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;puVar1 = (undefined4 *)malloc(0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibSetDirective_00411d2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;memcpy(pvVar1,param_4,(size_t)param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;15;iVar2 = ILibParseString(param_1,0,sVar1,&DAT_00415bb4,3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;memcpy(local_20,(void *)((int)param_1 + (param_2 - 4)),4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00411fdc_00411fdc.c;external.semgrep-rules-0xdea.c.raptor-pointer-subtraction;28;memcpy(__dest,ppcVar4[2] + (int)pcVar2,(int)pcVar3 - (int)pcVar2);The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;336;pcVar2 = (char *)malloc(sVar4 + 1 + sVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibInitHashTree_004122e8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;9;puVar2 = (undefined4 *)malloc(0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;90;piVar7 = (int *)malloc(0x34);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;pvVar2 = malloc((int)param_5 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;sVar1 = iVar6 - *(int *)(*piVar3 + 4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;memcpy(local_20,(void *)((int)param_1 + ((int)param_2 >> 1)),4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;90;piVar7 = (int *)malloc(0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibInitHashTree_004122e8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;9;puVar2 = (undefined4 *)malloc(0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibGetDGramSocket_00412c28.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;18;uVar2 = rand();The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;pvVar2 = malloc((int)param_5 + 1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;339;memcpy(pcVar2,param_3,sVar7);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetStreamSocket_00412cfc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;22;uVar2 = rand();The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;20;pvVar4 = malloc(sVar1 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;24;pvVar1 = malloc((int)param_1[10] + iVar3 + 3);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00412208_00412208.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;memcpy(local_20,(void *)((int)param_1 + ((int)param_2 >> 1)),4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;91;memset(piVar7,0,0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibGetDGramSocket_00412c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;uVar2 = rand();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;341;memcpy(ppcVar5[2] + sVar7,local_58[0] + 1,sVar4 - 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibAddHeaderLine_00411c28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;memcpy(pvVar2,param_4,(size_t)param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetStreamSocket_00412cfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;uVar2 = rand();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;20;pvVar4 = malloc(sVar1 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;24;pvVar1 = malloc((int)param_1[10] + iVar3 + 3);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0041311c_0041311c.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;42;sprintf(local_40,local_2c,uVar4,local_34,puVar6);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;20;__s = (void **)malloc(0x44);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;114;__s = (int *)malloc(0x34);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;346;pcVar2 = (char *)malloc(sVar4 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;pvVar4 = malloc(sVar1 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;pvVar1 = malloc((int)param_1[10] + iVar3 + 3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;(iVar2 = memcmp(ppiVar5[3],param_2,(size_t)param_3), iVar2 == 0)) {;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0041311c_0041311c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;42;sprintf(local_40,local_2c,uVar4,local_34,puVar6);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;__s = (void **)malloc(0x44);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;114;__s = (int *)malloc(0x34);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;346;pcVar2 = (char *)malloc(sVar4 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;memcpy(pvVar4,(void *)(iVar7 + *(int *)(*piVar3 + 4)),sVar1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;pvVar1 = malloc((int)param_1[10] + iVar3 + 3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;23;piVar3 = (int *)malloc(0x18);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibReadInnerXML_00413a08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;(iVar3 = memcmp(*ppvVar5,*param_1,(size_t)ppvVar5[1]), iVar3 != 0));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0041311c_0041311c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;sprintf(local_40,local_2c,uVar4,local_34,puVar6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;__s = (void **)malloc(0x44);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;114;__s = (int *)malloc(0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;348;memcpy(pcVar2,local_58[0],sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;30;__nptr = (char *)malloc(*(int *)(piVar5[1] + 4) + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibProcessXMLNodeList_00413c24.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;iVar3 = memcmp(*ppvVar2,*param_1,(size_t)ppvVar2[1]);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;27;memcpy(pvVar1,*param_1,(size_t)param_1[1]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;piVar3 = (int *)malloc(0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memset(__s,0,0x44);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseXML_00412664.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;115;memset(__s,0,0x34);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00413d30_00413d30.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;30;local_27 = pcVar5[2];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;356;pcVar2 = (char *)malloc(sVar10 + 1 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;30;__nptr = (char *)malloc(*(int *)(piVar5[1] + 4) + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;memcpy((void *)((int)pvVar1 + iVar7),pvVar6,(size_t)pvVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;12;__ptr = malloc(0x14);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;piVar3 = (int *)malloc(0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;12;__ptr = malloc(0x14);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;34;__nptr = (char *)malloc(*(int *)(*(int *)(*piVar2 + 8) + 4) + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;356;pcVar2 = (char *)malloc(sVar10 + 1 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00413d30_00413d30.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;31;local_28 = pcVar5[1];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;__nptr = (char *)malloc(*(int *)(piVar5[1] + 4) + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;memcpy((void *)((int)pvVar1 + iVar7)," HTTP/",6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;__ptr = malloc(0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;34;pvVar4 = malloc((size_t)param_3);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;__ptr = malloc(0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibLifeTime_AddEx_004140e8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;puVar2 = (uint *)malloc(0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;34;__nptr = (char *)malloc(*(int *)(*(int *)(*piVar2 + 8) + 4) + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;359;memcpy(pcVar2,param_3,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;memcpy(__nptr,*(void **)piVar5[1],(size_t)((void **)piVar5[1])[1]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;__ptr = malloc(0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;memcpy((void *)((int)pvVar1 + iVar7)," HTTP/",6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;pvVar4 = malloc((size_t)param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;__ptr = malloc(0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibLifeTime_AddEx_004140e8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;puVar2 = (uint *)malloc(0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;__nptr = (char *)malloc(*(int *)(*(int *)(*piVar2 + 8) + 4) + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;361;memcpy(ppcVar5[4] + sVar4,local_60,sVar10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;13;__nptr = (char *)malloc(param_2 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;memcpy((void *)((int)pvVar1 + iVar3),param_1[7],(size_t)param_1[8]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateChain_004146a4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;10;puVar2 = (undefined4 *)malloc(0x10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;37;sVar1 = *(size_t *)(*piVar5 + 4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;13;__nptr = (char *)malloc(param_2 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00413714_00413714.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;memcpy((void *)(*ppiVar5)[3],param_2,(size_t)param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;memcpy(__nptr,**(void ***)(*piVar2 + 8),(size_t)(*(void ***)(*piVar2 + 8))[1]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;13;__nptr = (char *)malloc(param_2 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;367;pcVar2 = (char *)malloc(sVar10 + 1 + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;memcpy(pvVar1,&DAT_00416d4c,5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;38;pvVar4 = malloc(sVar1 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibCreateChain_004146a4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;puVar2 = (undefined4 *)malloc(0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;34;__dest = malloc(iVar1 << 2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;13;__nptr = (char *)malloc(param_2 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;piVar4 = (int *)malloc(0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;__nptr = (char *)malloc(param_2 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;367;pcVar2 = (char *)malloc(sVar10 + 1 + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;memcpy(pvVar1,&DAT_00416d4c,5);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibCreateChain_004146a4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;10;puVar2 = (undefined4 *)malloc(0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;38;pvVar4 = malloc(sVar1 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;__dest = malloc(iVar1 << 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00414b34_00414b34.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;5;sprintf(WAN_Service,"urn:schemas-upnp-org:service:WAN%sConnection:1",param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;__nptr = (char *)malloc(param_2 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParsePacketHeader_004132d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;61;piVar4 = (int *)malloc(0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;memcpy((void *)((int)pvVar1 + 5),param_1[7],(size_t)param_1[8]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetULong_00413e28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;memcpy(__nptr,param_1,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;370;memcpy(pcVar2,param_3,sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateChain_004146a4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-rand-srand;12;srand(__seed);The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;pvVar4 = malloc(sVar1 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00413f60_00413f60.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;memcpy(__nptr,param_1,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00414b34_00414b34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;5;sprintf(WAN_Service,"urn:schemas-upnp-org:service:WAN%sConnection:1",param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;memcpy(__dest,auStack_270,iVar1 << 2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;iVar3 = sprintf((char *)((int)pvVar1 + (int)pvVar6 + 5)," %d ",param_1[4]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;372;memcpy(ppcVar5[4] + sVar4,local_60 + 1,sVar10 - 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibCreateChain_004146a4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;srand(__seed);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibParseUri_00412a10.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;memcpy(pvVar4,*(void **)*piVar5,sVar1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;__stream = fopen("/proc/net/route","r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;43;strcpy(acStack_290,__s1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;9;signal(2,FUN_00415084);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;memcpy((void *)((int)pvVar1 + iVar3),param_1[5],(size_t)param_1[6]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;377;pcVar2 = (char *)malloc(sVar10 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;fgets(acStack_144,0x100,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;strcpy(acStack_290,__s1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;10;signal(9,FUN_00415084);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;42;strcpy(ServiceType,WAN_Service);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;55;memcpy(__dest,*ppvVar5,(size_t)ppvVar5[1]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;377;pcVar2 = (char *)malloc(sVar10 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;memcpy(auStack_2a0,__s1 + 0x10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;pcVar1 = fgets(acStack_144,0x100,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;11;signal(0xf,FUN_00415084);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;strcpy(ServiceType,WAN_Service);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;memcpy((void *)((int)pvVar1 + iVar3),ppvVar5[2],(size_t)ppvVar5[3]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;379;memcpy(pcVar2,local_60,sVar10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-scanf-etc;38;auStack_174,auStack_170,auStack_16c,local_38,local_34,local_30,local_2c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;ILibGetLocalIPAddressList_00414750.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;47;memcpy(auStack_2a0,__s1 + 0x10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;76;__ptr = (char *)malloc(0xc);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;13;IFaceName = strdup("br0");The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;ILibGetRawPacket_00412e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;71;memcpy((void *)((int)pvVar1 + iVar3 + 4),pvVar6,(size_t)pvVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;384;pcVar2 = (char *)malloc(local_4c + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;auStack_174,auStack_170,auStack_16c,local_38,local_34,local_30,local_2c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;sscanf(*(char **)(param_2 + 8),"%d",&DAT_004276a4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;__ptr = (char *)malloc(0xc);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;384;pcVar2 = (char *)malloc(local_4c + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;38;auStack_174,auStack_170,auStack_16c,local_38,local_34,local_30,local_2c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;384;pcVar2 = (char *)malloc(local_4c + 1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;76;__ptr = (char *)malloc(0xc);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;19;sscanf(*(char **)(param_2 + 8),"%d",&DAT_004276a4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_00414bc8_00414bc8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;,local_158 & 0xff);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
msger;main_00401150.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;87;strcpy((char *)local_12c,*(char **)(param_2 + 0x14));A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;386;sprintf(pcVar2,local_64,local_4c);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;79;__s = (char *)malloc(sVar2 + 0x110);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;sscanf(*(char **)(param_2 + 0xc),"%d",&Ext_Port);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
msger;main_00401150.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;87;strcpy((char *)local_12c,*(char **)(param_2 + 0x14));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;386;sprintf(pcVar2,local_64,local_4c);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;79;__s = (char *)malloc(sVar2 + 0x110);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;37;sscanf(*(char **)(param_2 + 0xc),"%d",&Ext_Port);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
msger;main_00401150.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;88;sVar5 = strlen(*(char **)(param_2 + 0x14));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;FUN_00403160_00403160.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;386;sprintf(pcVar2,local_64,local_4c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;79;__s = (char *)malloc(sVar2 + 0x110);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;38;strcpy(Protocol,*(char **)(param_2 + 0x10));A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
msger;main_00401150.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;89;iVar9 = sVar5 + 1;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;strcpy(Protocol,*(char **)(param_2 + 0x10));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;82;,*ppcVar7,"></s:Body></s:Envelope>");A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;40;strcpy(Service,*(char **)(param_2 + 0x14));A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;82;,*ppcVar7,"></s:Body></s:Envelope>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;strcpy(Service,*(char **)(param_2 + 0x14));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;88;__s_00 = (char *)malloc(sVar2 + sVar3 + 0xad + sVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;sscanf(*(char **)(param_2 + 0x18),"%d",&Int_Port);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;88;__s_00 = (char *)malloc(sVar2 + sVar3 + 0xad + sVar4);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;88;__s_00 = (char *)malloc(sVar2 + sVar3 + 0xad + sVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;41;sscanf(*(char **)(param_2 + 0x18),"%d",&Int_Port);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;92;"GetExternalIPAddress",iVar5);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;51;strcpy(LocalIP,pcVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
upnp_igd;FUN_0041527c_0041527c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;92;"GetExternalIPAddress",iVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;strcpy(LocalIP,pcVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
upnp_igd;main_00414d84.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;strcpy(DeviceType,"urn:schemas-upnp-org:device:WANConnectionDevice:1");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;27;memset((char *)((int)&local_158 + 1),0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_00401170_00401170.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;69;sVar4 = 1 << (iVar2 - 5U & 0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;32;memset(local_acc + 1,0,0x1ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_00402140_00402140.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;__stream = fopen(param_1,"w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;34;memset(auStack_4cb,0,0x47f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_00401170_00401170.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;105;strcpy((char *)local_228,*param_5);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;memset((void *)((int)&local_58 + 1),0,0x13);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
wanip_detect;FUN_00400c2c_00400c2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;10;system("/usr/sbin/ddns checkip");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
wanip_detect;main_004009fc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;28;signal(2,FUN_00400960);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;memset(local_8cc + 1,0,0x3ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_00401170_00401170.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;105;strcpy((char *)local_228,*param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;31;iVar1 = stat("/tmp/sys_env",&sStack_1f0);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
wanip_detect;FUN_00400c2c_00400c2c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;system("/usr/sbin/msger eventd 0 estatusnotify 0 3");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
wanip_detect;main_004009fc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;29;signal(0xf,FUN_00400960);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;58;memset(local_acc,0,0x200);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;iVar1 = stat("/tmp/sys_env",&sStack_1f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
wanip_detect;main_004009fc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;30;signal(3,FUN_00400960);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;unlink("/tmp/sys_env");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;62;memset(local_38,0,0x400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
wanip_detect;main_004009fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;31;system("/usr/sbin/ddns checkip");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;system("/bin/dd if=/dev/mtdblock1 of=/tmp/sys_env 1>/dev/null 2>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;73;fprintf(stderr,local_30,local_44,local_40,local_acc);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
wanip_detect;main_004009fc.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;36;signal(0xe,FUN_00400c2c);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;__stream = fopen("/tmp/sys_env","rb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;74;sprintf(local_34,local_2c,param_1,local_44,local_40,local_38);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;fread(&local_158,1,0x100,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;74;sprintf(local_34,local_2c,param_1,local_44,local_40,local_38);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;39;fread(&local_158,1,0x100,__stream);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;sprintf(local_34,local_2c,param_1,local_44,local_40,local_38);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;58;memcpy(&local_58,pcVar2,(int)pcVar3 - (int)pcVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-command-injection;75;system(local_34);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;58;memcpy(&local_58,pcVar2,(int)pcVar3 - (int)pcVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_004014ec_004014ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;system(local_34);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-pointer-subtraction;58;memcpy(&local_58,pcVar2,(int)pcVar3 - (int)pcVar2);The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;memcpy(&local_44,pcVar2,(int)pcVar3 - (int)pcVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;78;memcpy(&local_44,pcVar2,(int)pcVar3 - (int)pcVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
userconfig;FUN_00400e00_00400e00.c;external.semgrep-rules-0xdea.c.raptor-pointer-subtraction;78;memcpy(&local_44,pcVar2,(int)pcVar3 - (int)pcVar2);The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;87;memset((void *)((int)&local_1ed0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404b88_00404b88.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;7;pvVar1 = calloc(1,0x10);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;memset(auStack_2a7,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;system("/usr/sbin/msger httpdmgr 0 hrestart 0 0 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004053f0_004053f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;system("/usr/sbin/rtcfg -w 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;system("/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;72;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;89;memset((void *)((int)&local_1eb0 + 1),0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404b88_00404b88.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;pvVar1 = calloc(1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;21;pcVar4 = strdup(pcVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;memset(local_268 + 1,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;41;memset(auStack_443,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00408080_00408080.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;20;cVar1 = param_1[2];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004053f0_004053f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;system("/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;54;memset(acStack_8b,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;73;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404b88_00404b88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;pvVar1 = calloc(1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;92;sprintf((char *)&local_1ed0,"%u.%02d",local_1f24 >> 0x10,local_1f28.s_addr >> 0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;23;pcVar4 = strdup(*(char **)(param_2 + 8));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memset(auStack_227,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;43;memset(&local_444,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;56;memset(auStack_7b,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;memset(auStack_187f,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;73;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;27;pcVar4 = strdup("");The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memset(local_128 + 1,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;64;memset(&local_444,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004082d8_004082d8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;20;memset(param_1,0,0x404);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;58;memset(auStack_5b,0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;105;memset(auStack_1c7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004083c4_004083c4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;memset(&local_818,0,0x800);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;73;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;39;pcVar4 = strdup(pcVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;qryInit_00408500.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;7;pvVar1 = calloc(1,0x404);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;41;local_128);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;67;memset(&local_444,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;65;iVar1 = sscanf(acStack_8b,"%d:%d",&local_98,&local_94);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004083c4_004083c4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;19;__ptr = strdup(param_2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;117;memset(auStack_187f,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;74;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;41;pcVar4 = strdup(*(char **)(param_2 + 8));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;local_128);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004086c4_004086c4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;iVar1 = sprintf((char *)(param_3 + iVar3),"%c%02X",0x25,iVar1,puVar4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;qryInit_00408500.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;pvVar1 = calloc(1,0x404);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;70;memset(&local_444,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;&local_28,&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004083c4_004083c4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;28;pcVar1 = strdup(*ppcVar2);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;119;memset(auStack_1c7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;43;pcVar4 = strdup(*(char **)(param_2 + 0xc));The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-command-injection;42;system(&local_228);The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.;
mdb;qryInit_00408500.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;pvVar1 = calloc(1,0x404);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;73;memset(&local_444,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;local_14,&local_90);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408858_00408858.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;13;pvVar3 = malloc(sVar1 * 3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;131;memset(auStack_187f,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004083c4_004083c4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;31;pcVar1 = strdup(ppcVar2[1]);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;main_00407cd4.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;54;pcVar4 = strdup(pcVar4);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;system(&local_228);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;76;memset(&local_444,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;133;memset(auStack_1c7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;system("/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004089fc_004089fc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;15;cVar1 = param_1[1];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00408858_00408858.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;13;pvVar3 = malloc(sVar1 * 3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;90;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;43;signal(0x10,(__sighandler_t)0x1);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
mdb;FUN_00404e88_00404e88.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;84;system("/etc/init.d/ipv4 restart 2>/dev/null 1>/dev/null &");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;145;memset(auStack_187f,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004054d4_004054d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;85;system("/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408858_00408858.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;pvVar3 = malloc(sVar1 * 3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;91;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;44;system("/etc/init.d/rtmpd-0 stop 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;147;memset(auStack_1c7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00408858_00408858.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;16;pvVar3 = malloc(sVar2 * 3 + 1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00408eac_00408eac.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;7;pcVar1 = strcpy(param_2,param_1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;91;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;system("/etc/init.d/rtspd-0 stop 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408f14_00408f14.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;12;__src = strdup(__dest + sVar1);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;167;sprintf((char *)&local_1eb0,"%d",local_1f28.s_addr);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408eac_00408eac.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;pcVar1 = strcpy(param_2,param_1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;system("/etc/init.d/httpd-0 reload 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408858_00408858.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;16;pvVar3 = malloc(sVar2 * 3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;91;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00408f14_00408f14.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;13;strcpy(__dest,param_3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;185;sprintf((char *)&local_1eb0,"%d",local_1f28.s_addr);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00409394_00409394.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;__stream = fopen(param_1,"rt");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004095f0_004095f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;32;memset(auStack_5e7,0,0x5b3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;92;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;system("/etc/init.d/https-0 reload 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408858_00408858.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;16;pvVar3 = malloc(sVar2 * 3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408f14_00408f14.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;strcpy(__dest,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004098b8_004098b8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;30;sVar3 = recv(param_1,__buf,1,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;205;memset((void *)((int)&local_1ed0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00409394_00409394.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;pcVar4 = fgets(&DAT_0041c9f0,0x200,__stream);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;28;memset(acStack_2001c,0,0x20000);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004095f0_004095f0.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;56;,param_2,param_3,sVar4,param_2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;92;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;48;system("/etc/init.d/rtspd-0 start 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408f14_00408f14.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;14;strcat(__dest,__src);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_004098b8_004098b8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;sVar3 = recv(param_1,__buf,1,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;207;memset(&local_1d7f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;33;"xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"",pcVar1);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;unlink("/tmp/.hnap_push_event.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004095f0_004095f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;56;,param_2,param_3,sVar4,param_2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;94;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00404c1c_00404c1c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;49;system("/etc/init.d/rtmpd-0 start 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;SetNotifierSettingsHandle_0040a2d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;unlink("/tmp/.hnap_set_notifier.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00408f14_00408f14.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;strcat(__dest,__src);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;210;(uint)local_1d7e,(uint)local_1d7d,(uint)local_1d7c,(uint)local_1d7b);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;SetDCHPolicyHandle_0040a4e0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;unlink("/tmp/.hnap_set_policy.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;"xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"",pcVar1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;108;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004095f0_004095f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;68;sVar5 = 0x5b4;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;__s = fopen("/tmp/.hnap_push_event.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;SetNotifierSettingsHandle_0040a2d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;pFVar1 = fopen("/tmp/.hnap_set_notifier.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;220;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;37;sStack_2065c = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;checkSetPolicyType_0040a6f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;unlink("/tmp/.hnap_set_policy_check.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;SetDCHPolicyHandle_0040a4e0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;pFVar1 = fopen("/tmp/.hnap_set_policy.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;109;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;59;memset(acStack_2002c,0,0x20000);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;SetNotifierSettingsHandle_0040a2d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;unlink("/mnt/flash/config/hnap_notifier.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;221;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;checkSetPolicyType_0040a6f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;__s = fopen("/tmp/.hnap_set_policy_check.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;39;memset((void *)((int)&uStack_205d0 + 1),0,0x5b3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;SetDCHPolicyHandle_0040a4e0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;unlink("/mnt/flash/config/hnap_policy.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;109;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;SetNotifierSettingsHandle_0040a2d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;pFVar1 = fopen("/mnt/flash/config/hnap_notifier.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;64;"xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"",iVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;232;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;42;memset(&uStack_205d0,0,0x5b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;checkSetPolicyType_0040a6f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;unlink("/tmp/.hnap_set_policy_check.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;SetDCHPolicyHandle_0040a4e0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;37;pFVar1 = fopen("/mnt/flash/config/hnap_policy.xml","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;109;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;SetNotifierSettingsHandle_0040a2d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;unlink("/tmp/.hnap_set_notifier.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;64;"xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"",iVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;233;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;sscanf(acStack_205c8,"%d",&iStack_20660);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;SetDCHPolicyHandle_0040a4e0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;unlink("/tmp/.hnap_set_policy.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;110;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;68;sStack_2066c = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;244;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;45;sscanf(acStack_205c8,"%d",&iStack_20660);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;110;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;70;memset((void *)((int)&uStack_205e0 + 1),0,0x5b3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;245;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;49;sscanf(pcVar1 + 0x10,"%d",&sStack_2065c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;112;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;73;memset(&uStack_205e0,0,0x5b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;256;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;49;sscanf(pcVar1 + 0x10,"%d",&sStack_2065c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;126;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;76;sscanf(acStack_205d8,"%d",&iStack_20670);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;257;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;sStack_2065c = 3;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;127;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;268;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;76;sscanf(acStack_205d8,"%d",&iStack_20670);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;53;__n = sStack_2065c;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;127;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;269;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;80;sscanf(pcVar1 + 0x10,"%d",&sStack_2066c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;63;memset(&uStack_205d0,0,0x5b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;127;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;280;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc;80;sscanf(pcVar1 + 0x10,"%d",&sStack_2066c);The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;71;iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),__n,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;281;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;128;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;82;sStack_2066c = 3;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;71;iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),__n,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;292;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;128;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;84;sVar2 = sStack_2066c;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),0x5b4,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;293;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;130;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;94;memset(&uStack_205e0,0,0x5b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;304;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;74;iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),0x5b4,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;144;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;102;iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),sVar2,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;305;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;DoActionHandle_00409a34.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;76;__n = __n - iVar4;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;145;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;102;iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),sVar2,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;316;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;145;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;105;iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),0x5b4,0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;317;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;145;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;105;iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),0x5b4,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;328;memset(auStack_187f,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;146;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;107;sVar2 = sVar2 - iVar7;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;329;memset(&local_1880,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;146;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;PushDCHEventHandle_00409de8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;130;unlink("/tmp/.hnap_push_event.xml");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;360;memset((void *)((int)&local_1ed0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;148;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;362;memset((void *)((int)&local_1eb0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;162;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00403f00_00403f00.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;memcpy(param_2 + 1,param_1 + 4,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;364;memset((void *)((int)&local_1ef0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;163;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00403f00_00403f00.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;memcpy(param_2 + 1,param_1 + 4,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;163;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;366;memset(auStack_1eff,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;163;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;368;memset(auStack_1f0f,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0040423c_0040423c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;piVar2 = (int *)malloc(0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;164;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;370;memset(auStack_187f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00404b54_00404b54.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;memcpy(&fStack_9c,&DAT_0046e6c4,0x80);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0040423c_0040423c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;piVar2 = (int *)malloc(0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;164;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSPlatformMemSame_00404f1c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;iVar1 = memcmp(param_1,param_2,param_3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;372;memset(auStack_c67,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004052b4_004052b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;185;memcpy(local_48.sa_data + 6,&in6addr_any,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00404b54_00404b54.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;memcpy(&fStack_9c,&DAT_0046e6c4,0x80);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00405bfc_00405bfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;24;ppvVar1 = (void **)calloc(1,0x15b4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00405fc4_00405fc4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;31;sVar1 = **(short **)(iVar7 + 0x24);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;166;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;374;memset(auStack_1c7f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00406210_00406210.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;iVar2 = read(param_1,local_1028,0x1000);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004052b4_004052b4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;185;memcpy(local_48.sa_data + 6,&in6addr_any,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00406464_00406464.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;__stream = fopen(param_2,"r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00404b54_00404b54.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;36;memcpy(param_3,&DAT_0046e764,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00405bfc_00405bfc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;24;ppvVar1 = (void **)calloc(1,0x15b4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSPlatformInit_00406620.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;35;cVar1 = *(char *)((int)param_1 + uVar5 + 0x1a59);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;180;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00406210_00406210.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;18;iVar2 = read(param_1,local_1028,0x1000);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSPlatformSendUDP_00406a28.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;memcpy(local_48[0].sa_data + 6,param_6 + 1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;376;memset(&local_1d7f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;recvfrom_flags_00406df0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;memset(param_7,0,0x30);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004052b4_004052b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;196;memcpy(auStack_5c,AllDNSLinkGroup_v6 + 4,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00406464_00406464.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;while (pcVar2 = fgets(acStack_13c,0x100,__stream), pcVar2 != (char *)0x0) {;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00404b54_00404b54.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;36;memcpy(param_3,&DAT_0046e764,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00405bfc_00405bfc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;34;strncpy((char *)((int)ppvVar1 + 0x1552),param_4,0x40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00407108_00407108.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;sprintf(param_2,"%x");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSPlatformInit_00406620.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;49;cVar1 = *(char *)((int)param_1 + iVar2 + 0x1a99);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;181;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00406210_00406210.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;33;sVar1 = *(short *)(piVar3 + 1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNSPlatformSendUDP_00406a28.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;memcpy(local_48[0].sa_data + 6,param_6 + 1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;378;memset(auStack_1e7f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;recvfrom_flags_00406df0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;60;memcpy(param_7 + 4,__cmsg + 1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004052b4_004052b4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;196;memcpy(auStack_5c,AllDNSLinkGroup_v6 + 4,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00406464_00406464.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;28;iVar1 = sscanf(acStack_13c,"%10s %15s",acStack_16c,acStack_160);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00407108_00407108.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-sprintf-snprintf;20;sprintf(param_2,"%s:%x",param_2,0xffff << (0x10U - iVar1 & 0x1f) & 0xffff,puVar3);C standards specify that the results are undefined if a call to sprintf(), snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between objects that overlap (e.g., if the target string array and one of the supplied input arguments refer to the same buffer).;
mDNSClientPosix;mDNSPlatformInit_00406620.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;75;piVar6 = (int *)malloc(8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00405bfc_00405bfc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;34;strncpy((char *)((int)ppvVar1 + 0x1552),param_4,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;181;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;recvfrom_flags_00406df0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;60;memcpy(param_7 + 4,__cmsg + 1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;410;memset(auStack_1f0f,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;56;__stream = fopen("/proc/net/if_inet6","r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;43;sVar10 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;181;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mDNSClientPosix;FUN_00405bfc_00405bfc.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;34;strncpy((char *)((int)ppvVar1 + 0x1552),param_4,0x40);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mDNSClientPosix;FUN_00407108_00407108.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;20;sprintf(param_2,"%s:%x",param_2,0xffff << (0x10U - iVar1 & 0x1f) & 0xffff,puVar3);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;mDNSPlatformInit_00406620.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;75;piVar6 = (int *)malloc(8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00407c70_00407c70.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;8;iVar1 = mDNS_vsnprintf(auStack_210,0x200,param_2,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;412;memset(auStack_1eff,0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;92;local_3c,local_38,local_34,acStack_150), iVar4 != -1) {;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;182;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;44;__size = 0xc80;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00407108_00407108.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;20;sprintf(param_2,"%s:%x",param_2,0xffff << (0x10U - iVar1 & 0x1f) & 0xffff,puVar3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;414;memset((void *)((int)&local_1ef0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;DNSDigest_SignMessage_0040aaec.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;124;local_3b0 = ((short)(void *)(iVar5 + 4) - local_39c._2_2_) + 0x1c;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;95;memcpy(local_54,acStack_150,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;182;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc;45;while (__ptr = (char *)malloc(__size), __ptr != (char *)0x0) {;The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.;
mDNSClientPosix;FUN_0040b388_0040b388.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;13;cVar1 = *(char *)(param_2 + 0x34);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;416;memset((void *)((int)&local_1eb0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_StartNATOperation_internal_0040b6b4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;54;cVar1 = *(char *)(param_2 + 0xd);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;95;memcpy(local_54,acStack_150,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;184;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;45;while (__ptr = (char *)malloc(__size), __ptr != (char *)0x0) {;Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;418;memset((void *)((int)&local_1ed0 + 1),0,0xf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;96;__dest = calloc(1,0x38);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;198;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;45;while (__ptr = (char *)malloc(__size), __ptr != (char *)0x0) {;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;420;memset(auStack_1e7f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;96;__dest = calloc(1,0x38);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0040ddc4_0040ddc4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;36;cVar1 = *(char *)(param_3 + 4);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;199;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;48;iVar5 = ioctl(iVar4,0x8912,&local_7c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0040e3f4_0040e3f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;25;memcpy((void *)(local_37c + 8),param_4,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;422;memset(&local_1d7f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;102;local_60,local_5c,local_58);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;FUN_0040e578_0040e578.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;20;sVar1 = *(short *)(param_2 + 0x120);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;199;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;66;__size = __size + 0x140;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0040e998_0040e998.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;21;param_2 = 3;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0040e3f4_0040e3f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;25;memcpy((void *)(local_37c + 8),param_4,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;424;memset(auStack_1c7f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;102;local_60,local_5c,local_58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;199;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;101;memcpy(local_34,__s,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0040e998_0040e998.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;23;param_2 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_StopNATOperation_internal_0040f8e0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;52;cVar1 = *(char *)(param_2 + 0xd);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;memset(local_4c,0,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;426;memset(auStack_c67,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;200;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mDNSClientPosix;mDNS_AddDNSServer_004102d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;92;memcpy((void *)((int)*ppvVar5 + 0xc),param_5,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;101;memcpy(local_34,__s,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00410980_00410980.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;54;memcpy((void *)(*(int *)(param_2 + 0x4f4) + 4),(void *)(param_1 + 0x21c4),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00410730_00410730.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;28;if (((uVar3 <= uVar4) && (uVar3 + 2 <= uVar4)) && (uVar3 + 4 <= uVar4)) {;The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
mDNSClientPosix;mDNS_StopNATOperation_internal_0040f8e0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;56;sVar2 = *(short *)((int)puVar7 + 0x36);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;108;__dest_00 = calloc(1,0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;428;memset(auStack_187f,0,0x2f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;200;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_AddDNSServer_004102d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;92;memcpy((void *)((int)*ppvVar5 + 0xc),param_5,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;uDNS_ReceiveNATPacket_00411148.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;169;sVar15 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;102;memcpy(auStack_64,__s,0x20);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00410980_00410980.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;54;memcpy((void *)(*(int *)(param_2 + 0x4f4) + 4),(void *)(param_1 + 0x21c4),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;53;memcpy(local_68,puVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StopNATOperation_internal_0040f8e0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;64;sVar2 = *(short *)((int)param_2 + 0x36);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0041213c_0041213c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;memcpy((void *)(param_2 + 0x468),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;108;__dest_00 = calloc(1,0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;202;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;432;strcpy(&local_1f10,pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;FUN_004123b4_004123b4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;18;(sVar1 = *(short *)(param_2 + 0x254), sVar1 != *(short *)(param_3 + 2))))) {;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;102;memcpy(auStack_64,__s,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;uDNS_ReceiveNATPacket_00411148.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;179;sVar15 = *(short *)(param_3 + 2);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;53;memcpy(local_68,puVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;111;memcpy(__dest_00,local_154->ai_addr,0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0041213c_0041213c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;78;memcpy((void *)(param_2 + 0x468),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;432;strcpy(&local_1f10,pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;216;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;StartGetZoneData_00412858.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;memcpy(__dest + 0x30c,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;107;__dest = calloc(1,0x38);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004123b4_004123b4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;53;memcpy((void *)(iVar8 + 0x30c),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetServiceTarget_00412c0c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;64;*(undefined *)(param_1 + 0x21b0));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00412fa0_00412fa0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;54;sVar1 = *(short *)(iVar5 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;memcpy(auStack_58,puVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;111;memcpy(__dest_00,local_154->ai_addr,0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;436;strcpy(&local_1f00,pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;217;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0041347c_0041347c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;35;sVar1 = *(short *)(param_2[9] + 8);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;107;__dest = calloc(1,0x38);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;StartGetZoneData_00412858.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;42;memcpy(__dest + 0x30c,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004123b4_004123b4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;53;memcpy((void *)(iVar8 + 0x30c),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetServiceTarget_00412c0c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;memcpy((void *)(param_1 + 0x2314),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;61;memcpy(auStack_58,puVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;113;puVar2 = (undefined2 *)calloc(1,0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;217;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00413aec_00413aec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;97;memcpy(auStack_40,param_2 + 0x8c3,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;116;memcpy(__dest,__s,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;436;strcpy(&local_1f00,pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0041447c_0041447c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;memcpy(__ptr + 0x8c3,param_5,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetServiceTarget_00412c0c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;72;memcpy((void *)(param_1 + 0x2314),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;69;memcpy(auStack_48,puVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;113;puVar2 = (undefined2 *)calloc(1,0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;440;strcpy((char *)&local_1ef0,pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;116;memcpy(__dest,__s,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00413aec_00413aec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;97;memcpy(auStack_40,param_2 + 0x8c3,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;217;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mDNSClientPosix;FUN_0041447c_0041447c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;memcpy(__ptr + 0x8c3,param_5,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;RecordRegistrationGotZoneData_004157d8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;113;sVar5 = *(short *)((int)puVar10 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;uDNS_ReceiveMsg_004165bc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;111;local_38 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;69;memcpy(auStack_48,puVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;120;memcpy(__dest,acStack_150,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;440;strcpy((char *)&local_1ef0,pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;218;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;117;sVar2 = *(short *)(__s + 0x10);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;startLLQHandshake_004171ac.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;memcpy((void *)(param_2 + 0xf4),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;RecordRegistrationGotZoneData_004157d8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;124;sVar5 = *(short *)((int)puVar10 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;uDNS_recvLLQResponse_00419488.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;126;memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetSecretForDomain_00419c04.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;58;mDNS_snprintf((int)param_2 + 0x14b6,0x20,"%s",param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;77;memcpy(auStack_38,puVar10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;120;memcpy(__dest,acStack_150,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;uDNS_ReceiveMsg_004165bc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;136;local_38 = *(short *)(puVar14[0x40] + 0x30a);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;444;strcpy((char *)&local_1eb0,pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;218;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;122;pvVar9 = calloc(1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;startLLQHandshake_004171ac.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;memcpy((void *)(param_2 + 0xf4),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;RecordRegistrationGotZoneData_004157d8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;226;sVar5 = *(short *)((int)puVar10 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;uDNS_recvLLQResponse_00419488.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;126;memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_SetSecretForDomain_00419c04.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;74;memcpy(param_2 + 0x469,zerov6Addr,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;77;memcpy(auStack_38,puVar10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;122;memcpy(local_70,acStack_150,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;444;strcpy((char *)&local_1eb0,pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;uDNS_ReceiveMsg_004165bc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;173;sVar3 = *(short *)((int)puVar14 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;220;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;122;pvVar9 = calloc(1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;startLLQHandshake_004171ac.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;58;sVar1 = *(short *)(param_2 + 0x120);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;RecordRegistrationGotZoneData_004157d8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;229;sVar5 = *(short *)((int)puVar10 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;uDNS_recvLLQResponse_00419488.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;142;memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetSecretForDomain_00419c04.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;74;memcpy(param_2 + 0x469,zerov6Addr,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;uDNS_ReceiveMsg_004165bc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;229;sVar3 = *(short *)((int)puVar14 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;93;memcpy((void *)(param_1 + 0x21ac),param_2,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;448;strcpy((char *)&local_1ed0,pcVar9);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;FUN_004071f8_004071f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;122;memcpy(local_70,acStack_150,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;234;memset(&local_c57,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;125;memcpy(pvVar9,__s + 0x10,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0041a18c_0041a18c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;7;param_2 = param_2 + -1;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;uDNS_recvLLQResponse_00419488.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;142;memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;93;memcpy((void *)(param_1 + 0x21ac),param_2,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;235;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;448;strcpy((char *)&local_1ed0,pcVar9);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;125;memcpy(pvVar9,__s + 0x10,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;99;__n = 0x10;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;235;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;136;pvVar9 = calloc(1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;465;memset(auStack_187f,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;235;strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;467;memset(auStack_c67,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;102;__n = 0x14;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;136;pvVar9 = calloc(1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat;236;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;105;memcpy(__dest,puVar10,__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;140;memcpy(pvVar9,local_54,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;469;memset(auStack_1c7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_snprintf_0041bb78.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;5;mDNS_vsnprintf();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;236;iVar1 = stat("/mnt/flash/config/mdbcfg.ini",(stat *)local_d58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;105;memcpy(__dest,puVar10,__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-pointer-subtraction;274;6 < (uint)((int)piVar4 - (int)piVar6))) ||;The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;140;memcpy(pvVar9,local_54,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;471;memset(&local_1d7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0041ca04_0041ca04.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;mDNS_snprintf(&DAT_0046e7c8,0x10,"ALG%d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;DNSTypeName_0041caa8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;90;mDNS_snprintf(&DAT_0046e7e8,0x10,"TYPE%d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;110;memcpy((void *)(param_1 + 0x2198),param_4,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;238;pFVar3 = fopen("/mnt/flash/config/mdbcfg.ini","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;314;*(byte *)((int)piVar6 + 5));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;145;pvVar9 = calloc(1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;500;memset(auStack_c67,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0041d1e8_0041d1e8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;10;sVar1 = *(short *)(param_1 + 2);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_SetPrimaryInterfaceInfo_00411b44.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;110;memcpy((void *)(param_1 + 0x2198),param_4,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;372;&local_d70,&local_d6c,&local_d5c,&local_d60,&local_d64,&local_d68);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;330;*(byte *)((int)piVar6 + 0xf));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;145;pvVar9 = calloc(1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;SetNewRData_0041d7b0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;14;sVar1 = *(short *)(param_1 + 2);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;502;memset((void *)((int)&local_1ef0 + 1),0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0041d1e8_0041d1e8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;11;sVar2 = *(short *)(param_2 + 0x254);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;408;memset(local_d58 + 1,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;336;*(byte *)((int)piVar6 + 3));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;148;memcpy(pvVar9,local_54,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0041e054_0041e054.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;35;iVar3 = mDNS_snprintf(param_3 + param_4,0x1ff - param_4,"%s ",uVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;504;memset(auStack_1c7f,0,0x7f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0041e5b0_0041e5b0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;365;__n = (int)puVar10 - (int)param_2;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0041d1e8_0041d1e8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;18;sVar1 = *(short *)(*(int *)(param_1 + 0x20) + 4);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;341;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;414;&local_d5c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;148;memcpy(pvVar9,local_54,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;513;memset(&local_1d7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;355;piVar4 = (int *)mDNS_snprintf(&local_164,300,&DAT_00452658);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;439;system("/etc/init.d/ntpc.sh stop 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;putHINFO_004211c0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;14;local_398 = (ushort)*(byte *)(param_1 + 0x1cd9) + (ushort)*(byte *)(param_1 + 0x1bd9) + 2;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;155;pvVar9 = calloc(1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;515;memset(auStack_187f,0,0x5f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;AnyTypeRecordAnswersQuestion_0042173c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;20;sVar4 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;SameNameRecordAnswersQuestion_004219c0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;25;sVar5 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;390;"<<UNKNOWN FORMAT CONVERSION CODE %%%c>>",iVar13);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;440;system("/usr/sbin/msger sinfo 0 sntpstate 0 0 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;517;memset(auStack_1e7f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;155;pvVar9 = calloc(1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;AnyTypeRecordAnswersQuestion_0042173c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;22;sVar4 = *(short *)(*(int *)(param_1 + 0x24) + 0x13e);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;SameNameRecordAnswersQuestion_004219c0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;27;sVar5 = *(short *)(param_1[9] + 0x13e);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00422460_00422460.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;uVar3 = mDNS_snprintf(param_1,param_2,"%s",iVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;478;iVar5 = mDNS_snprintf(puVar14,(int)pppiVar12 - (int)puVar14,"<<INVALID LABEL LENGTH %u>>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;441;system("/etc/init.d/ntpc.sh start 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;iVar6 = mDNS_snprintf(param_3,0x1ff,"%4d %##s %s ",local_2c,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;525;sprintf((char *)&local_1eb0,"WEPKey%d",local_1f14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;158;memcpy(pvVar9,local_54,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;AnyTypeRecordAnswersQuestion_0042173c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;24;sVar1 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;SameNameRecordAnswersQuestion_004219c0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;29;sVar3 = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;484;iVar5 = mDNS_snprintf(puVar14,(int)pppiVar12 - (int)puVar14,"<<NAME TOO LONG>>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;39;mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,"<< ZERO RDATA LENGTH >>");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;444;system("/etc/init.d/ntpc.sh stop 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;629;iVar1 = sscanf((char *)(local_1ed0 + 4),"%d:%d",&local_1f18,&local_1f1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;158;memcpy(pvVar9,local_54,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;DumpPacket_00423ba4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;35;memset(local_300 + 1,0,0x3f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSSendDNSMessage_004241e4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;28;sVar1 = param_2[5];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;AnyTypeRecordAnswersQuestion_0042173c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;26;sVar1 = *(short *)(*(int *)(param_2 + 0xdc) + 0x13e);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;SameNameRecordAnswersQuestion_004219c0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;31;sVar3 = *(short *)(*(int *)(param_2 + 0xdc) + 0x13e);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_vsnprintf_0041bba0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;489;iVar5 = mDNS_snprintf(puVar14,local_2c,&DAT_00452764,local_38[0]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004247f0_004247f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;pcVar4 = fgets(acStack_430,0x412,param_3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;451;sVar2 = strlen(*(char **)(param_1 + 8));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;mDNS_snprintf(param_3 + iVar6,iVar10,pcVar12,param_2,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;635;sprintf((char *)&local_1eb0,"%d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;165;pvVar9 = calloc(1,0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042494c_0042494c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memset(auStack_417,0,0x3f0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;DumpPacket_00423ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;iVar3 = mDNS_snprintf(auStack_380,0x40,pcVar11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSSendDNSMessage_004241e4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;46;sVar2 = param_2[5];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004247f0_004247f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;iVar3 = strncmp(acStack_430,param_2,sVar1);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;452;pFVar3 = fopen("/mnt/flash/config/lrmapping.dat","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;165;pvVar9 = calloc(1,0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;55;*(undefined4 *)(param_2 + 0x106),*(undefined4 *)(param_2 + 0x108));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042494c_0042494c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;__stream = fopen(param_2,"r");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;638;sprintf((char *)&local_1eb0,"-%d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSSendDNSMessage_004241e4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;104;sVar2 = param_2[4];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNSPlatformSourceAddrForDest_00424bf4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;32;memcpy(local_3c.sa_data + 6,param_2 + 1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;DumpPacket_00423ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;53;iVar3 = mDNS_snprintf(auStack_380,0x40,"ERROR %d %sing",local_30,pcVar11);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004247f0_004247f0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;strncpy(param_1,acStack_430 + sVar1 + 1,0x3f0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;456;sVar7 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;173;memcpy(*(void **)((int)__dest + 0x24),__s + 0x10,0x1c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;80;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,"%s%#s",pcVar12,puVar17,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;642;sprintf((char *)&local_1eb0,"%d",local_1f18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSPlatformSourceAddrForDest_00424bf4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;32;memcpy(local_3c.sa_data + 6,param_2 + 1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;DumpPacket_00423ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;58;iVar3 = mDNS_snprintf(auStack_340,0x40,&DAT_0045409c,param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004247f0_004247f0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;strncpy(param_1,acStack_430 + sVar1 + 1,0x3f0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;670;memset(auStack_1e7f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;460;sVar7 = fwrite(pvVar8,1,sVar2,pFVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;get_ifi_info_004076d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;173;memcpy(*(void **)((int)__dest + 0x24),__s + 0x10,0x1c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSPlatformSourceAddrForDest_00424bf4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;59;memcpy(param_1 + 1,local_3c.sa_data + 6,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;99;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;AnonInfoAnswersQuestion_00425620.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;48;iVar2 = mDNSPlatformMemCmp(__s1,__s2,(size_t)__n);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;DumpPacket_00423ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;61;iVar3 = mDNS_snprintf(auStack_340,0x40,"port ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;682;iVar1 = sscanf((char *)(local_1ef0 + 4),"%d:%d",&local_1f18,&local_1f14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;473;sVar2 = strlen(*(char **)(param_1 + 8));The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSPlatformSourceAddrForDest_00424bf4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;59;memcpy(param_1 + 1,local_3c.sa_data + 6,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;AllocateAnonInfo_00425aa4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;43;memcpy(pvVar2,param_4,0x2c);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;122;,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;InitializeAnonInfoForCR_00425eb8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;52;sVar1 = *(short *)((int)puVar6 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;DumpPacket_00423ba4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;65;iVar3 = mDNS_snprintf(local_300,0x40," to %#a:%d",param_7,param_8._0_2_);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;InitializeAnonInfoForQuestion_00425fac.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;49;sVar1 = *(short *)((int)param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;686;sprintf((char *)&local_1ed0,"%d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;474;pFVar3 = fopen("/mnt/flash/config/lrunmapping.dat","wb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;AllocateAnonInfo_00425aa4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;43;memcpy(pvVar2,param_4,0x2c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004262ac_004262ac.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;22;memcpy(local_40,param_1,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;136;iVar6 = mDNS_snprintf(pcVar9,iVar6,pcVar12,puVar17,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;689;sprintf((char *)&local_1ed0,"-%d");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;478;sVar7 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00426808_00426808.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;19;memcpy((void *)(*(int *)(iVar1 + 0xa48) + 0x108),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;143;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004262ac_004262ac.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;22;memcpy(local_40,param_1,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;693;sprintf((char *)&local_1ed0,"%d",local_1f18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;482;sVar7 = fwrite(pvVar8,1,sVar2,pFVar3);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00426808_00426808.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;19;memcpy((void *)(*(int *)(iVar1 + 0xa48) + 0x108),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;145;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6," Vers %d",param_2[2]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004262ac_004262ac.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;memcpy(auStack_30,param_2,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00427778_00427778.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;13;local_res4 = (short)((uint)param_2 >> 0x10);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;537;system("msger hnap_push_service 0 hreview_policy 0 0&");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;708;pFVar2 = fopen("/mnt/flash/config/lrmapping.dat","rb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;147;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6," Op %d",param_2[3]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004262ac_004262ac.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;23;memcpy(auStack_30,param_2,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00427778_00427778.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;14;local_res8 = (short)((uint)param_3 >> 0x10);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;579;memset(local_d58 + 1,0,0x7f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;715;pcVar9 = (char *)malloc(sVar3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
mDNSClientPosix;FUN_00427d54_00427d54.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;12;sVar1 = *(short *)(param_2 + 0x254);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;149;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6," Err/Port %d",param_2[4]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat;676;strcpy(local_34,(char *)piVar10[iVar1 + 0x81]);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;FUN_00427778_00427778.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;21;sVar1 = *(short *)puVar3[0x36];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;715;pcVar9 = (char *)malloc(sVar3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_NewMessageID_00428b8c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;11;sVar2 = mDNSRandom(0xfffe);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;153;*(undefined4 *)(param_2 + 6));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;676;strcpy(local_34,(char *)piVar10[iVar1 + 0x81]);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;718;sVar6 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00427778_00427778.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;26;sVar1 = *(short *)(puVar3 + 0x44);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004292f4_004292f4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;9;if (((*(char *)(param_2 + 4) == -0x10) || (sVar1 = *(short *)(param_2 + 6), sVar1 == 1)) ||;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00429428_00429428.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;18;sVar1 = *(short *)((int)puVar4 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;170;iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10," Trace",0xfde9,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;710;sprintf(&local_c58,"WEPKey%d",local_d70);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042989c_0042989c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;memcpy(__dest,param_6,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;729;sVar6 = fread(pcVar9,1,sVar3,pFVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;DomainEnumQuery_00429e8c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;11;memcpy(__dest,&PTR_DAT_0046e060,0x18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;173;*(byte *)(param_2 + 2));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042a238_0042a238.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;42;sVar1 = *(short *)(param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042a73c_0042a73c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;15;sVar1 = *(short *)((int)puVar4 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042989c_0042989c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;78;memcpy(__dest,param_6,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;729;sVar6 = fread(pcVar9,1,sVar3,pFVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;730;sprintf(&local_c58,"WEPKey%d",local_d78);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042a844_0042a844.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;14;cVar3 = *(char *)(param_2 + 4);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042a978_0042a978.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;27;cVar13 = (char)(uVar11 >> 8);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;DomainEnumQuery_00429e8c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;11;memcpy(__dest,&PTR_DAT_0046e060,0x18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042b05c_0042b05c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;40;memcpy(&local_28,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;181;iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10," Owner",4,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042a73c_0042a73c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;26;sVar1 = *(short *)((int)puVar4 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042989c_0042989c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;136;memcpy(&local_58,param_6,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;729;sVar6 = fread(pcVar9,1,sVar3,pFVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;752;sprintf(&local_c58,"WEPKey%d",local_d70);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042a844_0042a844.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;17;cVar3 = *(char *)(param_2 + 4);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042b424_0042b424.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;memcpy(&local_54,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StopQuery_internal_0042b718.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;49;memcpy(puVar7 + 0x3d,param_2 + 0x3d,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042b05c_0042b05c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;memcpy(&local_28,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;184;);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042989c_0042989c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;136;memcpy(&local_58,param_6,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;756;memset(auStack_187f,0,0x3ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_004057f4_004057f4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;772;sprintf(&local_c58,"WEPKey%d",local_d78);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042b424_0042b424.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;41;memcpy(&local_54,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_StopQuery_internal_0042b718.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;49;memcpy(puVar7 + 0x3d,param_2 + 0x3d,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042b05c_0042b05c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;41;memcpy(&local_3c,&local_28,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042c3ac_0042c3ac.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;39;((sVar1 = *(short *)((int)puVar6 + 6), sVar1 == 1 ||;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;187;*(byte *)((int)param_2 + 5));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042989c_0042989c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;160;memcpy(&local_50,param_6,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;758;memset(auStack_c67,0,0xc17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042b424_0042b424.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;42;memcpy(&local_68,&local_54,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;ActivateUnicastRegistration_0042c818.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;13;sVar1 = *(short *)(param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042b05c_0042b05c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;41;memcpy(&local_3c,&local_28,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;189;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6," MAC %.6a",param_2 + 3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042cc08_0042cc08.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;17;sVar1 = *(short *)(param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042989c_0042989c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;160;memcpy(&local_50,param_6,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;760;memset((void *)((int)&local_1ef0 + 1),0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042b424_0042b424.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;42;memcpy(&local_68,&local_54,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042b05c_0042b05c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;43;local_54 = local_58[0];Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042cc08_0042cc08.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;53;sVar1 = *(short *)(param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;762;memset((void *)((int)&local_1ed0 + 1),0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;192;iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10," I-MAC %.6a",param_2 + 6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;764;memset((void *)((int)&local_1eb0 + 1),0,0x1f);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;217;mDNS_snprintf(&DAT_0046e7d8,0x10,"DIG%d",bVar2,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;ReleaseCacheRecord_0042e1b0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;38;sVar1 = *(short *)((int)param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042e080_0042e080.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;24;sVar1 = *(short *)((int)puVar2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042e884_0042e884.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;150;memcpy(puVar7 + 0x28,zerov6Addr,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042ee98_0042ee98.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;72;local_170[0],local_16c,auStack_15c,local_150,local_14c,local_148);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;766;memset(auStack_1e7f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042f54c_0042f54c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;15;mDNS_snprintf(local_a8,0x80,"sleep proxy for %d records");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;222;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,"	%s	%d	%s ",uVar7,uVar16,pcVar12);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042f8fc_0042f8fc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;618;cVar2 = *(char *)((int)puVar22 + iVar27 + 0x154);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042e884_0042e884.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;150;memcpy(puVar7 + 0x28,zerov6Addr,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00431d88_00431d88.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;57;((sVar2 = *(short *)(param_2 + 6), sVar2 == 1 ||;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042ee98_0042ee98.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;72;local_170[0],local_16c,auStack_15c,local_150,local_14c,local_148);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;768;memset(&local_1d7f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004320a0_004320a0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;43;((sVar1 = *(short *)((int)puVar5 + 6), sVar1 == 1 ||;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042f54c_0042f54c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;38;mDNS_snprintf(local_a8,0x80,"%s does not support NetWake",iVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;231;*(byte *)((int)param_2 + iVar6),uVar16,pcVar12);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00432360_00432360.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;56;((sVar2 = *(short *)((int)puVar9 + 6), sVar2 == 1 ||;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004326d4_004326d4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;12;sVar1 = *(short *)(param_2 + 0x254);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0042f8fc_0042f8fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;816;memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042ee98_0042ee98.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;89;local_170[0],local_16c,param_5);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00431d88_00431d88.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;60;cVar6 = -1;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;770;memset(auStack_1c7f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042f54c_0042f54c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;mDNS_snprintf(local_a8,0x80,"No sleep proxy server on %s",iVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;238;,param_2 + 3);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042f8fc_0042f8fc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;816;memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_StartQuery_internal_004329b8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;256;memcpy(param_2 + 0x3d,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004337ec_004337ec.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;14;memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042ee98_0042ee98.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;89;local_170[0],local_16c,param_5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;771;memset(&local_1880,0,0x400);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042f54c_0042f54c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;71;mDNS_snprintf(local_a8,0x80,"No sleep proxy server with better metric on %s",iVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;265;(uVar16 >> 0x10) + uVar16 & 0xffff);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StartQuery_internal_004329b8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;256;memcpy(param_2 + 0x3d,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0042f8fc_0042f8fc.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;835;memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042ee98_0042ee98.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;97;local_11c = (char)sVar4 + '';Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_004337ec_004337ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;14;memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_GetDomains_00433fc4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;773;memset(local_4c,0,0xc18);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00434158_00434158.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;14;sVar1 = *(short *)(*(int *)(param_3 + 0x20) + 8);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;286;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,"%##s ",param_2,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0042f8fc_0042f8fc.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;835;memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004337ec_004337ec.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;43;iVar1 = AllocateAnonInfo(param_2 + 0x154,param_5,sVar2,0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_GetDomains_00433fc4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00434f7c_00434f7c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;12;memcpy(auStack_40,zeroOwner,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;774;memset(&local_1ef0,0,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004350d4_004350d4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;22;if ((param_4 == 0) || (sVar1 = *(short *)(param_2 + 0x254), sVar1 != *(short *)(param_3 + 2))) {;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00434158_00434158.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;15;sVar2 = *(short *)(*(int *)(iVar7 + 0xa48) + 0x118);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;memcpy((void *)(param_2 + 0x3cc),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;304;mDNS_snprintf(&DAT_0046e7d8,0x10,"DIG%d",bVar2,uVar15,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004355d0_004355d0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;121;cVar5 = *(char *)(iVar7 + 0x266);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00434f7c_00434f7c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;12;memcpy(auStack_40,zeroOwner,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;775;memset(&local_1ed0,0,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004350d4_004350d4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;78;memcpy((void *)(iVar5 + 0xa4c),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;46;memcpy((void *)(param_2 + 0x3cc),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;309;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,"	%s  %d  %d ",pcVar12,uVar8,uVar16);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004355d0_004355d0.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;142;cVar5 = *(char *)(iVar7 + 0x266);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00436018_00436018.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;441;memcpy(&local_16c,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;memcpy(param_1 + 5,&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00434f7c_00434f7c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;26;memcpy(auStack_40,puVar2 + 0x13,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;776;memset(&local_1eb0,0,0x20);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004350d4_004350d4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;78;memcpy((void *)(iVar5 + 0xa4c),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreRestartAddressQueries_0043739c.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;75;sVar1 = *(short *)(puVar6 + 0x95);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;79;memcpy((void *)(param_2 + 0x65c),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;313;iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,&DAT_00453a38);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00436018_00436018.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;441;memcpy(&local_16c,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;memcpy(param_1 + 5,&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00434f7c_00434f7c.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;26;memcpy(auStack_40,puVar2 + 0x13,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;777;memset(&local_1e80,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;28;sVar1 = *(short *)(param_1 + 0x7fae);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00436018_00436018.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;442;memcpy(auStack_180,&local_16c,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;79;memcpy((void *)(param_2 + 0x65c),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;135;memcpy(param_1 + 0x866,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;324;*(byte *)((int)param_2 + iVar18),uVar8,uVar16);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;779;memset(local_50,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Deregister_internal_00438e74.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;22;cVar1 = *(char *)(param_2 + 1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;103;memcpy(puVar5,(void *)(param_1 + 0x7fa8),0xb8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00436018_00436018.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;442;memcpy(auStack_180,&local_16c,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;106;memcpy((void *)(param_2 + 0x8ec),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;135;memcpy(param_1 + 0x866,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;328;iVar18 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00439fcc_00439fcc.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;15;cVar1 = *(char *)(puVar4 + 1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;780;memset(&local_1c80,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Deregister_internal_00438e74.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;52;memcpy((void *)((int)param_2 + 0x4e),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;103;memcpy(puVar5,(void *)(param_1 + 0x7fa8),0xb8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00436018_00436018.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;443;memcpy(puVar4,auStack_180,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;103;local_ea = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;106;memcpy((void *)(param_2 + 0x8ec),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;136;memcpy(param_1 + 0x86b,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;335;iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6," ");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043b970_0043b970.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;166;memcpy(local_6c,(void *)(param_2 + 0x16),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;789;,&local_1ef0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;mDNS_Deregister_internal_00438e74.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;52;memcpy((void *)((int)param_2 + 0x4e),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;136;memcpy(puVar5 + 0x17,param_6,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;104;memcpy(local_5c,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00436018_00436018.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;443;memcpy(puVar4,auStack_180,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043b970_0043b970.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;166;memcpy(local_6c,(void *)(param_2 + 0x16),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;136;memcpy((void *)((int)param_3 + 0x104),zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;GetRRDisplayString_rdb_00422548.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;343;mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,"RDLen %d: %s",uVar16,param_2,uVar5);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;136;memcpy(param_1 + 0x86b,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;789;,&local_1ef0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_Deregister_internal_00438e74.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;127;memcpy(ppiVar12 + 0x28,param_2 + 0x28,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043c740_0043c740.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;18;param_1 + 0x1a58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;136;memcpy(puVar5 + 0x17,param_6,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;104;memcpy(local_5c,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043b970_0043b970.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;168;memcpy(local_58,(void *)(param_2 + 0x26),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_StartResolveService_00433b68.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;136;memcpy((void *)((int)param_3 + 0x104),zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;137;memcpy(param_1 + 0x870,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_Deregister_internal_00438e74.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;127;memcpy(ppiVar12 + 0x28,param_2 + 0x28,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;792;,&local_1ed0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;140;sVar1 = *(short *)((int)puVar5 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;105;memcpy(local_58,local_5c,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043cad4_0043cad4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;29;cVar1 = *(char *)(param_2 + 1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043cd50_0043cd50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;305;memcpy(local_30 + 0x28,zerov6Addr,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043b970_0043b970.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;168;memcpy(local_58,(void *)(param_2 + 0x26),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Init_00436e30.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;137;memcpy(param_1 + 0x870,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043e0f8_0043e0f8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;7;memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;792;,&local_1ed0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;105;memcpy(local_58,local_5c,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;CreateNewCacheEntry_00437b18.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;215;__size = DomainNameLengthLimit(param_3[4],param_3[4] + 0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043cad4_0043cad4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;30;cVar2 = *(char *)((int)puVar8 + 0x4d);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043e188_0043e188.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;33;cVar1 = *(char *)((int)puVar7 + 0x4d);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043b970_0043b970.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;169;cVar15 = *(char *)(param_2 + 0x14);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043cd50_0043cd50.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;305;memcpy(local_30 + 0x28,zerov6Addr,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043e3a4_0043e3a4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;34;cVar1 = *(char *)((int)puVar5 + 0x4d);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043e0f8_0043e0f8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;7;memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;795;,&local_1eb0);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;160;local_ea = 0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043e5f8_0043e5f8.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;22;cVar1 = *(char *)((int)puVar4 + 0x4d);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043e188_0043e188.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;34;cVar2 = *(char *)(param_2 + 1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043cad4_0043cad4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;46;memcpy((void *)((int)puVar8 + 0x4e),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043b970_0043b970.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;196;cVar15 = *(char *)(param_2 + 0x17);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043cd50_0043cd50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;390;memcpy(ppiVar17 + 0x28,local_88,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043e3a4_0043e3a4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;35;cVar2 = *(char *)(param_2 + 1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;795;,&local_1eb0);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;CompleteDeregistration_0043e784.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;13;memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;163;memcpy(&local_78,zeroAddr,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043cad4_0043cad4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;46;memcpy((void *)((int)puVar8 + 0x4e),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0043cd50_0043cd50.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;390;memcpy(ppiVar17 + 0x28,local_88,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;CompleteDeregistration_0043e784.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;13;memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;796;sprintf(&local_1880,"{\"ModuleInfo\":[%s,%s,%s]}",&local_1e80,local_50,&local_1c80);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;163;memcpy(&local_78,zeroAddr,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004410b8_004410b8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;247;memcpy((void *)(puVar5[9] + 4),(void *)(puVar14[9] + 4),0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00442f38_00442f38.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;331;(sVar16 = *(short *)(param_1 + 0x7fae), sVar16 != 0xfa)))) {;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043cd50_0043cd50.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;399;memcpy(ppiVar17 + 0x28,onesIPv6Addr,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNS_Register_internal_004463c4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;32;sVar3 = *(short *)((int)param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;164;memcpy(local_5c,&local_78,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;796;sprintf(&local_1880,"{\"ModuleInfo\":[%s,%s,%s]}",&local_1e80,local_50,&local_1c80);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004410b8_004410b8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;247;memcpy((void *)(puVar5[9] + 4),(void *)(puVar14[9] + 4),0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004474d0_004474d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;47;*(undefined *)(param_2 + 0x54a));Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00442f38_00442f38.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;695;sVar16 = *(short *)(param_1 + 0x7fae);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0043cd50_0043cd50.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;399;memcpy(ppiVar17 + 0x28,onesIPv6Addr,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNS_Register_internal_004463c4.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;146;memcpy(param_2 + 0x28,zerov6Addr,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00447a20_00447a20.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;17;memcpy(auStack_50,(void *)(param_1 + 0x1a98),0x40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0043a370_0043a370.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;164;memcpy(local_5c,&local_78,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;848;memset((void *)((int)&local_1ef0 + 1),0,0x17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004474d0_004474d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;51;memcpy((void *)(param_2[0x2ae] + 4),param_2 + 0x54a,0x10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00442f38_00442f38.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;710;sVar16 = *(short *)(param_1 + 0x7fae);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_Register_internal_004463c4.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;146;memcpy(param_2 + 0x28,zerov6Addr,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00448500_00448500.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;137;sVar3 = mDNSPlatformStrLen((char *)param_2[6]);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00447a20_00447a20.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;memcpy(auStack_50,(void *)(param_1 + 0x1a98),0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;849;system("/usr/sbin/makeDevUid 2>/dev/null 1>/dev/null");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00448dac_00448dac.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;21;memcpy(param_3,auStack_2a0,0x40);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_004474d0_004474d0.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;51;memcpy((void *)(param_2[0x2ae] + 4),param_2 + 0x54a,0x10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_00448f3c_00448f3c.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;*(undefined *)(param_1 + 0x2aa0),param_1 + 0x1a58);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00442f38_00442f38.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;1091;sVar16 = 0x10;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;mDNS_Register_internal_004463c4.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;191;sVar3 = *(short *)((int)param_2 + 6);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_00449628_00449628.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;140;cVar1 = *(char *)(param_1 + 0x2aa1);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;864;pFVar2 = fopen("/mnt/flash/config/lrunmapping.dat","rb");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00448dac_00448dac.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memcpy(param_3,auStack_2a0,0x40);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_004474d0_004474d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;64;mDNS_snprintf(local_70 + 0x40,10,"ip6.arpa.");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;233;memcpy(&uStack_478,zeroOwner,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;ExampleClientEventLoop_0044b604.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;13;signal(2,(__sighandler_t)&LAB_0044b5f0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
mDNSClientPosix;FUN_00442f38_00442f38.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;1098;(sVar16 = 0x21, ppppppppiVar20 == (int ********)0x1194)) goto LAB_004452d0;Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-integer-wraparound;871;pcVar9 = (char *)malloc(sVar3 + 1);The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.;
mDNSClientPosix;main_0044b7d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;23;iVar2 = getopt(param_1,param_2,"v:t:d:s:f:p:");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_00449628_00449628.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;183;cVar1 = *(char *)(param_1 + 0x275);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mDNSClientPosix;FUN_0044be14_0044be14.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;16;memset(auStack_1390,0,0x91c);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;233;memcpy(&uStack_478,zeroOwner,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;ExampleClientEventLoop_0044b604.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;14;signal(0xf,(__sighandler_t)&LAB_0044b5f0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;21;memset(auStack_21f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;main_0044b7d0.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;DAT_0046e830 = fopen(DAT_0046e834,"w");Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;871;pcVar9 = (char *)malloc(sVar3 + 1);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0044be14_0044be14.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;17;memset(auStack_a74,0,0xa54);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;300;memcpy(&uStack_478,puVar19 + 2,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;ExampleClientEventLoop_0044b604.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-signal;15;signal(0xe,(__sighandler_t)&LAB_0044b5f0);The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;30;memset(&local_220,0,0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;main_0044b7d0.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;117;fprintf(stderr,pcVar1,PTR_ProgramName_0046e0d8);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;874;sVar6 = 0;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0044be14_0044be14.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;29;memcpy(auStack_1390,(void *)(*(int *)(param_3 + 0x20) + 4),0x100);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;33;strncpy(&local_220,(char *)(iVar4 + 0x11d),__n);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;300;memcpy(&uStack_478,puVar19 + 2,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;main_0044b7d0.c;external.semgrep-rules-0xdea.c.raptor-format-string-bugs;125;fprintf(stderr,pcVar1,puVar4);The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;885;sVar6 = fread(pcVar9,1,sVar3,pFVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0044be14_0044be14.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;29;memcpy(auStack_1390,(void *)(*(int *)(param_3 + 0x20) + 4),0x100);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;33;strncpy(&local_220,(char *)(iVar4 + 0x11d),__n);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-integer-truncation;376;sVar1 = *(short *)(param_1 + 0x7fae);Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;885;sVar6 = fread(pcVar9,1,sVar3,pFVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;40;memset(auStack_11f,0,0xff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;377;__n = 0x200;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;885;sVar6 = fread(pcVar9,1,sVar3,pFVar2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf;59;(uint)*(byte *)(iVar4 + 0x10a),(uint)*(byte *)(iVar4 + 0x10b),(uint)uVar2);A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;378;if ((sVar1 != 0x11) && ((__n = 0x202, sVar1 != 0x1a && (__n = 0x214, sVar1 != 6)))) {;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;898;memset(auStack_1c7f,0,0x3ff);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;378;if ((sVar1 != 0x11) && ((__n = 0x202, sVar1 != 0x1a && (__n = 0x214, sVar1 != 6)))) {;The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;FUN_0044bfd8_0044bfd8.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;59;(uint)*(byte *)(iVar4 + 0x10a),(uint)*(byte *)(iVar4 + 0x10b),(uint)uVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;900;memset(&local_1d7f,0,0xbf);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;379;__n = (size_t)*(ushort *)(param_1 + 0x7fb8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;901;pcVar9 = (char *)malloc(0x5554);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;901;pcVar9 = (char *)malloc(0x5554);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;421;memcpy((void *)((int)pvVar5 + 0x4c),local_4c,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;906;pFVar2 = tmpfile();Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;421;memcpy((void *)((int)pvVar5 + 0x4c),local_4c,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;925;pcVar9 = fgets(&local_1c80,0x400,pFVar2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;601;memcpy((void *)((int)puVar22 + 0x4e),&zeroEthAddr,6);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;929;memset(&local_1880,0,0x6b);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;601;memcpy((void *)((int)puVar22 + 0x4e),&zeroEthAddr,6);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;930;strncpy(&local_1880,&local_1c80,4);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;635;iVar3 = mDNS_snprintf(auStack_464,0x80,&DAT_0045d240,uVar23);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;930;strncpy(&local_1880,&local_1c80,4);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mDNSClientPosix;mDNSCoreReceive_00449d08.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;641;iVar3 = mDNS_snprintf(puVar14,0x80," %02X",*puVar18);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;930;strncpy(&local_1880,&local_1c80,4);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;931;strncpy(acStack_187b,acStack_1c7c,0x21);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;931;strncpy(acStack_187b,acStack_1c7c,0x21);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;931;strncpy(acStack_187b,acStack_1c7c,0x21);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;931;strncpy(acStack_187b,acStack_1c7c,0x21);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;932;strncpy(acStack_1859,acStack_1c5b,0x14);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;932;strncpy(acStack_1859,acStack_1c5b,0x14);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;932;strncpy(acStack_1859,acStack_1c5b,0x14);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;932;strncpy(acStack_1859,acStack_1c5b,0x14);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;933;strncpy(acStack_1844,acStack_1c47,0x17);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;933;strncpy(acStack_1844,acStack_1c47,0x17);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;933;strncpy(acStack_1844,acStack_1c47,0x17);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;933;strncpy(acStack_1844,acStack_1c47,0x17);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;934;strncpy(acStack_182c,acStack_1c30,10);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;934;strncpy(acStack_182c,acStack_1c30,10);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;934;strncpy(acStack_182c,acStack_1c30,10);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;934;strncpy(acStack_182c,acStack_1c30,10);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy;935;strncpy(acStack_1821,acStack_1c26,8);The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;935;strncpy(acStack_1821,acStack_1c26,8);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;935;strncpy(acStack_1821,acStack_1c26,8);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;935;strncpy(acStack_1821,acStack_1c26,8);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-interesting-api-calls;936;strncpy(acStack_1818,acStack_1c1e,2);Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;936;strncpy(acStack_1818,acStack_1c1e,2);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy;936;strncpy(acStack_1818,acStack_1c1e,2);If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.;
mdb;FUN_00401920_00401920.c;external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion;947;memset(&local_1d80,0,0xc0);The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.;
