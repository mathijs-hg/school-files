{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["/tmp/haruspex_ipfind/FUN_00400d10_00400d10.c", "/tmp/haruspex_ipfind/FUN_00400de4_00400de4.c", "/tmp/haruspex_ipfind/FUN_00400e50_00400e50.c", "/tmp/haruspex_ipfind/FUN_00400f50_00400f50.c", "/tmp/haruspex_ipfind/FUN_004010c0_004010c0.c", "/tmp/haruspex_ipfind/FUN_00401120_00401120.c", "/tmp/haruspex_ipfind/FUN_00401240_00401240.c", "/tmp/haruspex_ipfind/FUN_004013d0_004013d0.c", "/tmp/haruspex_ipfind/FUN_004013f4_004013f4.c", "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "/tmp/haruspex_ipfind/FUN_00401df4_00401df4.c", "/tmp/haruspex_ipfind/FUN_004020c8_004020c8.c", "/tmp/haruspex_ipfind/FUN_00402198_00402198.c", "/tmp/haruspex_ipfind/FUN_00402790_00402790.c", "/tmp/haruspex_ipfind/_fini_00402a80.c", "/tmp/haruspex_ipfind/_ftext_00400cb0.c", "/tmp/haruspex_ipfind/_init_00400c34.c", "/tmp/haruspex_ipfind/main_00402210.c", "/tmp/haruspex_ipfind/readUpFwStatus_00401090.c"]}, "results": [{"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 28, "line": 14, "offset": 261}, "extra": {"engine_kind": "OSS", "fingerprint": "9491f4c3400f39a2126890a0d0909caa9cf6260aa28ba6bc5093d5f56a2649a37788e7d4c825e9608b1f3f1c8255dee94d11a5def1495d63546423351f70ef75_0", "is_ignored": false, "lines": "  memset(auStack_4f,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 14, "offset": 255}, "start": {"col": 21, "line": 14, "offset": 254}}, "$DST": {"abstract_content": "auStack_4f", "end": {"col": 20, "line": 14, "offset": 253}, "start": {"col": 10, "line": 14, "offset": 243}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 27, "line": 14, "offset": 260}, "start": {"col": 23, "line": 14, "offset": 256}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00400f50_00400f50.c", "start": {"col": 3, "line": 14, "offset": 236}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 55, "line": 12, "offset": 208}, "extra": {"engine_kind": "OSS", "fingerprint": "aed63094449171afca13b337508695719ee03827887ba67c58411663a2bafc488af3449c5679b18e80a1e855d76d91a95e76aa4e24afbb4b3cc4b417af48fead_0", "is_ignored": false, "lines": "  sprintf(acStack_90,\"/var/run/ipfind-%s.pid\",param_1);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"/var/run/ipfind-%s.pid\"", "end": {"col": 25, "line": 1, "offset": 24}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "acStack_90", "end": {"col": 21, "line": 12, "offset": 174}, "start": {"col": 11, "line": 12, "offset": 164}}, "$FMT": {"abstract_content": "\"/var/run/ipfind-%s.pid\"", "end": {"col": 46, "line": 12, "offset": 199}, "start": {"col": 22, "line": 12, "offset": 175}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401120_00401120.c", "start": {"col": 3, "line": 12, "offset": 156}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 12, "offset": 208}, "extra": {"engine_kind": "OSS", "fingerprint": "f40096a926a6e1abe6d1d07318b81d00d647fc31d525e9d45bd3d15dc3ae1723eb4df44d553cdcd8192f4b879f3bd07d402b21a59deec126f4d05af628647c80_0", "is_ignored": false, "lines": "  sprintf(acStack_90,\"/var/run/ipfind-%s.pid\",param_1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 10, "line": 12, "offset": 163}, "start": {"col": 3, "line": 12, "offset": 156}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401120_00401120.c", "start": {"col": 3, "line": 12, "offset": 156}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 13, "offset": 247}, "extra": {"engine_kind": "OSS", "fingerprint": "579dc91daa715b616148cbbf9c1a5284a8397236786c2b4196d289858f1a72e0ae9621eea6a930489370247764a5ef8b68a85fb193b0a06390e464480ec9d82a_0", "is_ignored": false, "lines": "  __fd = open(acStack_90,0x501,0x284);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "open", "end": {"col": 14, "line": 13, "offset": 223}, "start": {"col": 10, "line": 13, "offset": 219}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401120_00401120.c", "start": {"col": 10, "line": 13, "offset": 219}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 35, "line": 26, "offset": 543}, "extra": {"engine_kind": "OSS", "fingerprint": "f40096a926a6e1abe6d1d07318b81d00d647fc31d525e9d45bd3d15dc3ae1723eb4df44d553cdcd8192f4b879f3bd07d402b21a59deec126f4d05af628647c80_1", "is_ignored": false, "lines": "    sprintf(acStack_90,\"%d\",_Var3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 12, "line": 26, "offset": 520}, "start": {"col": 5, "line": 26, "offset": 513}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401120_00401120.c", "start": {"col": 5, "line": 26, "offset": 513}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 28, "line": 89, "offset": 2355}, "extra": {"engine_kind": "OSS", "fingerprint": "7ba4970fd5c37e9ddcc3e0328b96e8f20518f30e52bb61561a433ae1ccda5ad4e33c60a0d395a66a6ca36b1970d0efb335ed9f15245973e4b561d71d5dad4377_0", "is_ignored": false, "lines": "    system(\"/sbin/reboot&\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 11, "line": 89, "offset": 2338}, "start": {"col": 5, "line": 89, "offset": 2332}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_004013f4_004013f4.c", "start": {"col": 5, "line": 89, "offset": 2332}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 38, "offset": 772}, "extra": {"engine_kind": "OSS", "fingerprint": "d0e2f060c19510c405dd54a4191a15bdf27f3fde8a4e588c34874bfbb1b17f5b5f3c995d4b937bd0cab741f7056f1c641b785550dbb6eb2cbee891a7d627f557_0", "is_ignored": false, "lines": "  memset(auStack_357,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 38, "offset": 766}, "start": {"col": 22, "line": 38, "offset": 765}}, "$DST": {"abstract_content": "auStack_357", "end": {"col": 21, "line": 38, "offset": 764}, "start": {"col": 10, "line": 38, "offset": 753}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 28, "line": 38, "offset": 771}, "start": {"col": 24, "line": 38, "offset": 767}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 38, "offset": 746}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 44, "offset": 891}, "extra": {"engine_kind": "OSS", "fingerprint": "c80361d8b913462c075ae72b6822938c4e5fe88e9650c8af9658a0c7e0382e0402e643b84710af6cf6675a0b56ee908e1929e87f11f69c8b8309d2ab85cbf3f0_0", "is_ignored": false, "lines": "  memset(auStack_250,0,0x21d);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 44, "offset": 884}, "start": {"col": 22, "line": 44, "offset": 883}}, "$DST": {"abstract_content": "auStack_250", "end": {"col": 21, "line": 44, "offset": 882}, "start": {"col": 10, "line": 44, "offset": 871}}, "$LEN": {"abstract_content": "0x21d", "end": {"col": 29, "line": 44, "offset": 890}, "start": {"col": 24, "line": 44, "offset": 885}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 44, "offset": 864}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 49, "offset": 1035}, "extra": {"engine_kind": "OSS", "fingerprint": "434f17a672d6a1e4803a388e670892bbbee66a268387d739308a6df7d8d540f71d16fb629d2f6bfe56f5c2e8f0b5d5406b125bbcac11c40f3e96088f75b57380_0", "is_ignored": false, "lines": "  memset(&local_358,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 49, "offset": 1028}, "start": {"col": 21, "line": 49, "offset": 1027}}, "$DST": {"abstract_content": "&local_358", "end": {"col": 20, "line": 49, "offset": 1026}, "start": {"col": 10, "line": 49, "offset": 1016}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 28, "line": 49, "offset": 1034}, "start": {"col": 23, "line": 49, "offset": 1029}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 49, "offset": 1009}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 39, "line": 51, "offset": 1124}, "extra": {"engine_kind": "OSS", "fingerprint": "e205d5422026919ca79f587c40d6151d099077be856be2cd9a370baabc1cfb16df29680b0bab8650026fa20d2309f411f19e43c732068c30783e042b4ce5388b_0", "is_ignored": false, "lines": "  strncpy(acStack_233,&local_358,0x40);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 51, "offset": 1095}, "start": {"col": 3, "line": 51, "offset": 1088}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 51, "offset": 1088}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 51, "offset": 1124}, "extra": {"engine_kind": "OSS", "fingerprint": "e01ce0742dc18b979292df5fc6979035f186a403e13a3858481f0452d2da575f586759dd55e3f0640c0e0d5ae56bbbda7a2b300d01a02f2895d67dd1cdb12b94_0", "is_ignored": false, "lines": "  strncpy(acStack_233,&local_358,0x40);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_233", "end": {"col": 22, "line": 51, "offset": 1107}, "start": {"col": 11, "line": 51, "offset": 1096}}, "$LEN": {"abstract_content": "0x40", "end": {"col": 38, "line": 51, "offset": 1123}, "start": {"col": 34, "line": 51, "offset": 1119}}, "$SRC": {"abstract_content": "&local_358", "end": {"col": 33, "line": 51, "offset": 1118}, "start": {"col": 23, "line": 51, "offset": 1108}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 51, "offset": 1088}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 39, "line": 51, "offset": 1124}, "extra": {"engine_kind": "OSS", "fingerprint": "897c8f7367ef13e7e230cce36997dd8bc6dc5ec62b1d04685735b0cf424729ea8d588783992becd8477d3bd84df052fc8e86bec5a1b6597141e31034ce71763c_0", "is_ignored": false, "lines": "  strncpy(acStack_233,&local_358,0x40);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 51, "offset": 1095}, "start": {"col": 3, "line": 51, "offset": 1088}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 51, "offset": 1088}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 52, "offset": 1154}, "extra": {"engine_kind": "OSS", "fingerprint": "434f17a672d6a1e4803a388e670892bbbee66a268387d739308a6df7d8d540f71d16fb629d2f6bfe56f5c2e8f0b5d5406b125bbcac11c40f3e96088f75b57380_1", "is_ignored": false, "lines": "  memset(&local_358,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 52, "offset": 1147}, "start": {"col": 21, "line": 52, "offset": 1146}}, "$DST": {"abstract_content": "&local_358", "end": {"col": 20, "line": 52, "offset": 1145}, "start": {"col": 10, "line": 52, "offset": 1135}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 28, "line": 52, "offset": 1153}, "start": {"col": 23, "line": 52, "offset": 1148}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 52, "offset": 1128}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 82, "line": 56, "offset": 1379}, "extra": {"engine_kind": "OSS", "fingerprint": "8b48d94bf3612c9e5481d5fca8fe4a515f1e2b11d6fc5e28b8a72fa1e9e83fc76e17e5f134da75aad4890a4e074a598ea63e27aeed1e7ca1bdec9e31196d0c2c_0", "is_ignored": false, "lines": "  sprintf(acStack_1c3,\"%u.%u.%u\",(uint)local_2c,(uint)local_2a,(uint)local_28[0]);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 10, "line": 56, "offset": 1307}, "start": {"col": 3, "line": 56, "offset": 1300}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 56, "offset": 1300}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 78, "offset": 2493}, "extra": {"engine_kind": "OSS", "fingerprint": "434f17a672d6a1e4803a388e670892bbbee66a268387d739308a6df7d8d540f71d16fb629d2f6bfe56f5c2e8f0b5d5406b125bbcac11c40f3e96088f75b57380_2", "is_ignored": false, "lines": "  memset(&local_358,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 78, "offset": 2486}, "start": {"col": 21, "line": 78, "offset": 2485}}, "$DST": {"abstract_content": "&local_358", "end": {"col": 20, "line": 78, "offset": 2484}, "start": {"col": 10, "line": 78, "offset": 2474}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 28, "line": 78, "offset": 2492}, "start": {"col": 23, "line": 78, "offset": 2487}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 78, "offset": 2467}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 39, "line": 80, "offset": 2577}, "extra": {"engine_kind": "OSS", "fingerprint": "e205d5422026919ca79f587c40d6151d099077be856be2cd9a370baabc1cfb16df29680b0bab8650026fa20d2309f411f19e43c732068c30783e042b4ce5388b_1", "is_ignored": false, "lines": "  strncpy(acStack_1f3,&local_358,0x20);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 80, "offset": 2548}, "start": {"col": 3, "line": 80, "offset": 2541}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 80, "offset": 2541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 80, "offset": 2577}, "extra": {"engine_kind": "OSS", "fingerprint": "16eacb8233cf5e5ba4a613f44d7e85832c112321536bff316ed5802dd9659c3c1a7f67b42953c17e48d621b6cefcf4bf2a68d52e6e4521819e753541c2921e92_0", "is_ignored": false, "lines": "  strncpy(acStack_1f3,&local_358,0x20);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_1f3", "end": {"col": 22, "line": 80, "offset": 2560}, "start": {"col": 11, "line": 80, "offset": 2549}}, "$LEN": {"abstract_content": "0x20", "end": {"col": 38, "line": 80, "offset": 2576}, "start": {"col": 34, "line": 80, "offset": 2572}}, "$SRC": {"abstract_content": "&local_358", "end": {"col": 33, "line": 80, "offset": 2571}, "start": {"col": 23, "line": 80, "offset": 2561}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 80, "offset": 2541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 39, "line": 80, "offset": 2577}, "extra": {"engine_kind": "OSS", "fingerprint": "897c8f7367ef13e7e230cce36997dd8bc6dc5ec62b1d04685735b0cf424729ea8d588783992becd8477d3bd84df052fc8e86bec5a1b6597141e31034ce71763c_1", "is_ignored": false, "lines": "  strncpy(acStack_1f3,&local_358,0x20);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 80, "offset": 2548}, "start": {"col": 3, "line": 80, "offset": 2541}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 80, "offset": 2541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 81, "offset": 2607}, "extra": {"engine_kind": "OSS", "fingerprint": "434f17a672d6a1e4803a388e670892bbbee66a268387d739308a6df7d8d540f71d16fb629d2f6bfe56f5c2e8f0b5d5406b125bbcac11c40f3e96088f75b57380_3", "is_ignored": false, "lines": "  memset(&local_358,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 81, "offset": 2600}, "start": {"col": 21, "line": 81, "offset": 2599}}, "$DST": {"abstract_content": "&local_358", "end": {"col": 20, "line": 81, "offset": 2598}, "start": {"col": 10, "line": 81, "offset": 2588}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 28, "line": 81, "offset": 2606}, "start": {"col": 23, "line": 81, "offset": 2601}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 81, "offset": 2581}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 39, "line": 83, "offset": 2698}, "extra": {"engine_kind": "OSS", "fingerprint": "e205d5422026919ca79f587c40d6151d099077be856be2cd9a370baabc1cfb16df29680b0bab8650026fa20d2309f411f19e43c732068c30783e042b4ce5388b_2", "is_ignored": false, "lines": "  strncpy(acStack_1d3,&local_358,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 83, "offset": 2669}, "start": {"col": 3, "line": 83, "offset": 2662}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 83, "offset": 2662}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 83, "offset": 2698}, "extra": {"engine_kind": "OSS", "fingerprint": "64787721a2d30295e9d78fc9a2e882bb1bcdcb0bb87feeea6b9e98f580105333494b4a41700d2478783be259894ecaed2888ae8bc363ecaca236012815dd8534_0", "is_ignored": false, "lines": "  strncpy(acStack_1d3,&local_358,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_1d3", "end": {"col": 22, "line": 83, "offset": 2681}, "start": {"col": 11, "line": 83, "offset": 2670}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 38, "line": 83, "offset": 2697}, "start": {"col": 34, "line": 83, "offset": 2693}}, "$SRC": {"abstract_content": "&local_358", "end": {"col": 33, "line": 83, "offset": 2692}, "start": {"col": 23, "line": 83, "offset": 2682}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 83, "offset": 2662}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 39, "line": 83, "offset": 2698}, "extra": {"engine_kind": "OSS", "fingerprint": "897c8f7367ef13e7e230cce36997dd8bc6dc5ec62b1d04685735b0cf424729ea8d588783992becd8477d3bd84df052fc8e86bec5a1b6597141e31034ce71763c_2", "is_ignored": false, "lines": "  strncpy(acStack_1d3,&local_358,0x10);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 83, "offset": 2669}, "start": {"col": 3, "line": 83, "offset": 2662}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 83, "offset": 2662}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 84, "offset": 2728}, "extra": {"engine_kind": "OSS", "fingerprint": "434f17a672d6a1e4803a388e670892bbbee66a268387d739308a6df7d8d540f71d16fb629d2f6bfe56f5c2e8f0b5d5406b125bbcac11c40f3e96088f75b57380_4", "is_ignored": false, "lines": "  memset(&local_358,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 84, "offset": 2721}, "start": {"col": 21, "line": 84, "offset": 2720}}, "$DST": {"abstract_content": "&local_358", "end": {"col": 20, "line": 84, "offset": 2719}, "start": {"col": 10, "line": 84, "offset": 2709}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 28, "line": 84, "offset": 2727}, "start": {"col": 23, "line": 84, "offset": 2722}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 84, "offset": 2702}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 86, "offset": 2835}, "extra": {"engine_kind": "OSS", "fingerprint": "e205d5422026919ca79f587c40d6151d099077be856be2cd9a370baabc1cfb16df29680b0bab8650026fa20d2309f411f19e43c732068c30783e042b4ce5388b_3", "is_ignored": false, "lines": "  strncpy((char *)((int)&uStack_1b8 + 3),&local_358,0x40);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 86, "offset": 2787}, "start": {"col": 3, "line": 86, "offset": 2780}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 86, "offset": 2780}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 58, "line": 86, "offset": 2835}, "extra": {"engine_kind": "OSS", "fingerprint": "282198b001720a8fc9c9b7d125cdef2f8236b56ebd62990fbd952e7c35394b4ff610950431b13f6e17d463a20b9088f28cfe4a7abf19e9d2264976f5bd8c3b10_0", "is_ignored": false, "lines": "  strncpy((char *)((int)&uStack_1b8 + 3),&local_358,0x40);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(char*(int&uStack_1b8+3", "end": {"col": 40, "line": 86, "offset": 2817}, "start": {"col": 11, "line": 86, "offset": 2788}}, "$LEN": {"abstract_content": "0x40", "end": {"col": 57, "line": 86, "offset": 2834}, "start": {"col": 53, "line": 86, "offset": 2830}}, "$SRC": {"abstract_content": "&local_358", "end": {"col": 52, "line": 86, "offset": 2829}, "start": {"col": 42, "line": 86, "offset": 2819}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 86, "offset": 2780}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 58, "line": 86, "offset": 2835}, "extra": {"engine_kind": "OSS", "fingerprint": "897c8f7367ef13e7e230cce36997dd8bc6dc5ec62b1d04685735b0cf424729ea8d588783992becd8477d3bd84df052fc8e86bec5a1b6597141e31034ce71763c_3", "is_ignored": false, "lines": "  strncpy((char *)((int)&uStack_1b8 + 3),&local_358,0x40);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 10, "line": 86, "offset": 2787}, "start": {"col": 3, "line": 86, "offset": 2780}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_0040172c_0040172c.c", "start": {"col": 3, "line": 86, "offset": 2780}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 44, "offset": 907}, "extra": {"engine_kind": "OSS", "fingerprint": "e8bd5421bf314fbb3436f9826ea37b6aedbb8ee647c092b3013b1acea26fb5cf92c1a3b0a72bb8f150b3d8854d78ec9eaba8747e326cd20dbb5e87d3c5a45b4d_0", "is_ignored": false, "lines": "    strncpy(acStack_34,ifname,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 44, "offset": 883}, "start": {"col": 5, "line": 44, "offset": 876}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401df4_00401df4.c", "start": {"col": 5, "line": 44, "offset": 876}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 44, "offset": 907}, "extra": {"engine_kind": "OSS", "fingerprint": "bbca6926c0f248c7eccb4cd3ed8d09cd04177d9c390d7fc697b66d91cd09b6afb4d345d113b65f015caead4fb072426065e62b1b1ec71b48a1768dc30bbc6697_0", "is_ignored": false, "lines": "    strncpy(acStack_34,ifname,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_34", "end": {"col": 23, "line": 44, "offset": 894}, "start": {"col": 13, "line": 44, "offset": 884}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 35, "line": 44, "offset": 906}, "start": {"col": 31, "line": 44, "offset": 902}}, "$SRC": {"abstract_content": "ifname", "end": {"col": 30, "line": 44, "offset": 901}, "start": {"col": 24, "line": 44, "offset": 895}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401df4_00401df4.c", "start": {"col": 5, "line": 44, "offset": 876}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 36, "line": 44, "offset": 907}, "extra": {"engine_kind": "OSS", "fingerprint": "e6c218bd67dea7f3d1ecac900f392475619345cc10a7bcff2c4013e2c46fde521b0d8126ab763b524d631858afb036f58598650e8c1573c4fd37d14a8ce65b9e_0", "is_ignored": false, "lines": "    strncpy(acStack_34,ifname,0x10);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 44, "offset": 883}, "start": {"col": 5, "line": 44, "offset": 876}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00401df4_00401df4.c", "start": {"col": 5, "line": 44, "offset": 876}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 55, "line": 7, "offset": 124}, "extra": {"engine_kind": "OSS", "fingerprint": "e28d2a957ac32c243784b772da827d137965854f94f7813c4d92418698e43eb359ff7474ce79af29f20fc718cf71d9d3e02d2a6ac21d869fbb70d00632795ded_0", "is_ignored": false, "lines": "  sprintf(acStack_88,\"/var/run/ipfind-%s.pid\",param_1);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"/var/run/ipfind-%s.pid\"", "end": {"col": 25, "line": 1, "offset": 24}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "acStack_88", "end": {"col": 21, "line": 7, "offset": 90}, "start": {"col": 11, "line": 7, "offset": 80}}, "$FMT": {"abstract_content": "\"/var/run/ipfind-%s.pid\"", "end": {"col": 46, "line": 7, "offset": 115}, "start": {"col": 22, "line": 7, "offset": 91}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00402198_00402198.c", "start": {"col": 3, "line": 7, "offset": 72}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 7, "offset": 124}, "extra": {"engine_kind": "OSS", "fingerprint": "2dca0dccab6bbe6335249955a31ca880bdf539c2d292b4d5fa13a339a8f08cd65d26a13a0b931ead54f49dfaa579fae7701937aa1d1552ddbbfb4c311b7fd676_0", "is_ignored": false, "lines": "  sprintf(acStack_88,\"/var/run/ipfind-%s.pid\",param_1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 10, "line": 7, "offset": 79}, "start": {"col": 3, "line": 7, "offset": 72}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00402198_00402198.c", "start": {"col": 3, "line": 7, "offset": 72}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 21, "line": 9, "offset": 186}, "extra": {"engine_kind": "OSS", "fingerprint": "1c58e5bfb597a41fc4b6ea109296446d1df4b15ba78c9e0141015e72ac9396a67323815cbda4922194acb86e290cb887b1e583c29b412eb91fa5c8b519c1500c_0", "is_ignored": false, "lines": "  unlink(acStack_88);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 9, "offset": 174}, "start": {"col": 3, "line": 9, "offset": 168}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/FUN_00402198_00402198.c", "start": {"col": 3, "line": 9, "offset": 168}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 62, "offset": 1499}, "extra": {"engine_kind": "OSS", "fingerprint": "fbabb3596240a536d2799d9707d2dbf62ba36e46740641fac9e125452475ff5763825e6797686783bdfd892836ec6fceff73f365eb42073ad237c33d67a06f74_0", "is_ignored": false, "lines": "        strncpy(acStack_8f4,ifname,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 16, "line": 62, "offset": 1474}, "start": {"col": 9, "line": 62, "offset": 1467}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/main_00402210.c", "start": {"col": 9, "line": 62, "offset": 1467}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 41, "line": 62, "offset": 1499}, "extra": {"engine_kind": "OSS", "fingerprint": "7e0eca1d1b765570a5a0be6fe854ed062c779836fdae2ca3eb9a33dd1f324e5d534cacab17c7c6b5a6beb1562778037cb68ae65949d8994df775f06f5035b113_0", "is_ignored": false, "lines": "        strncpy(acStack_8f4,ifname,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_8f4", "end": {"col": 28, "line": 62, "offset": 1486}, "start": {"col": 17, "line": 62, "offset": 1475}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 40, "line": 62, "offset": 1498}, "start": {"col": 36, "line": 62, "offset": 1494}}, "$SRC": {"abstract_content": "ifname", "end": {"col": 35, "line": 62, "offset": 1493}, "start": {"col": 29, "line": 62, "offset": 1487}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/main_00402210.c", "start": {"col": 9, "line": 62, "offset": 1467}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 41, "line": 62, "offset": 1499}, "extra": {"engine_kind": "OSS", "fingerprint": "70c14bf8a61e3a055ca58ac42e6f12ba456f2d2052a3f9a31abedd04862452884d3a5dc4da549546cf33fb1c290a64200284537e848e46ccbb55eeaf0f10b506_0", "is_ignored": false, "lines": "        strncpy(acStack_8f4,ifname,0x10);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 16, "line": 62, "offset": 1474}, "start": {"col": 9, "line": 62, "offset": 1467}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/main_00402210.c", "start": {"col": 9, "line": 62, "offset": 1467}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 109, "offset": 3543}, "extra": {"engine_kind": "OSS", "fingerprint": "316fb8e80a79917e8b5f1b5e9edf08fe90aa77d6f67618a42f17d86c2fb6edf231b96266c45eb4eb8dad782e88cd80e14233d04a877ce998dbda71c4b15ad0e5_0", "is_ignored": false, "lines": "                      memset(&uStack_854,0,0x800);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 43, "line": 109, "offset": 3536}, "start": {"col": 42, "line": 109, "offset": 3535}}, "$DST": {"abstract_content": "&uStack_854", "end": {"col": 41, "line": 109, "offset": 3534}, "start": {"col": 30, "line": 109, "offset": 3523}}, "$LEN": {"abstract_content": "0x800", "end": {"col": 49, "line": 109, "offset": 3542}, "start": {"col": 44, "line": 109, "offset": 3537}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/main_00402210.c", "start": {"col": 23, "line": 109, "offset": 3516}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 99, "line": 110, "offset": 3643}, "extra": {"engine_kind": "OSS", "fingerprint": "4b109da8a19549550538bd1570ec1b25aced8719a85dd67cbe183ce595662445b87cbfa1b354a3424baaed76fb5cb9fbbbb04edb9fd20eb8a08ce33aea82b617_0", "is_ignored": false, "lines": "                      recvfrom(server_sockfd,&uStack_854,0x800,0,(sockaddr *)client_addr,local_40);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$3": {"abstract_content": "from", "end": {"col": 8, "line": 2, "offset": 8}, "start": {"col": 4, "line": 2, "offset": 4}}, "$FUN": {"abstract_content": "recvfrom", "end": {"col": 31, "line": 110, "offset": 3575}, "start": {"col": 23, "line": 110, "offset": 3567}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/main_00402210.c", "start": {"col": 23, "line": 110, "offset": 3567}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 99, "line": 110, "offset": 3643}, "extra": {"engine_kind": "OSS", "fingerprint": "b98071f4d13d7aa1df8d81896c69b41bbdb3f0c35c953ab68aec1c17f653173aaa00ef01e526c606058af97af9f5e60d78fcbbe3cbbbd6222d82a18d63dd8601_0", "is_ignored": false, "lines": "                      recvfrom(server_sockfd,&uStack_854,0x800,0,(sockaddr *)client_addr,local_40);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$BUF": {"abstract_content": "&uStack_854", "end": {"col": 57, "line": 110, "offset": 3601}, "start": {"col": 46, "line": 110, "offset": 3590}}, "$FL": {"abstract_content": "0", "end": {"col": 65, "line": 110, "offset": 3609}, "start": {"col": 64, "line": 110, "offset": 3608}}, "$LEN": {"abstract_content": "0x800", "end": {"col": 63, "line": 110, "offset": 3607}, "start": {"col": 58, "line": 110, "offset": 3602}}, "$SD": {"abstract_content": "server_sockfd", "end": {"col": 45, "line": 110, "offset": 3589}, "start": {"col": 32, "line": 110, "offset": 3576}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_ipfind/main_00402210.c", "start": {"col": 23, "line": 110, "offset": 3567}}], "skipped_rules": [], "version": "1.89.0"}
