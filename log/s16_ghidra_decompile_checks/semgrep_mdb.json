{"errors": [{"code": 2, "level": "warn", "message": "Timeout when running external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc on /tmp/haruspex_mdb/FUN_00401920_00401920.c:\n ", "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "rule_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "type": "Timeout"}], "interfile_languages_used": [], "paths": {"scanned": ["/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "/tmp/haruspex_mdb/FUN_00401540_00401540.c", "/tmp/haruspex_mdb/FUN_00401614_00401614.c", "/tmp/haruspex_mdb/FUN_00401680_00401680.c", "/tmp/haruspex_mdb/FUN_004016bc_004016bc.c", "/tmp/haruspex_mdb/FUN_004016d0_004016d0.c", "/tmp/haruspex_mdb/FUN_00401710_00401710.c", "/tmp/haruspex_mdb/FUN_00401748_00401748.c", "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "/tmp/haruspex_mdb/FUN_00404ad4_00404ad4.c", "/tmp/haruspex_mdb/FUN_00404b88_00404b88.c", "/tmp/haruspex_mdb/FUN_00404bc0_00404bc0.c", "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "/tmp/haruspex_mdb/FUN_004053f0_004053f0.c", "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "/tmp/haruspex_mdb/FUN_00408040_00408040.c", "/tmp/haruspex_mdb/FUN_00408080_00408080.c", "/tmp/haruspex_mdb/FUN_004081b0_004081b0.c", "/tmp/haruspex_mdb/FUN_00408218_00408218.c", "/tmp/haruspex_mdb/FUN_004082d8_004082d8.c", "/tmp/haruspex_mdb/FUN_004083c4_004083c4.c", "/tmp/haruspex_mdb/FUN_00408558_00408558.c", "/tmp/haruspex_mdb/FUN_004086c4_004086c4.c", "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "/tmp/haruspex_mdb/FUN_004089fc_004089fc.c", "/tmp/haruspex_mdb/FUN_00408a60_00408a60.c", "/tmp/haruspex_mdb/FUN_00408acc_00408acc.c", "/tmp/haruspex_mdb/FUN_00408b0c_00408b0c.c", "/tmp/haruspex_mdb/FUN_00408b5c_00408b5c.c", "/tmp/haruspex_mdb/FUN_00408b9c_00408b9c.c", "/tmp/haruspex_mdb/FUN_00408bc4_00408bc4.c", "/tmp/haruspex_mdb/FUN_00408be0_00408be0.c", "/tmp/haruspex_mdb/FUN_00408c1c_00408c1c.c", "/tmp/haruspex_mdb/FUN_00408e5c_00408e5c.c", "/tmp/haruspex_mdb/FUN_00408eac_00408eac.c", "/tmp/haruspex_mdb/FUN_00408f14_00408f14.c", "/tmp/haruspex_mdb/FUN_00408fcc_00408fcc.c", "/tmp/haruspex_mdb/FUN_0040905c_0040905c.c", "/tmp/haruspex_mdb/FUN_004090e8_004090e8.c", "/tmp/haruspex_mdb/FUN_0040913c_0040913c.c", "/tmp/haruspex_mdb/FUN_004091e4_004091e4.c", "/tmp/haruspex_mdb/FUN_00409330_00409330.c", "/tmp/haruspex_mdb/FUN_00409394_00409394.c", "/tmp/haruspex_mdb/FUN_0040958c_0040958c.c", "/tmp/haruspex_mdb/FUN_004095f0_004095f0.c", "/tmp/haruspex_mdb/FUN_004098b8_004098b8.c", "/tmp/haruspex_mdb/FUN_00409d5c_00409d5c.c", "/tmp/haruspex_mdb/FUN_0040a840_0040a840.c", "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "/tmp/haruspex_mdb/SetDCHPolicyHandle_0040a4e0.c", "/tmp/haruspex_mdb/SetNotifierSettingsHandle_0040a2d0.c", "/tmp/haruspex_mdb/_fini_0040ae20.c", "/tmp/haruspex_mdb/_ftext_004014e0.c", "/tmp/haruspex_mdb/_init_00401464.c", "/tmp/haruspex_mdb/checkSetPolicyType_0040a6f0.c", "/tmp/haruspex_mdb/kvparse_00408c58.c", "/tmp/haruspex_mdb/main_00407cd4.c", "/tmp/haruspex_mdb/qryFree_00408380.c", "/tmp/haruspex_mdb/qryInit_00408500.c", "/tmp/haruspex_mdb/qryStringDecode_0040818c.c", "/tmp/haruspex_mdb/qryStringEncode_00408810.c"]}, "results": [{"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 28, "offset": 592}, "extra": {"engine_kind": "OSS", "fingerprint": "370171b6931aff783419d6bf0d06717622454ef6c4d2a1a94faeb55ab2c99b6bcc7d70c57a9bb8044bdb14a95e343c4a5f79e62677c549c5498200e60703407d_0", "is_ignored": false, "lines": "    memset(acStack_2001c,0,0x20000);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 28, "offset": 583}, "start": {"col": 26, "line": 28, "offset": 582}}, "$DST": {"abstract_content": "acStack_2001c", "end": {"col": 25, "line": 28, "offset": 581}, "start": {"col": 12, "line": 28, "offset": 568}}, "$LEN": {"abstract_content": "0x20000", "end": {"col": 35, "line": 28, "offset": 591}, "start": {"col": 28, "line": 28, "offset": 584}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 5, "line": 28, "offset": 561}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 79, "line": 33, "offset": 955}, "extra": {"engine_kind": "OSS", "fingerprint": "7954b99300337029039458146e00c1fbc7ea032186037c5af207fbab75d20bf1cfe26759a977225a1998388257ea7f69fda98fd4193705ec9c5f8e9a046195f9_0", "is_ignored": false, "lines": "    sprintf(acStack_2001c,\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"\n            ,\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\",\n            \"xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\",pcVar1);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"", "end": {"col": 110, "line": 1, "offset": 109}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "acStack_2001c", "end": {"col": 26, "line": 29, "offset": 619}, "start": {"col": 13, "line": 29, "offset": 606}}, "$FMT": {"abstract_content": "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"", "end": {"col": 122, "line": 30, "offset": 742}, "start": {"col": 13, "line": 30, "offset": 633}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 5, "line": 29, "offset": 598}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 79, "line": 33, "offset": 955}, "extra": {"engine_kind": "OSS", "fingerprint": "22cb0f5d6f8f6a3943fe3275c504af24cb2b8fff3609e6bc7d26fbb0271a6a4a8ea20c625c57aec6c79d9fa284a0b2d080702e51fb976fed0849cb87f7b4c5ee_0", "is_ignored": false, "lines": "    sprintf(acStack_2001c,\n            \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"\n            ,\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\",\n            \"xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\",pcVar1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 12, "line": 29, "offset": 605}, "start": {"col": 5, "line": 29, "offset": 598}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 5, "line": 29, "offset": 598}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 21, "line": 37, "offset": 1086}, "extra": {"engine_kind": "OSS", "fingerprint": "a8e3c9208f1dde48db1b9deaaeb692f0444b4e60f57c6207b0774a13d5bc3e2598cfd548c0fee54583188fa7525154ab9ef37eb441d030a73ae7a75f6c15e195_0", "is_ignored": false, "lines": "    sStack_2065c = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 21, "line": 37, "offset": 1086}, "start": {"col": 20, "line": 37, "offset": 1085}}, "$UNSIGNED": {"abstract_content": "sStack_2065c", "end": {"col": 17, "line": 37, "offset": 1082}, "start": {"col": 5, "line": 37, "offset": 1070}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 5, "line": 37, "offset": 1070}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 53, "line": 39, "offset": 1168}, "extra": {"engine_kind": "OSS", "fingerprint": "4387fde57ab0b46c353e96c1e4622819a686b0e4ea30dba843f614d5f04d97cc3cbc935f55491b05a8724169162b5fa4e7e773d02efed8b3d1b8443e52acbbef_0", "is_ignored": false, "lines": "    memset((void *)((int)&uStack_205d0 + 1),0,0x5b3);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 46, "line": 39, "offset": 1161}, "start": {"col": 45, "line": 39, "offset": 1160}}, "$DST": {"abstract_content": "(void*(int&uStack_205d0+1", "end": {"col": 43, "line": 39, "offset": 1158}, "start": {"col": 12, "line": 39, "offset": 1127}}, "$LEN": {"abstract_content": "0x5b3", "end": {"col": 52, "line": 39, "offset": 1167}, "start": {"col": 47, "line": 39, "offset": 1162}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 5, "line": 39, "offset": 1120}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 42, "offset": 1302}, "extra": {"engine_kind": "OSS", "fingerprint": "e4aeed3982521ee2fe60cd41b2d91323de8bfbbc9f14e3054c38a1ba81c9686f41bbabc580b2ca8af3f1db945219fba266e3022f140ecc59a561936bb7de71c3_0", "is_ignored": false, "lines": "      memset(&uStack_205d0,0,0x5b4);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 29, "line": 42, "offset": 1295}, "start": {"col": 28, "line": 42, "offset": 1294}}, "$DST": {"abstract_content": "&uStack_205d0", "end": {"col": 27, "line": 42, "offset": 1293}, "start": {"col": 14, "line": 42, "offset": 1280}}, "$LEN": {"abstract_content": "0x5b4", "end": {"col": 35, "line": 42, "offset": 1301}, "start": {"col": 30, "line": 42, "offset": 1296}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 7, "line": 42, "offset": 1273}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 49, "line": 45, "offset": 1438}, "extra": {"engine_kind": "OSS", "fingerprint": "2b8c93e241caa3c43b5abac01d0af54ed2cd789354ef5de1023e3c0e92317ceac4a332467183338d9a549de9af0697141ff829e1889220546cf82db596cd9d34_0", "is_ignored": false, "lines": "        sscanf(acStack_205c8,\"%d\",&iStack_20660);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 15, "line": 45, "offset": 1404}, "start": {"col": 9, "line": 45, "offset": 1398}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 9, "line": 45, "offset": 1398}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc", "end": {"col": 49, "line": 45, "offset": 1438}, "extra": {"engine_kind": "OSS", "fingerprint": "96b32fd784f90cd971b7953f47247f31dcecd2dfd837a133936b249398ff0a50ae1612e7836363e065ecf56d1a6f1b54e982ddf2e4f2225d9b0ae1a309abcca3_0", "is_ignored": false, "lines": "        sscanf(acStack_205c8,\"%d\",&iStack_20660);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 15, "line": 45, "offset": 1404}, "start": {"col": 9, "line": 45, "offset": 1398}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 9, "line": 45, "offset": 1398}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 53, "line": 49, "offset": 1634}, "extra": {"engine_kind": "OSS", "fingerprint": "2b8c93e241caa3c43b5abac01d0af54ed2cd789354ef5de1023e3c0e92317ceac4a332467183338d9a549de9af0697141ff829e1889220546cf82db596cd9d34_1", "is_ignored": false, "lines": "            sscanf(pcVar1 + 0x10,\"%d\",&sStack_2065c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 19, "line": 49, "offset": 1600}, "start": {"col": 13, "line": 49, "offset": 1594}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 13, "line": 49, "offset": 1594}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc", "end": {"col": 53, "line": 49, "offset": 1634}, "extra": {"engine_kind": "OSS", "fingerprint": "96b32fd784f90cd971b7953f47247f31dcecd2dfd837a133936b249398ff0a50ae1612e7836363e065ecf56d1a6f1b54e982ddf2e4f2225d9b0ae1a309abcca3_1", "is_ignored": false, "lines": "            sscanf(pcVar1 + 0x10,\"%d\",&sStack_2065c);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 19, "line": 49, "offset": 1600}, "start": {"col": 13, "line": 49, "offset": 1594}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 13, "line": 49, "offset": 1594}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 51, "offset": 1706}, "extra": {"engine_kind": "OSS", "fingerprint": "87a331e503fcfbe3cc8f2cee046e4c2132aaa408e914efb8e0a4a28f40e340d49d21dde6f81a34445df47c3a72720571acdeb5fb90b66597b95fde15ef5b1bb6_0", "is_ignored": false, "lines": "              sStack_2065c = 3;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "3", "end": {"col": 31, "line": 51, "offset": 1706}, "start": {"col": 30, "line": 51, "offset": 1705}}, "$UNSIGNED": {"abstract_content": "sStack_2065c", "end": {"col": 27, "line": 51, "offset": 1702}, "start": {"col": 15, "line": 51, "offset": 1690}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 15, "line": 51, "offset": 1690}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 53, "offset": 1752}, "extra": {"engine_kind": "OSS", "fingerprint": "cc2f5b9a38c0e8af1cbae99ebb44bfe100ebd03e0bf338e0970ecd4fcb1294ddf340b85355cbdbbd17f7a33f9965afeab1c94d9e93a13b204b92d3c24aa8bced_0", "is_ignored": false, "lines": "            __n = sStack_2065c;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "sStack_2065c", "end": {"col": 31, "line": 53, "offset": 1752}, "start": {"col": 19, "line": 53, "offset": 1740}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 16, "line": 53, "offset": 1737}, "start": {"col": 13, "line": 53, "offset": 1734}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 13, "line": 53, "offset": 1734}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 63, "offset": 2188}, "extra": {"engine_kind": "OSS", "fingerprint": "e4aeed3982521ee2fe60cd41b2d91323de8bfbbc9f14e3054c38a1ba81c9686f41bbabc580b2ca8af3f1db945219fba266e3022f140ecc59a561936bb7de71c3_1", "is_ignored": false, "lines": "            memset(&uStack_205d0,0,0x5b4);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 35, "line": 63, "offset": 2181}, "start": {"col": 34, "line": 63, "offset": 2180}}, "$DST": {"abstract_content": "&uStack_205d0", "end": {"col": 33, "line": 63, "offset": 2179}, "start": {"col": 20, "line": 63, "offset": 2166}}, "$LEN": {"abstract_content": "0x5b4", "end": {"col": 41, "line": 63, "offset": 2187}, "start": {"col": 36, "line": 63, "offset": 2182}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 13, "line": 63, "offset": 2159}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 88, "line": 71, "offset": 2578}, "extra": {"engine_kind": "OSS", "fingerprint": "3f03cd3290a0d83fc43a1310ef60304aec888227572316494e90004b0d94e5d9f8f8a780ca1b45a2b3c8c6e1002504713366a8bae8ebf91fb2a4c5a674f86cca_0", "is_ignored": false, "lines": "                  iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),__n,0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar4", "end": {"col": 24, "line": 71, "offset": 2514}, "start": {"col": 19, "line": 71, "offset": 2509}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 85, "line": 71, "offset": 2575}, "start": {"col": 82, "line": 71, "offset": 2572}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 19, "line": 71, "offset": 2509}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 88, "line": 71, "offset": 2578}, "extra": {"engine_kind": "OSS", "fingerprint": "6de9a3694a78c8cfc615d20d2507c1537465c6aac38917c2abd3f72bdfc44763fb66c5a3c78fbaca58515c69dca5ec5978fe3b73b2b6fb282f4e7af8822300c4_0", "is_ignored": false, "lines": "                  iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),__n,0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "recv", "end": {"col": 31, "line": 71, "offset": 2521}, "start": {"col": 27, "line": 71, "offset": 2517}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 27, "line": 71, "offset": 2517}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 90, "line": 74, "offset": 2710}, "extra": {"engine_kind": "OSS", "fingerprint": "6de9a3694a78c8cfc615d20d2507c1537465c6aac38917c2abd3f72bdfc44763fb66c5a3c78fbaca58515c69dca5ec5978fe3b73b2b6fb282f4e7af8822300c4_1", "is_ignored": false, "lines": "                  iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),0x5b4,0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "recv", "end": {"col": 31, "line": 74, "offset": 2651}, "start": {"col": 27, "line": 74, "offset": 2647}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 27, "line": 74, "offset": 2647}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 90, "line": 74, "offset": 2710}, "extra": {"engine_kind": "OSS", "fingerprint": "fec97ceabb8609940c311c9853529b451cf4d475cba53d08cf3efc28053cf1983c04216484ecaea46ba14ae51ce9b3658050d3fcc787a5722d85a60659c93965_0", "is_ignored": false, "lines": "                  iVar4 = recv(uStack_20664,(void *)((int)&uStack_205d0 + iVar2),0x5b4,0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$BUF": {"abstract_content": "(void*(int&uStack_205d0+iVar2", "end": {"col": 80, "line": 74, "offset": 2700}, "start": {"col": 45, "line": 74, "offset": 2665}}, "$FL": {"abstract_content": "0", "end": {"col": 89, "line": 74, "offset": 2709}, "start": {"col": 88, "line": 74, "offset": 2708}}, "$LEN": {"abstract_content": "0x5b4", "end": {"col": 87, "line": 74, "offset": 2707}, "start": {"col": 82, "line": 74, "offset": 2702}}, "$SD": {"abstract_content": "uStack_20664", "end": {"col": 44, "line": 74, "offset": 2664}, "start": {"col": 32, "line": 74, "offset": 2652}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 27, "line": 74, "offset": 2647}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 76, "offset": 2763}, "extra": {"engine_kind": "OSS", "fingerprint": "3f03cd3290a0d83fc43a1310ef60304aec888227572316494e90004b0d94e5d9f8f8a780ca1b45a2b3c8c6e1002504713366a8bae8ebf91fb2a4c5a674f86cca_1", "is_ignored": false, "lines": "                __n = __n - iVar4;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar4", "end": {"col": 34, "line": 76, "offset": 2763}, "start": {"col": 29, "line": 76, "offset": 2758}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 20, "line": 76, "offset": 2749}, "start": {"col": 17, "line": 76, "offset": 2746}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/DoActionHandle_00409a34.c", "start": {"col": 17, "line": 76, "offset": 2746}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 87, "offset": 1991}, "extra": {"engine_kind": "OSS", "fingerprint": "1f1de79acf536df5bf30020d484eddbbc4e7ea93a3266c7210cf47e7a6314585da38a3537d38e2c0b2eb2cb2b64cf7bffe1f2e5373733ac6abc04dc051793007_0", "is_ignored": false, "lines": "    memset((void *)((int)&local_1ed0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 44, "line": 87, "offset": 1986}, "start": {"col": 43, "line": 87, "offset": 1985}}, "$DST": {"abstract_content": "(void*(int&local_1ed0+1", "end": {"col": 41, "line": 87, "offset": 1983}, "start": {"col": 12, "line": 87, "offset": 1954}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 48, "line": 87, "offset": 1990}, "start": {"col": 45, "line": 87, "offset": 1987}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 87, "offset": 1947}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 89, "offset": 2085}, "extra": {"engine_kind": "OSS", "fingerprint": "cccd272ef9411d7b81ff83b7a72640bb106415af46a15096696c4469b1988b34002f4eebad6b59770984c9e823b6667cf9f562e7ee1f39890cc604dde2492483_0", "is_ignored": false, "lines": "    memset((void *)((int)&local_1eb0 + 1),0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 44, "line": 89, "offset": 2079}, "start": {"col": 43, "line": 89, "offset": 2078}}, "$DST": {"abstract_content": "(void*(int&local_1eb0+1", "end": {"col": 41, "line": 89, "offset": 2076}, "start": {"col": 12, "line": 89, "offset": 2047}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 49, "line": 89, "offset": 2084}, "start": {"col": 45, "line": 89, "offset": 2080}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 89, "offset": 2040}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 88, "line": 92, "offset": 2276}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_0", "is_ignored": false, "lines": "    sprintf((char *)&local_1ed0,\"%u.%02d\",local_1f24 >> 0x10,local_1f28.s_addr >> 0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 12, "line": 92, "offset": 2200}, "start": {"col": 5, "line": 92, "offset": 2193}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 92, "offset": 2193}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 103, "offset": 2553}, "extra": {"engine_kind": "OSS", "fingerprint": "ad27cf9d44436d3ce2bc72336d33a6a41971cecb3aeb5f441174ed52fd97c496ae410151e75f9b4f02b104b955a18930350f12d75c500cfa891e20d848785ff1_0", "is_ignored": false, "lines": "    memset(auStack_187f,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 103, "offset": 2547}, "start": {"col": 25, "line": 103, "offset": 2546}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 103, "offset": 2545}, "start": {"col": 12, "line": 103, "offset": 2533}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 31, "line": 103, "offset": 2552}, "start": {"col": 27, "line": 103, "offset": 2548}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 103, "offset": 2526}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 105, "offset": 2609}, "extra": {"engine_kind": "OSS", "fingerprint": "6c9bcd973f7b09ef48efaf93e570aad68389d78c64e42f7b5589dedd1a5f33ff0d52d961d21ab8a1aa752c8b354934ad014129a3ff38e90c79f817dd9249fd7d_0", "is_ignored": false, "lines": "    memset(auStack_1c7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 105, "offset": 2603}, "start": {"col": 25, "line": 105, "offset": 2602}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 24, "line": 105, "offset": 2601}, "start": {"col": 12, "line": 105, "offset": 2589}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 31, "line": 105, "offset": 2608}, "start": {"col": 27, "line": 105, "offset": 2604}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 105, "offset": 2582}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 117, "offset": 2929}, "extra": {"engine_kind": "OSS", "fingerprint": "ad27cf9d44436d3ce2bc72336d33a6a41971cecb3aeb5f441174ed52fd97c496ae410151e75f9b4f02b104b955a18930350f12d75c500cfa891e20d848785ff1_1", "is_ignored": false, "lines": "    memset(auStack_187f,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 117, "offset": 2923}, "start": {"col": 25, "line": 117, "offset": 2922}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 117, "offset": 2921}, "start": {"col": 12, "line": 117, "offset": 2909}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 31, "line": 117, "offset": 2928}, "start": {"col": 27, "line": 117, "offset": 2924}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 117, "offset": 2902}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 119, "offset": 2985}, "extra": {"engine_kind": "OSS", "fingerprint": "6c9bcd973f7b09ef48efaf93e570aad68389d78c64e42f7b5589dedd1a5f33ff0d52d961d21ab8a1aa752c8b354934ad014129a3ff38e90c79f817dd9249fd7d_1", "is_ignored": false, "lines": "    memset(auStack_1c7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 119, "offset": 2979}, "start": {"col": 25, "line": 119, "offset": 2978}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 24, "line": 119, "offset": 2977}, "start": {"col": 12, "line": 119, "offset": 2965}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 31, "line": 119, "offset": 2984}, "start": {"col": 27, "line": 119, "offset": 2980}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 119, "offset": 2958}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 131, "offset": 3299}, "extra": {"engine_kind": "OSS", "fingerprint": "ad27cf9d44436d3ce2bc72336d33a6a41971cecb3aeb5f441174ed52fd97c496ae410151e75f9b4f02b104b955a18930350f12d75c500cfa891e20d848785ff1_2", "is_ignored": false, "lines": "    memset(auStack_187f,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 131, "offset": 3293}, "start": {"col": 25, "line": 131, "offset": 3292}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 131, "offset": 3291}, "start": {"col": 12, "line": 131, "offset": 3279}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 31, "line": 131, "offset": 3298}, "start": {"col": 27, "line": 131, "offset": 3294}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 131, "offset": 3272}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 133, "offset": 3355}, "extra": {"engine_kind": "OSS", "fingerprint": "6c9bcd973f7b09ef48efaf93e570aad68389d78c64e42f7b5589dedd1a5f33ff0d52d961d21ab8a1aa752c8b354934ad014129a3ff38e90c79f817dd9249fd7d_2", "is_ignored": false, "lines": "    memset(auStack_1c7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 133, "offset": 3349}, "start": {"col": 25, "line": 133, "offset": 3348}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 24, "line": 133, "offset": 3347}, "start": {"col": 12, "line": 133, "offset": 3335}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 31, "line": 133, "offset": 3354}, "start": {"col": 27, "line": 133, "offset": 3350}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 133, "offset": 3328}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 145, "offset": 3677}, "extra": {"engine_kind": "OSS", "fingerprint": "ad27cf9d44436d3ce2bc72336d33a6a41971cecb3aeb5f441174ed52fd97c496ae410151e75f9b4f02b104b955a18930350f12d75c500cfa891e20d848785ff1_3", "is_ignored": false, "lines": "    memset(auStack_187f,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 145, "offset": 3671}, "start": {"col": 25, "line": 145, "offset": 3670}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 145, "offset": 3669}, "start": {"col": 12, "line": 145, "offset": 3657}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 31, "line": 145, "offset": 3676}, "start": {"col": 27, "line": 145, "offset": 3672}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 145, "offset": 3650}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 147, "offset": 3733}, "extra": {"engine_kind": "OSS", "fingerprint": "6c9bcd973f7b09ef48efaf93e570aad68389d78c64e42f7b5589dedd1a5f33ff0d52d961d21ab8a1aa752c8b354934ad014129a3ff38e90c79f817dd9249fd7d_3", "is_ignored": false, "lines": "    memset(auStack_1c7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 147, "offset": 3727}, "start": {"col": 25, "line": 147, "offset": 3726}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 24, "line": 147, "offset": 3725}, "start": {"col": 12, "line": 147, "offset": 3713}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 31, "line": 147, "offset": 3732}, "start": {"col": 27, "line": 147, "offset": 3728}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 147, "offset": 3706}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 56, "line": 167, "offset": 4274}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_1", "is_ignored": false, "lines": "    sprintf((char *)&local_1eb0,\"%d\",local_1f28.s_addr);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 12, "line": 167, "offset": 4230}, "start": {"col": 5, "line": 167, "offset": 4223}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 167, "offset": 4223}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 56, "line": 185, "offset": 4727}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_2", "is_ignored": false, "lines": "    sprintf((char *)&local_1eb0,\"%d\",local_1f28.s_addr);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 12, "line": 185, "offset": 4683}, "start": {"col": 5, "line": 185, "offset": 4676}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 185, "offset": 4676}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 205, "offset": 5286}, "extra": {"engine_kind": "OSS", "fingerprint": "1f1de79acf536df5bf30020d484eddbbc4e7ea93a3266c7210cf47e7a6314585da38a3537d38e2c0b2eb2cb2b64cf7bffe1f2e5373733ac6abc04dc051793007_1", "is_ignored": false, "lines": "    memset((void *)((int)&local_1ed0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 44, "line": 205, "offset": 5281}, "start": {"col": 43, "line": 205, "offset": 5280}}, "$DST": {"abstract_content": "(void*(int&local_1ed0+1", "end": {"col": 41, "line": 205, "offset": 5278}, "start": {"col": 12, "line": 205, "offset": 5249}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 48, "line": 205, "offset": 5285}, "start": {"col": 45, "line": 205, "offset": 5282}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 205, "offset": 5242}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 207, "offset": 5338}, "extra": {"engine_kind": "OSS", "fingerprint": "478077f51fac0b899c8e39523d0ef564b1c0746994079522b09984554fe87bccc8fbb3bf6bf76aa09591e7c4119eee2da7735c4cbb5f662d9da18beef007c02e_0", "is_ignored": false, "lines": "    memset(&local_1d7f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 207, "offset": 5332}, "start": {"col": 24, "line": 207, "offset": 5331}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 23, "line": 207, "offset": 5330}, "start": {"col": 12, "line": 207, "offset": 5319}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 30, "line": 207, "offset": 5337}, "start": {"col": 26, "line": 207, "offset": 5333}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 207, "offset": 5312}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 81, "line": 210, "offset": 5561}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_3", "is_ignored": false, "lines": "    sprintf((char *)&local_1ed0,\"%02X%02X%02X%02X%02X%02X\",(uint)local_1d80,(uint)local_1d7f,\n            (uint)local_1d7e,(uint)local_1d7d,(uint)local_1d7c,(uint)local_1d7b);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 12, "line": 209, "offset": 5398}, "start": {"col": 5, "line": 209, "offset": 5391}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 209, "offset": 5391}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 220, "offset": 5789}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_0", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 220, "offset": 5782}, "start": {"col": 25, "line": 220, "offset": 5781}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 220, "offset": 5780}, "start": {"col": 12, "line": 220, "offset": 5768}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 220, "offset": 5788}, "start": {"col": 27, "line": 220, "offset": 5783}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 220, "offset": 5761}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 221, "offset": 5822}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_0", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 221, "offset": 5815}, "start": {"col": 24, "line": 221, "offset": 5814}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 221, "offset": 5813}, "start": {"col": 12, "line": 221, "offset": 5802}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 221, "offset": 5821}, "start": {"col": 26, "line": 221, "offset": 5816}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 221, "offset": 5795}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 232, "offset": 6139}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_1", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 232, "offset": 6132}, "start": {"col": 25, "line": 232, "offset": 6131}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 232, "offset": 6130}, "start": {"col": 12, "line": 232, "offset": 6118}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 232, "offset": 6138}, "start": {"col": 27, "line": 232, "offset": 6133}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 232, "offset": 6111}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 233, "offset": 6172}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_1", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 233, "offset": 6165}, "start": {"col": 24, "line": 233, "offset": 6164}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 233, "offset": 6163}, "start": {"col": 12, "line": 233, "offset": 6152}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 233, "offset": 6171}, "start": {"col": 26, "line": 233, "offset": 6166}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 233, "offset": 6145}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 244, "offset": 6483}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_2", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 244, "offset": 6476}, "start": {"col": 25, "line": 244, "offset": 6475}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 244, "offset": 6474}, "start": {"col": 12, "line": 244, "offset": 6462}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 244, "offset": 6482}, "start": {"col": 27, "line": 244, "offset": 6477}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 244, "offset": 6455}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 245, "offset": 6516}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_2", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 245, "offset": 6509}, "start": {"col": 24, "line": 245, "offset": 6508}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 245, "offset": 6507}, "start": {"col": 12, "line": 245, "offset": 6496}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 245, "offset": 6515}, "start": {"col": 26, "line": 245, "offset": 6510}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 245, "offset": 6489}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 256, "offset": 6827}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_3", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 256, "offset": 6820}, "start": {"col": 25, "line": 256, "offset": 6819}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 256, "offset": 6818}, "start": {"col": 12, "line": 256, "offset": 6806}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 256, "offset": 6826}, "start": {"col": 27, "line": 256, "offset": 6821}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 256, "offset": 6799}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 257, "offset": 6860}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_3", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 257, "offset": 6853}, "start": {"col": 24, "line": 257, "offset": 6852}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 257, "offset": 6851}, "start": {"col": 12, "line": 257, "offset": 6840}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 257, "offset": 6859}, "start": {"col": 26, "line": 257, "offset": 6854}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 257, "offset": 6833}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 268, "offset": 7171}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_4", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 268, "offset": 7164}, "start": {"col": 25, "line": 268, "offset": 7163}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 268, "offset": 7162}, "start": {"col": 12, "line": 268, "offset": 7150}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 268, "offset": 7170}, "start": {"col": 27, "line": 268, "offset": 7165}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 268, "offset": 7143}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 269, "offset": 7204}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_4", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 269, "offset": 7197}, "start": {"col": 24, "line": 269, "offset": 7196}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 269, "offset": 7195}, "start": {"col": 12, "line": 269, "offset": 7184}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 269, "offset": 7203}, "start": {"col": 26, "line": 269, "offset": 7198}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 269, "offset": 7177}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 280, "offset": 7515}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_5", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 280, "offset": 7508}, "start": {"col": 25, "line": 280, "offset": 7507}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 280, "offset": 7506}, "start": {"col": 12, "line": 280, "offset": 7494}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 280, "offset": 7514}, "start": {"col": 27, "line": 280, "offset": 7509}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 280, "offset": 7487}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 281, "offset": 7548}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_5", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 281, "offset": 7541}, "start": {"col": 24, "line": 281, "offset": 7540}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 281, "offset": 7539}, "start": {"col": 12, "line": 281, "offset": 7528}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 281, "offset": 7547}, "start": {"col": 26, "line": 281, "offset": 7542}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 281, "offset": 7521}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 292, "offset": 7859}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_6", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 292, "offset": 7852}, "start": {"col": 25, "line": 292, "offset": 7851}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 292, "offset": 7850}, "start": {"col": 12, "line": 292, "offset": 7838}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 292, "offset": 7858}, "start": {"col": 27, "line": 292, "offset": 7853}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 292, "offset": 7831}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 293, "offset": 7892}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_6", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 293, "offset": 7885}, "start": {"col": 24, "line": 293, "offset": 7884}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 293, "offset": 7883}, "start": {"col": 12, "line": 293, "offset": 7872}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 293, "offset": 7891}, "start": {"col": 26, "line": 293, "offset": 7886}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 293, "offset": 7865}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 304, "offset": 8203}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_7", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 304, "offset": 8196}, "start": {"col": 25, "line": 304, "offset": 8195}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 304, "offset": 8194}, "start": {"col": 12, "line": 304, "offset": 8182}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 304, "offset": 8202}, "start": {"col": 27, "line": 304, "offset": 8197}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 304, "offset": 8175}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 305, "offset": 8236}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_7", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 305, "offset": 8229}, "start": {"col": 24, "line": 305, "offset": 8228}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 305, "offset": 8227}, "start": {"col": 12, "line": 305, "offset": 8216}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 305, "offset": 8235}, "start": {"col": 26, "line": 305, "offset": 8230}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 305, "offset": 8209}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 316, "offset": 8547}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_8", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 316, "offset": 8540}, "start": {"col": 25, "line": 316, "offset": 8539}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 316, "offset": 8538}, "start": {"col": 12, "line": 316, "offset": 8526}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 316, "offset": 8546}, "start": {"col": 27, "line": 316, "offset": 8541}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 316, "offset": 8519}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 317, "offset": 8580}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_8", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 317, "offset": 8573}, "start": {"col": 24, "line": 317, "offset": 8572}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 317, "offset": 8571}, "start": {"col": 12, "line": 317, "offset": 8560}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 317, "offset": 8579}, "start": {"col": 26, "line": 317, "offset": 8574}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 317, "offset": 8553}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 328, "offset": 8891}, "extra": {"engine_kind": "OSS", "fingerprint": "afc28dc9847c948003e6791c7c5c5b768ff2af712bcd1c100b7017470c05b9c222dddc004c09ea1b5749984f2678210de2d23d41ed906d3e51a299b5e87f835b_9", "is_ignored": false, "lines": "    memset(auStack_187f,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 328, "offset": 8884}, "start": {"col": 25, "line": 328, "offset": 8883}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 328, "offset": 8882}, "start": {"col": 12, "line": 328, "offset": 8870}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 32, "line": 328, "offset": 8890}, "start": {"col": 27, "line": 328, "offset": 8885}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 328, "offset": 8863}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 329, "offset": 8924}, "extra": {"engine_kind": "OSS", "fingerprint": "fa3ca7e4970369669cd71ec036efcf8b2187bcff967ff1d1890a4161b849eead2fc63a1daae39fd69bc3d7f38b932cb209aa3196ef2af1cc0dd504cf31405fde_9", "is_ignored": false, "lines": "    memset(&local_1880,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 329, "offset": 8917}, "start": {"col": 24, "line": 329, "offset": 8916}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 23, "line": 329, "offset": 8915}, "start": {"col": 12, "line": 329, "offset": 8904}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 31, "line": 329, "offset": 8923}, "start": {"col": 26, "line": 329, "offset": 8918}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 329, "offset": 8897}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 360, "offset": 9719}, "extra": {"engine_kind": "OSS", "fingerprint": "1f1de79acf536df5bf30020d484eddbbc4e7ea93a3266c7210cf47e7a6314585da38a3537d38e2c0b2eb2cb2b64cf7bffe1f2e5373733ac6abc04dc051793007_2", "is_ignored": false, "lines": "    memset((void *)((int)&local_1ed0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 44, "line": 360, "offset": 9714}, "start": {"col": 43, "line": 360, "offset": 9713}}, "$DST": {"abstract_content": "(void*(int&local_1ed0+1", "end": {"col": 41, "line": 360, "offset": 9711}, "start": {"col": 12, "line": 360, "offset": 9682}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 48, "line": 360, "offset": 9718}, "start": {"col": 45, "line": 360, "offset": 9715}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 360, "offset": 9675}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 362, "offset": 9812}, "extra": {"engine_kind": "OSS", "fingerprint": "8e4646f06de0b125e3eb3073e264e9501f6d890944e9aeecad38db59adc23cd6e4c271bc20c07e7987081221b8e24d370e5821534cb67d463c8e8b6c965e8c66_0", "is_ignored": false, "lines": "    memset((void *)((int)&local_1eb0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 44, "line": 362, "offset": 9807}, "start": {"col": 43, "line": 362, "offset": 9806}}, "$DST": {"abstract_content": "(void*(int&local_1eb0+1", "end": {"col": 41, "line": 362, "offset": 9804}, "start": {"col": 12, "line": 362, "offset": 9775}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 48, "line": 362, "offset": 9811}, "start": {"col": 45, "line": 362, "offset": 9808}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 362, "offset": 9768}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 364, "offset": 9902}, "extra": {"engine_kind": "OSS", "fingerprint": "f1664ab3ed1f28cea72da2e6d036d7c73506a6ad8f4606959ceb5d5e35c9b2a72cb2472bdba845f5f094ebf29e335558000b71a9b8317fd30e8e3bdb3ec772b1_0", "is_ignored": false, "lines": "    memset((void *)((int)&local_1ef0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 44, "line": 364, "offset": 9897}, "start": {"col": 43, "line": 364, "offset": 9896}}, "$DST": {"abstract_content": "(void*(int&local_1ef0+1", "end": {"col": 41, "line": 364, "offset": 9894}, "start": {"col": 12, "line": 364, "offset": 9865}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 48, "line": 364, "offset": 9901}, "start": {"col": 45, "line": 364, "offset": 9898}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 364, "offset": 9858}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 366, "offset": 9957}, "extra": {"engine_kind": "OSS", "fingerprint": "97c67830d34eb112ea8fa2c955c71e80bf3a29eda633a8369201eac2d75ece0490d9c92b823222354dfe7941dbee0db03c8bb9c135d4faf90c743c5f1d631a20_0", "is_ignored": false, "lines": "    memset(auStack_1eff,0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 366, "offset": 9952}, "start": {"col": 25, "line": 366, "offset": 9951}}, "$DST": {"abstract_content": "auStack_1eff", "end": {"col": 24, "line": 366, "offset": 9950}, "start": {"col": 12, "line": 366, "offset": 9938}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 30, "line": 366, "offset": 9956}, "start": {"col": 27, "line": 366, "offset": 9953}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 366, "offset": 9931}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 368, "offset": 10012}, "extra": {"engine_kind": "OSS", "fingerprint": "8248e9e41ed1c843f5d396ceecc17e28c778c3133ee19ab6314035fc99a00a3dd2c3a44f4db2463633b9d11db167be8e5b8192d9ecfb6bd477b872088b83be28_0", "is_ignored": false, "lines": "    memset(auStack_1f0f,0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 368, "offset": 10007}, "start": {"col": 25, "line": 368, "offset": 10006}}, "$DST": {"abstract_content": "auStack_1f0f", "end": {"col": 24, "line": 368, "offset": 10005}, "start": {"col": 12, "line": 368, "offset": 9993}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 30, "line": 368, "offset": 10011}, "start": {"col": 27, "line": 368, "offset": 10008}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 368, "offset": 9986}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 370, "offset": 10068}, "extra": {"engine_kind": "OSS", "fingerprint": "054931e30506d2d85d6e5c9f49c3a19b35df4641c418397ff9366213afb00c56e389aefd0befaa97f10da237d3343cf422b3c2403ff08302a4df7e4a55a3f710_0", "is_ignored": false, "lines": "    memset(auStack_187f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 370, "offset": 10062}, "start": {"col": 25, "line": 370, "offset": 10061}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 24, "line": 370, "offset": 10060}, "start": {"col": 12, "line": 370, "offset": 10048}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 31, "line": 370, "offset": 10067}, "start": {"col": 27, "line": 370, "offset": 10063}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 370, "offset": 10041}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 372, "offset": 10122}, "extra": {"engine_kind": "OSS", "fingerprint": "badac76df43068d2ae0919c8e6047cdb2b1884dab4d25e15b8567deb61bed5fcac5f45018bfc20e4adea6c205aa743dbcb166bc41ff922c7c8f3031223111534_0", "is_ignored": false, "lines": "    memset(auStack_c67,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 372, "offset": 10116}, "start": {"col": 24, "line": 372, "offset": 10115}}, "$DST": {"abstract_content": "auStack_c67", "end": {"col": 23, "line": 372, "offset": 10114}, "start": {"col": 12, "line": 372, "offset": 10103}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 30, "line": 372, "offset": 10121}, "start": {"col": 26, "line": 372, "offset": 10117}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 372, "offset": 10096}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 374, "offset": 10178}, "extra": {"engine_kind": "OSS", "fingerprint": "49457833476d56342560f0c45297a34d6469d9562878ff1548bf44b93a80b3826273498cb67ab2938e38e586dabfdbfa6f6d7dd8d60509c787363a884fce2d91_0", "is_ignored": false, "lines": "    memset(auStack_1c7f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 374, "offset": 10172}, "start": {"col": 25, "line": 374, "offset": 10171}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 24, "line": 374, "offset": 10170}, "start": {"col": 12, "line": 374, "offset": 10158}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 31, "line": 374, "offset": 10177}, "start": {"col": 27, "line": 374, "offset": 10173}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 374, "offset": 10151}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 376, "offset": 10230}, "extra": {"engine_kind": "OSS", "fingerprint": "bde4fd8439caa676f960696fc83af2a8617d31310e2124346a2a0f9088f66aaf3f77b59b2d2312fcdf91265bcda714865b37be327d139c03a427bf31aebc21a4_0", "is_ignored": false, "lines": "    memset(&local_1d7f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 376, "offset": 10224}, "start": {"col": 24, "line": 376, "offset": 10223}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 23, "line": 376, "offset": 10222}, "start": {"col": 12, "line": 376, "offset": 10211}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 30, "line": 376, "offset": 10229}, "start": {"col": 26, "line": 376, "offset": 10225}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 376, "offset": 10204}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 378, "offset": 10286}, "extra": {"engine_kind": "OSS", "fingerprint": "7912f3992dcd3afc17afd7c0e5b328a8b496912bba3e48374b1ec1d5f04d3b233e88a231d7b1b5d10b170eb10e260a6375c0ebc116eaf81bec47f4d5a4035799_0", "is_ignored": false, "lines": "    memset(auStack_1e7f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 378, "offset": 10280}, "start": {"col": 25, "line": 378, "offset": 10279}}, "$DST": {"abstract_content": "auStack_1e7f", "end": {"col": 24, "line": 378, "offset": 10278}, "start": {"col": 12, "line": 378, "offset": 10266}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 31, "line": 378, "offset": 10285}, "start": {"col": 27, "line": 378, "offset": 10281}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 378, "offset": 10259}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 410, "offset": 11390}, "extra": {"engine_kind": "OSS", "fingerprint": "8248e9e41ed1c843f5d396ceecc17e28c778c3133ee19ab6314035fc99a00a3dd2c3a44f4db2463633b9d11db167be8e5b8192d9ecfb6bd477b872088b83be28_1", "is_ignored": false, "lines": "      memset(auStack_1f0f,0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 410, "offset": 11385}, "start": {"col": 27, "line": 410, "offset": 11384}}, "$DST": {"abstract_content": "auStack_1f0f", "end": {"col": 26, "line": 410, "offset": 11383}, "start": {"col": 14, "line": 410, "offset": 11371}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 32, "line": 410, "offset": 11389}, "start": {"col": 29, "line": 410, "offset": 11386}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 410, "offset": 11364}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 412, "offset": 11449}, "extra": {"engine_kind": "OSS", "fingerprint": "97c67830d34eb112ea8fa2c955c71e80bf3a29eda633a8369201eac2d75ece0490d9c92b823222354dfe7941dbee0db03c8bb9c135d4faf90c743c5f1d631a20_1", "is_ignored": false, "lines": "      memset(auStack_1eff,0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 412, "offset": 11444}, "start": {"col": 27, "line": 412, "offset": 11443}}, "$DST": {"abstract_content": "auStack_1eff", "end": {"col": 26, "line": 412, "offset": 11442}, "start": {"col": 14, "line": 412, "offset": 11430}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 32, "line": 412, "offset": 11448}, "start": {"col": 29, "line": 412, "offset": 11445}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 412, "offset": 11423}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 414, "offset": 11543}, "extra": {"engine_kind": "OSS", "fingerprint": "f1664ab3ed1f28cea72da2e6d036d7c73506a6ad8f4606959ceb5d5e35c9b2a72cb2472bdba845f5f094ebf29e335558000b71a9b8317fd30e8e3bdb3ec772b1_1", "is_ignored": false, "lines": "      memset((void *)((int)&local_1ef0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 46, "line": 414, "offset": 11538}, "start": {"col": 45, "line": 414, "offset": 11537}}, "$DST": {"abstract_content": "(void*(int&local_1ef0+1", "end": {"col": 43, "line": 414, "offset": 11535}, "start": {"col": 14, "line": 414, "offset": 11506}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 50, "line": 414, "offset": 11542}, "start": {"col": 47, "line": 414, "offset": 11539}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 414, "offset": 11499}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 416, "offset": 11640}, "extra": {"engine_kind": "OSS", "fingerprint": "8e4646f06de0b125e3eb3073e264e9501f6d890944e9aeecad38db59adc23cd6e4c271bc20c07e7987081221b8e24d370e5821534cb67d463c8e8b6c965e8c66_1", "is_ignored": false, "lines": "      memset((void *)((int)&local_1eb0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 46, "line": 416, "offset": 11635}, "start": {"col": 45, "line": 416, "offset": 11634}}, "$DST": {"abstract_content": "(void*(int&local_1eb0+1", "end": {"col": 43, "line": 416, "offset": 11632}, "start": {"col": 14, "line": 416, "offset": 11603}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 50, "line": 416, "offset": 11639}, "start": {"col": 47, "line": 416, "offset": 11636}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 416, "offset": 11596}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 418, "offset": 11734}, "extra": {"engine_kind": "OSS", "fingerprint": "1f1de79acf536df5bf30020d484eddbbc4e7ea93a3266c7210cf47e7a6314585da38a3537d38e2c0b2eb2cb2b64cf7bffe1f2e5373733ac6abc04dc051793007_3", "is_ignored": false, "lines": "      memset((void *)((int)&local_1ed0 + 1),0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 46, "line": 418, "offset": 11729}, "start": {"col": 45, "line": 418, "offset": 11728}}, "$DST": {"abstract_content": "(void*(int&local_1ed0+1", "end": {"col": 43, "line": 418, "offset": 11726}, "start": {"col": 14, "line": 418, "offset": 11697}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 50, "line": 418, "offset": 11733}, "start": {"col": 47, "line": 418, "offset": 11730}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 418, "offset": 11690}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 420, "offset": 11794}, "extra": {"engine_kind": "OSS", "fingerprint": "7912f3992dcd3afc17afd7c0e5b328a8b496912bba3e48374b1ec1d5f04d3b233e88a231d7b1b5d10b170eb10e260a6375c0ebc116eaf81bec47f4d5a4035799_1", "is_ignored": false, "lines": "      memset(auStack_1e7f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 420, "offset": 11788}, "start": {"col": 27, "line": 420, "offset": 11787}}, "$DST": {"abstract_content": "auStack_1e7f", "end": {"col": 26, "line": 420, "offset": 11786}, "start": {"col": 14, "line": 420, "offset": 11774}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 33, "line": 420, "offset": 11793}, "start": {"col": 29, "line": 420, "offset": 11789}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 420, "offset": 11767}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 422, "offset": 11850}, "extra": {"engine_kind": "OSS", "fingerprint": "bde4fd8439caa676f960696fc83af2a8617d31310e2124346a2a0f9088f66aaf3f77b59b2d2312fcdf91265bcda714865b37be327d139c03a427bf31aebc21a4_1", "is_ignored": false, "lines": "      memset(&local_1d7f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 422, "offset": 11844}, "start": {"col": 26, "line": 422, "offset": 11843}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 25, "line": 422, "offset": 11842}, "start": {"col": 14, "line": 422, "offset": 11831}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 32, "line": 422, "offset": 11849}, "start": {"col": 28, "line": 422, "offset": 11845}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 422, "offset": 11824}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 424, "offset": 11910}, "extra": {"engine_kind": "OSS", "fingerprint": "49457833476d56342560f0c45297a34d6469d9562878ff1548bf44b93a80b3826273498cb67ab2938e38e586dabfdbfa6f6d7dd8d60509c787363a884fce2d91_1", "is_ignored": false, "lines": "      memset(auStack_1c7f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 424, "offset": 11904}, "start": {"col": 27, "line": 424, "offset": 11903}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 26, "line": 424, "offset": 11902}, "start": {"col": 14, "line": 424, "offset": 11890}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 33, "line": 424, "offset": 11909}, "start": {"col": 29, "line": 424, "offset": 11905}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 424, "offset": 11883}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 426, "offset": 11968}, "extra": {"engine_kind": "OSS", "fingerprint": "badac76df43068d2ae0919c8e6047cdb2b1884dab4d25e15b8567deb61bed5fcac5f45018bfc20e4adea6c205aa743dbcb166bc41ff922c7c8f3031223111534_1", "is_ignored": false, "lines": "      memset(auStack_c67,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 426, "offset": 11962}, "start": {"col": 26, "line": 426, "offset": 11961}}, "$DST": {"abstract_content": "auStack_c67", "end": {"col": 25, "line": 426, "offset": 11960}, "start": {"col": 14, "line": 426, "offset": 11949}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 32, "line": 426, "offset": 11967}, "start": {"col": 28, "line": 426, "offset": 11963}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 426, "offset": 11942}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 428, "offset": 12028}, "extra": {"engine_kind": "OSS", "fingerprint": "054931e30506d2d85d6e5c9f49c3a19b35df4641c418397ff9366213afb00c56e389aefd0befaa97f10da237d3343cf422b3c2403ff08302a4df7e4a55a3f710_1", "is_ignored": false, "lines": "      memset(auStack_187f,0,0x2f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 428, "offset": 12022}, "start": {"col": 27, "line": 428, "offset": 12021}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 26, "line": 428, "offset": 12020}, "start": {"col": 14, "line": 428, "offset": 12008}}, "$LEN": {"abstract_content": "0x2f", "end": {"col": 33, "line": 428, "offset": 12027}, "start": {"col": 29, "line": 428, "offset": 12023}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 428, "offset": 12001}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 33, "line": 432, "offset": 12178}, "extra": {"engine_kind": "OSS", "fingerprint": "b10169597531e8c3d5e434cfa4cba526ed8a16ac3db452f3bb83d5f8655e252e251d8225f80a3296e591dc8b6d069c1f65a2b50d4f4a8c958e0f20281d88190d_0", "is_ignored": false, "lines": "      strcpy(&local_1f10,pcVar9);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 432, "offset": 12152}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 33, "line": 432, "offset": 12178}, "extra": {"engine_kind": "OSS", "fingerprint": "ebcc5e8b816d0c423d2189984d5e4ae8a99f1819683c0f43f69b93ef75260ef44a4e5547a32175f8ad06d20c59028d666a22a30d2e1f7af5fe51382844c68ec5_0", "is_ignored": false, "lines": "      strcpy(&local_1f10,pcVar9);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 13, "line": 432, "offset": 12158}, "start": {"col": 7, "line": 432, "offset": 12152}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 432, "offset": 12152}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 33, "line": 436, "offset": 12329}, "extra": {"engine_kind": "OSS", "fingerprint": "b10169597531e8c3d5e434cfa4cba526ed8a16ac3db452f3bb83d5f8655e252e251d8225f80a3296e591dc8b6d069c1f65a2b50d4f4a8c958e0f20281d88190d_1", "is_ignored": false, "lines": "      strcpy(&local_1f00,pcVar9);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 436, "offset": 12303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 33, "line": 436, "offset": 12329}, "extra": {"engine_kind": "OSS", "fingerprint": "ebcc5e8b816d0c423d2189984d5e4ae8a99f1819683c0f43f69b93ef75260ef44a4e5547a32175f8ad06d20c59028d666a22a30d2e1f7af5fe51382844c68ec5_1", "is_ignored": false, "lines": "      strcpy(&local_1f00,pcVar9);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 13, "line": 436, "offset": 12309}, "start": {"col": 7, "line": 436, "offset": 12303}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 436, "offset": 12303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 41, "line": 440, "offset": 12474}, "extra": {"engine_kind": "OSS", "fingerprint": "b10169597531e8c3d5e434cfa4cba526ed8a16ac3db452f3bb83d5f8655e252e251d8225f80a3296e591dc8b6d069c1f65a2b50d4f4a8c958e0f20281d88190d_2", "is_ignored": false, "lines": "      strcpy((char *)&local_1ef0,pcVar9);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 440, "offset": 12440}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 440, "offset": 12474}, "extra": {"engine_kind": "OSS", "fingerprint": "ebcc5e8b816d0c423d2189984d5e4ae8a99f1819683c0f43f69b93ef75260ef44a4e5547a32175f8ad06d20c59028d666a22a30d2e1f7af5fe51382844c68ec5_2", "is_ignored": false, "lines": "      strcpy((char *)&local_1ef0,pcVar9);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 13, "line": 440, "offset": 12446}, "start": {"col": 7, "line": 440, "offset": 12440}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 440, "offset": 12440}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 41, "line": 444, "offset": 12615}, "extra": {"engine_kind": "OSS", "fingerprint": "b10169597531e8c3d5e434cfa4cba526ed8a16ac3db452f3bb83d5f8655e252e251d8225f80a3296e591dc8b6d069c1f65a2b50d4f4a8c958e0f20281d88190d_3", "is_ignored": false, "lines": "      strcpy((char *)&local_1eb0,pcVar9);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 444, "offset": 12581}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 444, "offset": 12615}, "extra": {"engine_kind": "OSS", "fingerprint": "ebcc5e8b816d0c423d2189984d5e4ae8a99f1819683c0f43f69b93ef75260ef44a4e5547a32175f8ad06d20c59028d666a22a30d2e1f7af5fe51382844c68ec5_3", "is_ignored": false, "lines": "      strcpy((char *)&local_1eb0,pcVar9);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 13, "line": 444, "offset": 12587}, "start": {"col": 7, "line": 444, "offset": 12581}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 444, "offset": 12581}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 41, "line": 448, "offset": 12757}, "extra": {"engine_kind": "OSS", "fingerprint": "b10169597531e8c3d5e434cfa4cba526ed8a16ac3db452f3bb83d5f8655e252e251d8225f80a3296e591dc8b6d069c1f65a2b50d4f4a8c958e0f20281d88190d_4", "is_ignored": false, "lines": "      strcpy((char *)&local_1ed0,pcVar9);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 448, "offset": 12723}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 448, "offset": 12757}, "extra": {"engine_kind": "OSS", "fingerprint": "ebcc5e8b816d0c423d2189984d5e4ae8a99f1819683c0f43f69b93ef75260ef44a4e5547a32175f8ad06d20c59028d666a22a30d2e1f7af5fe51382844c68ec5_4", "is_ignored": false, "lines": "      strcpy((char *)&local_1ed0,pcVar9);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 13, "line": 448, "offset": 12729}, "start": {"col": 7, "line": 448, "offset": 12723}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 448, "offset": 12723}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 465, "offset": 13388}, "extra": {"engine_kind": "OSS", "fingerprint": "ad27cf9d44436d3ce2bc72336d33a6a41971cecb3aeb5f441174ed52fd97c496ae410151e75f9b4f02b104b955a18930350f12d75c500cfa891e20d848785ff1_4", "is_ignored": false, "lines": "      memset(auStack_187f,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 465, "offset": 13382}, "start": {"col": 27, "line": 465, "offset": 13381}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 26, "line": 465, "offset": 13380}, "start": {"col": 14, "line": 465, "offset": 13368}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 33, "line": 465, "offset": 13387}, "start": {"col": 29, "line": 465, "offset": 13383}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 465, "offset": 13361}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 467, "offset": 13446}, "extra": {"engine_kind": "OSS", "fingerprint": "97dbc37c9a93793f329b9808d6d9baaef769dfe23f71f40d8786ca899726a814991da57146634200ba1eea75cf4e924aec697dd51f4f9295acd26d2d40fa0d66_0", "is_ignored": false, "lines": "      memset(auStack_c67,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 467, "offset": 13440}, "start": {"col": 26, "line": 467, "offset": 13439}}, "$DST": {"abstract_content": "auStack_c67", "end": {"col": 25, "line": 467, "offset": 13438}, "start": {"col": 14, "line": 467, "offset": 13427}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 32, "line": 467, "offset": 13445}, "start": {"col": 28, "line": 467, "offset": 13441}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 467, "offset": 13420}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 469, "offset": 13506}, "extra": {"engine_kind": "OSS", "fingerprint": "6c9bcd973f7b09ef48efaf93e570aad68389d78c64e42f7b5589dedd1a5f33ff0d52d961d21ab8a1aa752c8b354934ad014129a3ff38e90c79f817dd9249fd7d_4", "is_ignored": false, "lines": "      memset(auStack_1c7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 469, "offset": 13500}, "start": {"col": 27, "line": 469, "offset": 13499}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 26, "line": 469, "offset": 13498}, "start": {"col": 14, "line": 469, "offset": 13486}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 33, "line": 469, "offset": 13505}, "start": {"col": 29, "line": 469, "offset": 13501}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 469, "offset": 13479}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 471, "offset": 13562}, "extra": {"engine_kind": "OSS", "fingerprint": "e06a5321f7756e2ee046638debfe77f2251e12c9b03722fefef2d9a0f1fde2a0860c33a5368360e26d439a671857677e5c620bf47cbe655beb03f9a0ccd0317f_0", "is_ignored": false, "lines": "      memset(&local_1d7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 471, "offset": 13556}, "start": {"col": 26, "line": 471, "offset": 13555}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 25, "line": 471, "offset": 13554}, "start": {"col": 14, "line": 471, "offset": 13543}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 32, "line": 471, "offset": 13561}, "start": {"col": 28, "line": 471, "offset": 13557}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 471, "offset": 13536}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 500, "offset": 14435}, "extra": {"engine_kind": "OSS", "fingerprint": "97dbc37c9a93793f329b9808d6d9baaef769dfe23f71f40d8786ca899726a814991da57146634200ba1eea75cf4e924aec697dd51f4f9295acd26d2d40fa0d66_1", "is_ignored": false, "lines": "      memset(auStack_c67,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 500, "offset": 14429}, "start": {"col": 26, "line": 500, "offset": 14428}}, "$DST": {"abstract_content": "auStack_c67", "end": {"col": 25, "line": 500, "offset": 14427}, "start": {"col": 14, "line": 500, "offset": 14416}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 32, "line": 500, "offset": 14434}, "start": {"col": 28, "line": 500, "offset": 14430}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 500, "offset": 14409}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 502, "offset": 14530}, "extra": {"engine_kind": "OSS", "fingerprint": "063d54ed5ea5b00449eb13e4273f2a6bb8f20a3e022d3178ea93d0299ca86d0bd7e89f3c01478a0103f9fe00fb346db3128a98c1dc34a7b77802263f12fe2134_0", "is_ignored": false, "lines": "      memset((void *)((int)&local_1ef0 + 1),0,0x1f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 46, "line": 502, "offset": 14524}, "start": {"col": 45, "line": 502, "offset": 14523}}, "$DST": {"abstract_content": "(void*(int&local_1ef0+1", "end": {"col": 43, "line": 502, "offset": 14521}, "start": {"col": 14, "line": 502, "offset": 14492}}, "$LEN": {"abstract_content": "0x1f", "end": {"col": 51, "line": 502, "offset": 14529}, "start": {"col": 47, "line": 502, "offset": 14525}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 502, "offset": 14485}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 504, "offset": 14590}, "extra": {"engine_kind": "OSS", "fingerprint": "b2b577964e1215be6bd9858e4b6bdb3a819d4a8c4c0abc18a6df8d5ac5b7e47fb15d19bc89be01508528b267e6668e614e0fc38f47808fe533d26efb5e129d76_0", "is_ignored": false, "lines": "      memset(auStack_1c7f,0,0x7f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 504, "offset": 14584}, "start": {"col": 27, "line": 504, "offset": 14583}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 26, "line": 504, "offset": 14582}, "start": {"col": 14, "line": 504, "offset": 14570}}, "$LEN": {"abstract_content": "0x7f", "end": {"col": 33, "line": 504, "offset": 14589}, "start": {"col": 29, "line": 504, "offset": 14585}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 504, "offset": 14563}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 513, "offset": 14800}, "extra": {"engine_kind": "OSS", "fingerprint": "e06a5321f7756e2ee046638debfe77f2251e12c9b03722fefef2d9a0f1fde2a0860c33a5368360e26d439a671857677e5c620bf47cbe655beb03f9a0ccd0317f_1", "is_ignored": false, "lines": "      memset(&local_1d7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 513, "offset": 14794}, "start": {"col": 26, "line": 513, "offset": 14793}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 25, "line": 513, "offset": 14792}, "start": {"col": 14, "line": 513, "offset": 14781}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 32, "line": 513, "offset": 14799}, "start": {"col": 28, "line": 513, "offset": 14795}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 513, "offset": 14774}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 515, "offset": 14860}, "extra": {"engine_kind": "OSS", "fingerprint": "a11ed9a3813786a13b3fb18d33f0aab6cd9366877f8a431bb6a7d2754385a2752157576eac6f3f785b5d939209b3bedb1cb92a9baabee355a66a5b543aa54cfd_0", "is_ignored": false, "lines": "      memset(auStack_187f,0,0x5f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 515, "offset": 14854}, "start": {"col": 27, "line": 515, "offset": 14853}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 26, "line": 515, "offset": 14852}, "start": {"col": 14, "line": 515, "offset": 14840}}, "$LEN": {"abstract_content": "0x5f", "end": {"col": 33, "line": 515, "offset": 14859}, "start": {"col": 29, "line": 515, "offset": 14855}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 515, "offset": 14833}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 517, "offset": 14920}, "extra": {"engine_kind": "OSS", "fingerprint": "b12ca9fe65ac58f9d737b48eef64c84ca100c51731ecb2998b9a672be161b152f78c59612679bf5c8c94700de2b2159d315e902138c6d6d2afe0d92aad8d20dc_0", "is_ignored": false, "lines": "      memset(auStack_1e7f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 517, "offset": 14914}, "start": {"col": 27, "line": 517, "offset": 14913}}, "$DST": {"abstract_content": "auStack_1e7f", "end": {"col": 26, "line": 517, "offset": 14912}, "start": {"col": 14, "line": 517, "offset": 14900}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 33, "line": 517, "offset": 14919}, "start": {"col": 29, "line": 517, "offset": 14915}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 517, "offset": 14893}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 57, "line": 525, "offset": 15353}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_4", "is_ignored": false, "lines": "      sprintf((char *)&local_1eb0,\"WEPKey%d\",local_1f14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 14, "line": 525, "offset": 15310}, "start": {"col": 7, "line": 525, "offset": 15303}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 7, "line": 525, "offset": 15303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 81, "line": 629, "offset": 18248}, "extra": {"engine_kind": "OSS", "fingerprint": "3eb8424352372c70a7f707b5d08f3cb21102a761832939cb3111f598b581af1f4697688dfb90697c4a2fbb54e43cd62f403570e5f11b9b661a797b82c22f6736_0", "is_ignored": false, "lines": "        iVar1 = sscanf((char *)(local_1ed0 + 4),\"%d:%d\",&local_1f18,&local_1f1c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 23, "line": 629, "offset": 18190}, "start": {"col": 17, "line": 629, "offset": 18184}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 17, "line": 629, "offset": 18184}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 46, "line": 635, "offset": 18432}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_5", "is_ignored": false, "lines": "            sprintf((char *)&local_1eb0,\"%d\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 20, "line": 635, "offset": 18406}, "start": {"col": 13, "line": 635, "offset": 18399}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 13, "line": 635, "offset": 18399}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 47, "line": 638, "offset": 18509}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_6", "is_ignored": false, "lines": "            sprintf((char *)&local_1eb0,\"-%d\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 20, "line": 638, "offset": 18482}, "start": {"col": 13, "line": 638, "offset": 18475}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 13, "line": 638, "offset": 18475}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 642, "offset": 18602}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_7", "is_ignored": false, "lines": "          sprintf((char *)&local_1eb0,\"%d\",local_1f18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 642, "offset": 18565}, "start": {"col": 11, "line": 642, "offset": 18558}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 642, "offset": 18558}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 670, "offset": 19433}, "extra": {"engine_kind": "OSS", "fingerprint": "b12ca9fe65ac58f9d737b48eef64c84ca100c51731ecb2998b9a672be161b152f78c59612679bf5c8c94700de2b2159d315e902138c6d6d2afe0d92aad8d20dc_1", "is_ignored": false, "lines": "        memset(auStack_1e7f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 30, "line": 670, "offset": 19427}, "start": {"col": 29, "line": 670, "offset": 19426}}, "$DST": {"abstract_content": "auStack_1e7f", "end": {"col": 28, "line": 670, "offset": 19425}, "start": {"col": 16, "line": 670, "offset": 19413}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 35, "line": 670, "offset": 19432}, "start": {"col": 31, "line": 670, "offset": 19428}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 9, "line": 670, "offset": 19406}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 81, "line": 682, "offset": 19904}, "extra": {"engine_kind": "OSS", "fingerprint": "3eb8424352372c70a7f707b5d08f3cb21102a761832939cb3111f598b581af1f4697688dfb90697c4a2fbb54e43cd62f403570e5f11b9b661a797b82c22f6736_1", "is_ignored": false, "lines": "        iVar1 = sscanf((char *)(local_1ef0 + 4),\"%d:%d\",&local_1f18,&local_1f14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 23, "line": 682, "offset": 19846}, "start": {"col": 17, "line": 682, "offset": 19840}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 17, "line": 682, "offset": 19840}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 48, "line": 686, "offset": 20064}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_8", "is_ignored": false, "lines": "              sprintf((char *)&local_1ed0,\"%d\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 22, "line": 686, "offset": 20038}, "start": {"col": 15, "line": 686, "offset": 20031}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 15, "line": 686, "offset": 20031}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 49, "line": 689, "offset": 20147}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_9", "is_ignored": false, "lines": "              sprintf((char *)&local_1ed0,\"-%d\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 22, "line": 689, "offset": 20120}, "start": {"col": 15, "line": 689, "offset": 20113}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 15, "line": 689, "offset": 20113}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 57, "line": 693, "offset": 20248}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_10", "is_ignored": false, "lines": "            sprintf((char *)&local_1ed0,\"%d\",local_1f18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 20, "line": 693, "offset": 20211}, "start": {"col": 13, "line": 693, "offset": 20204}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 13, "line": 693, "offset": 20204}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 708, "offset": 20761}, "extra": {"engine_kind": "OSS", "fingerprint": "e15d90786c8424e82419c28a358fe3080da03ea8f0fa5cd878582708c938ea7f93fa6d9fb3efb782432a1a5e293ab605c8d62ee80a643abe8ab3e3a63bdec769_0", "is_ignored": false, "lines": "        pFVar2 = fopen(\"/mnt/flash/config/lrmapping.dat\",\"rb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 23, "line": 708, "offset": 20721}, "start": {"col": 18, "line": 708, "offset": 20716}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 18, "line": 708, "offset": 20716}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-wraparound", "end": {"col": 43, "line": 715, "offset": 20954}, "extra": {"engine_kind": "OSS", "fingerprint": "652faa3a3606dc2e07aa88b593e3723549bb5129ff2e1171454dabb778ae92309f201076912e861342173a11e7a1cafeb1ffab32ba7e07dc1d863eda385eb46e_0", "is_ignored": false, "lines": "        pcVar9 = (char *)malloc(sVar3 + 1);", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/190", "https://cwe.mitre.org/data/definitions/128", "https://cwe.mitre.org/data/definitions/131", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 32, "line": 715, "offset": 20943}, "start": {"col": 26, "line": 715, "offset": 20937}}, "$X": {"abstract_content": "sVar3", "end": {"col": 38, "line": 715, "offset": 20949}, "propagated_value": {"svalue_abstract_content": "ftell(pFVar2)", "svalue_end": {"col": 30, "line": 713, "offset": 20886}, "svalue_start": {"col": 17, "line": 713, "offset": 20873}}, "start": {"col": 33, "line": 715, "offset": 20944}}, "$Y": {"abstract_content": "1", "end": {"col": 42, "line": 715, "offset": 20953}, "start": {"col": 41, "line": 715, "offset": 20952}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 26, "line": 715, "offset": 20937}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 43, "line": 715, "offset": 20954}, "extra": {"engine_kind": "OSS", "fingerprint": "33a0ff7c6c0aa21e0ee3cb9b5ca1eeb23a90af0cb7b69012416c75673aa3831f940cf64c82e4283e8d2e0bae685976fcadd61f8673b9f5636e2b26c5550c724e_0", "is_ignored": false, "lines": "        pcVar9 = (char *)malloc(sVar3 + 1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 32, "line": 715, "offset": 20943}, "start": {"col": 26, "line": 715, "offset": 20937}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 26, "line": 715, "offset": 20937}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 20, "line": 718, "offset": 21050}, "extra": {"engine_kind": "OSS", "fingerprint": "84de5e458535e0d6e2d84be184a4a9848ad6f3f79883dd73d162ea7d2b182e009db5db8f8061e565bc825d88adba515fa33803df89dca323c7ddeb8551d85e36_0", "is_ignored": false, "lines": "          sVar6 = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 20, "line": 718, "offset": 21050}, "start": {"col": 19, "line": 718, "offset": 21049}}, "$UNSIGNED": {"abstract_content": "sVar6", "end": {"col": 16, "line": 718, "offset": 21046}, "start": {"col": 11, "line": 718, "offset": 21041}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 718, "offset": 21041}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 729, "offset": 21379}, "extra": {"engine_kind": "OSS", "fingerprint": "876aed300b0d795780ec9f7853dd7b133fa70f464f5de47dba3273985d381548c402b626f88d08e594e8b0ce78054b5b26b40211c58aaf8c5d4b6d82b853a0f5_0", "is_ignored": false, "lines": "            sVar6 = fread(pcVar9,1,sVar3,pFVar2);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "1", "end": {"col": 35, "line": 729, "offset": 21365}, "start": {"col": 34, "line": 729, "offset": 21364}}, "$UNSIGNED": {"abstract_content": "sVar6", "end": {"col": 18, "line": 729, "offset": 21348}, "start": {"col": 13, "line": 729, "offset": 21343}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 13, "line": 729, "offset": 21343}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 49, "line": 729, "offset": 21379}, "extra": {"engine_kind": "OSS", "fingerprint": "32d92a177b05ac29707c0fb924d2e9f971d6188da4920fe0bfd9fba313417b2f6d6383cdd7190fb750a6db62f6a4241300636f79d82f402a8a26a47d59543cf7_0", "is_ignored": false, "lines": "            sVar6 = fread(pcVar9,1,sVar3,pFVar2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fread", "end": {"col": 26, "line": 729, "offset": 21356}, "start": {"col": 21, "line": 729, "offset": 21351}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 21, "line": 729, "offset": 21351}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 729, "offset": 21379}, "extra": {"engine_kind": "OSS", "fingerprint": "c8614004d3526b69f578311803c9920f4c8102aeb49a5df8af1894c4a58cf67b046388c535090469a8a0efac87c8c1a0cab235c231fdaa14ca88cebe0e8a0a81_0", "is_ignored": false, "lines": "            sVar6 = fread(pcVar9,1,sVar3,pFVar2);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$FS": {"abstract_content": "pFVar2", "end": {"col": 48, "line": 729, "offset": 21378}, "propagated_value": {"svalue_abstract_content": "fopen(\"/mnt/flash/config/lrmapping.dat\"\"rb\")", "svalue_end": {"col": 63, "line": 708, "offset": 20761}, "svalue_start": {"col": 18, "line": 708, "offset": 20716}}, "start": {"col": 42, "line": 729, "offset": 21372}}, "$LEN": {"abstract_content": "1", "end": {"col": 35, "line": 729, "offset": 21365}, "start": {"col": 34, "line": 729, "offset": 21364}}, "$NITEMS": {"abstract_content": "sVar3", "end": {"col": 41, "line": 729, "offset": 21371}, "propagated_value": {"svalue_abstract_content": "ftell(pFVar2)", "svalue_end": {"col": 30, "line": 713, "offset": 20886}, "svalue_start": {"col": 17, "line": 713, "offset": 20873}}, "start": {"col": 36, "line": 729, "offset": 21366}}, "$PTR": {"abstract_content": "pcVar9", "end": {"col": 33, "line": 729, "offset": 21363}, "propagated_value": {"svalue_abstract_content": "pcVar9+sVar6", "svalue_end": {"col": 36, "line": 728, "offset": 21329}, "svalue_start": {"col": 22, "line": 728, "offset": 21315}}, "start": {"col": 27, "line": 729, "offset": 21357}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 21, "line": 729, "offset": 21351}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 756, "offset": 22154}, "extra": {"engine_kind": "OSS", "fingerprint": "ec49f5620528f4b40c1073ae751e3361188dbd01d8a331303486487e9b65a83afbdb4d794bdcadea3c1c187d3d9e138be747f71b8b57a0daecbf224ee8830690_0", "is_ignored": false, "lines": "          memset(auStack_187f,0,0x3ff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 32, "line": 756, "offset": 22147}, "start": {"col": 31, "line": 756, "offset": 22146}}, "$DST": {"abstract_content": "auStack_187f", "end": {"col": 30, "line": 756, "offset": 22145}, "start": {"col": 18, "line": 756, "offset": 22133}}, "$LEN": {"abstract_content": "0x3ff", "end": {"col": 38, "line": 756, "offset": 22153}, "start": {"col": 33, "line": 756, "offset": 22148}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 756, "offset": 22126}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 758, "offset": 22221}, "extra": {"engine_kind": "OSS", "fingerprint": "4918e1c7d579fa06f67bda2cb160283aa20312c573e23e4e37ad7cde79077f4f3af3cbce3eb24d3c7906e3277edc472c2316cbf89fad1041785ab74d8ac125e7_0", "is_ignored": false, "lines": "          memset(auStack_c67,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 758, "offset": 22214}, "start": {"col": 30, "line": 758, "offset": 22213}}, "$DST": {"abstract_content": "auStack_c67", "end": {"col": 29, "line": 758, "offset": 22212}, "start": {"col": 18, "line": 758, "offset": 22201}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 37, "line": 758, "offset": 22220}, "start": {"col": 32, "line": 758, "offset": 22215}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 758, "offset": 22194}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 56, "line": 760, "offset": 22324}, "extra": {"engine_kind": "OSS", "fingerprint": "063d54ed5ea5b00449eb13e4273f2a6bb8f20a3e022d3178ea93d0299ca86d0bd7e89f3c01478a0103f9fe00fb346db3128a98c1dc34a7b77802263f12fe2134_1", "is_ignored": false, "lines": "          memset((void *)((int)&local_1ef0 + 1),0,0x1f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 50, "line": 760, "offset": 22318}, "start": {"col": 49, "line": 760, "offset": 22317}}, "$DST": {"abstract_content": "(void*(int&local_1ef0+1", "end": {"col": 47, "line": 760, "offset": 22315}, "start": {"col": 18, "line": 760, "offset": 22286}}, "$LEN": {"abstract_content": "0x1f", "end": {"col": 55, "line": 760, "offset": 22323}, "start": {"col": 51, "line": 760, "offset": 22319}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 760, "offset": 22279}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 56, "line": 762, "offset": 22427}, "extra": {"engine_kind": "OSS", "fingerprint": "a5815a27571b8b129716276d7d6a9a5fc514977f5dafad1ad0373ab7856dd817b9b097834e9048d02c3a87261a9af8b7cd4861f48861f74e1666f48325267557_0", "is_ignored": false, "lines": "          memset((void *)((int)&local_1ed0 + 1),0,0x1f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 50, "line": 762, "offset": 22421}, "start": {"col": 49, "line": 762, "offset": 22420}}, "$DST": {"abstract_content": "(void*(int&local_1ed0+1", "end": {"col": 47, "line": 762, "offset": 22418}, "start": {"col": 18, "line": 762, "offset": 22389}}, "$LEN": {"abstract_content": "0x1f", "end": {"col": 55, "line": 762, "offset": 22426}, "start": {"col": 51, "line": 762, "offset": 22422}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 762, "offset": 22382}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 56, "line": 764, "offset": 22533}, "extra": {"engine_kind": "OSS", "fingerprint": "f014d4bfdbd1e8664f5f13db07d0e46e8010e148ebddf9b03436b54d4ed0102aef18227428d349ec8e4d33dc40a554cd088855fe032089b7c33ee970dae90dd8_0", "is_ignored": false, "lines": "          memset((void *)((int)&local_1eb0 + 1),0,0x1f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 50, "line": 764, "offset": 22527}, "start": {"col": 49, "line": 764, "offset": 22526}}, "$DST": {"abstract_content": "(void*(int&local_1eb0+1", "end": {"col": 47, "line": 764, "offset": 22524}, "start": {"col": 18, "line": 764, "offset": 22495}}, "$LEN": {"abstract_content": "0x1f", "end": {"col": 55, "line": 764, "offset": 22532}, "start": {"col": 51, "line": 764, "offset": 22528}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 764, "offset": 22488}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 766, "offset": 22601}, "extra": {"engine_kind": "OSS", "fingerprint": "b12ca9fe65ac58f9d737b48eef64c84ca100c51731ecb2998b9a672be161b152f78c59612679bf5c8c94700de2b2159d315e902138c6d6d2afe0d92aad8d20dc_2", "is_ignored": false, "lines": "          memset(auStack_1e7f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 32, "line": 766, "offset": 22595}, "start": {"col": 31, "line": 766, "offset": 22594}}, "$DST": {"abstract_content": "auStack_1e7f", "end": {"col": 30, "line": 766, "offset": 22593}, "start": {"col": 18, "line": 766, "offset": 22581}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 37, "line": 766, "offset": 22600}, "start": {"col": 33, "line": 766, "offset": 22596}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 766, "offset": 22574}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 768, "offset": 22665}, "extra": {"engine_kind": "OSS", "fingerprint": "478077f51fac0b899c8e39523d0ef564b1c0746994079522b09984554fe87bccc8fbb3bf6bf76aa09591e7c4119eee2da7735c4cbb5f662d9da18beef007c02e_1", "is_ignored": false, "lines": "          memset(&local_1d7f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 768, "offset": 22659}, "start": {"col": 30, "line": 768, "offset": 22658}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 29, "line": 768, "offset": 22657}, "start": {"col": 18, "line": 768, "offset": 22646}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 36, "line": 768, "offset": 22664}, "start": {"col": 32, "line": 768, "offset": 22660}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 768, "offset": 22639}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 770, "offset": 22733}, "extra": {"engine_kind": "OSS", "fingerprint": "c62e57c33c36d37234d12268d311ae4b0b335640773476c23d9ee0d89048af36d7c32e8c92223499e7915e437806b0ebd834080aed4f2f6cb6f438ed1819b883_0", "is_ignored": false, "lines": "          memset(auStack_1c7f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 32, "line": 770, "offset": 22727}, "start": {"col": 31, "line": 770, "offset": 22726}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 30, "line": 770, "offset": 22725}, "start": {"col": 18, "line": 770, "offset": 22713}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 37, "line": 770, "offset": 22732}, "start": {"col": 33, "line": 770, "offset": 22728}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 770, "offset": 22706}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 771, "offset": 22772}, "extra": {"engine_kind": "OSS", "fingerprint": "1e6e24185eae67e6d70ce36b2ac51e7ad8a36403f29b57632a65c70cc3c48dd73288c352867e6cf3cb112b6d558ca25e91a290e0d1152b12874c360b308ebb21_0", "is_ignored": false, "lines": "          memset(&local_1880,0,0x400);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 771, "offset": 22765}, "start": {"col": 30, "line": 771, "offset": 22764}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 29, "line": 771, "offset": 22763}, "start": {"col": 18, "line": 771, "offset": 22752}}, "$LEN": {"abstract_content": "0x400", "end": {"col": 37, "line": 771, "offset": 22771}, "start": {"col": 32, "line": 771, "offset": 22766}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 771, "offset": 22745}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 35, "line": 773, "offset": 22841}, "extra": {"engine_kind": "OSS", "fingerprint": "cff05196a5806515e92a1627838ce95ce16afac2fe90c60bf2eb02bd8524a95c457c9e5456455fc9b148238d44316ecbd8bc7e187cea443091fc1f3fe75afc2f_0", "is_ignored": false, "lines": "          memset(local_4c,0,0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 773, "offset": 22834}, "start": {"col": 27, "line": 773, "offset": 22833}}, "$DST": {"abstract_content": "local_4c", "end": {"col": 26, "line": 773, "offset": 22832}, "start": {"col": 18, "line": 773, "offset": 22824}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 34, "line": 773, "offset": 22840}, "start": {"col": 29, "line": 773, "offset": 22835}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 773, "offset": 22817}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 774, "offset": 22879}, "extra": {"engine_kind": "OSS", "fingerprint": "357bcd27d267c5e4889d4160a747fac070164bc90827e4332835c735a18c1d382b4b5682c34a2383a0d6975554fbdf230a3a38fe080f228d52025356a8709d75_0", "is_ignored": false, "lines": "          memset(&local_1ef0,0,0x20);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 774, "offset": 22873}, "start": {"col": 30, "line": 774, "offset": 22872}}, "$DST": {"abstract_content": "&local_1ef0", "end": {"col": 29, "line": 774, "offset": 22871}, "start": {"col": 18, "line": 774, "offset": 22860}}, "$LEN": {"abstract_content": "0x20", "end": {"col": 36, "line": 774, "offset": 22878}, "start": {"col": 32, "line": 774, "offset": 22874}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 774, "offset": 22853}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 775, "offset": 22917}, "extra": {"engine_kind": "OSS", "fingerprint": "cac1804779f059ae9a739a4e8bbce0ff4d352c51473098eeebca1796ef96c883260dc104e2e4f34da609d3a32ea1315ec315ad9655d476976a92932eb6bf602e_0", "is_ignored": false, "lines": "          memset(&local_1ed0,0,0x20);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 775, "offset": 22911}, "start": {"col": 30, "line": 775, "offset": 22910}}, "$DST": {"abstract_content": "&local_1ed0", "end": {"col": 29, "line": 775, "offset": 22909}, "start": {"col": 18, "line": 775, "offset": 22898}}, "$LEN": {"abstract_content": "0x20", "end": {"col": 36, "line": 775, "offset": 22916}, "start": {"col": 32, "line": 775, "offset": 22912}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 775, "offset": 22891}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 776, "offset": 22955}, "extra": {"engine_kind": "OSS", "fingerprint": "529bb5b34ed9832883b9b2b587f2f4801f56e3221f21f7ee593ed31587fccb7fe8d5b162507b64f44d0da2e3972d463155afe28df0c8406e307648a870c8ea57_0", "is_ignored": false, "lines": "          memset(&local_1eb0,0,0x20);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 776, "offset": 22949}, "start": {"col": 30, "line": 776, "offset": 22948}}, "$DST": {"abstract_content": "&local_1eb0", "end": {"col": 29, "line": 776, "offset": 22947}, "start": {"col": 18, "line": 776, "offset": 22936}}, "$LEN": {"abstract_content": "0x20", "end": {"col": 36, "line": 776, "offset": 22954}, "start": {"col": 32, "line": 776, "offset": 22950}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 776, "offset": 22929}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 777, "offset": 22994}, "extra": {"engine_kind": "OSS", "fingerprint": "52bbc0eec3b8dc12508367a126cb14951d704530dfc17390dbb47e0e9c443e60b287d360b03825975ab9d64803ab4d575467f6023a0274fb87ca71fb1bafb19b_0", "is_ignored": false, "lines": "          memset(&local_1e80,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 777, "offset": 22987}, "start": {"col": 30, "line": 777, "offset": 22986}}, "$DST": {"abstract_content": "&local_1e80", "end": {"col": 29, "line": 777, "offset": 22985}, "start": {"col": 18, "line": 777, "offset": 22974}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 37, "line": 777, "offset": 22993}, "start": {"col": 32, "line": 777, "offset": 22988}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 777, "offset": 22967}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 35, "line": 779, "offset": 23064}, "extra": {"engine_kind": "OSS", "fingerprint": "b8c525888bfa9ec4a1b800bd738b9cf03080e3dc507b2fec515717bafa6be12a4a6a63bfa463f8979d0c4c89fb4c40e9ae0dd888fa9f090ac6621f38255c25ac_0", "is_ignored": false, "lines": "          memset(local_50,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 28, "line": 779, "offset": 23057}, "start": {"col": 27, "line": 779, "offset": 23056}}, "$DST": {"abstract_content": "local_50", "end": {"col": 26, "line": 779, "offset": 23055}, "start": {"col": 18, "line": 779, "offset": 23047}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 34, "line": 779, "offset": 23063}, "start": {"col": 29, "line": 779, "offset": 23058}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 779, "offset": 23040}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 780, "offset": 23103}, "extra": {"engine_kind": "OSS", "fingerprint": "aad37b763bd9591a0158aa724105e9fccf47a44e2b1a470916f6fe8d4ef0b346f0785146b0ae739edd2ce747fe93cc96cab1cffdc6ee33e58d3f3cd152ab1415_0", "is_ignored": false, "lines": "          memset(&local_1c80,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 780, "offset": 23096}, "start": {"col": 30, "line": 780, "offset": 23095}}, "$DST": {"abstract_content": "&local_1c80", "end": {"col": 29, "line": 780, "offset": 23094}, "start": {"col": 18, "line": 780, "offset": 23083}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 37, "line": 780, "offset": 23102}, "start": {"col": 32, "line": 780, "offset": 23097}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 780, "offset": 23076}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 32, "line": 789, "offset": 23730}, "extra": {"engine_kind": "OSS", "fingerprint": "9b376fe2f540e699edad4d0434e378060b57188da99342812013afd08a1729d79685b519e8563dbc731582e1ddd57d446d9f3cff4dd023ac8af7c6760fa3f8d0_0", "is_ignored": false, "lines": "          sprintf(&local_1e80,\n                  \"{\\\"ModuleID\\\":\\\"1\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Reactor\\\",\\\"Type\\\":\\\"Camera\\\",\\\"SubType\\\":\\\"Camera Module\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"\n                  ,&local_1ef0);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"{\\\"ModuleID\\\":\\\"1\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Reactor\\\",\\\"Type\\\":\\\"Camera\\\",\\\"SubType\\\":\\\"Camera Module\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"", "end": {"col": 152, "line": 1, "offset": 151}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "&local_1e80", "end": {"col": 30, "line": 787, "offset": 23527}, "start": {"col": 19, "line": 787, "offset": 23516}}, "$FMT": {"abstract_content": "\"{\\\"ModuleID\\\":\\\"1\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Reactor\\\",\\\"Type\\\":\\\"Camera\\\",\\\"SubType\\\":\\\"Camera Module\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"", "end": {"col": 170, "line": 788, "offset": 23698}, "start": {"col": 19, "line": 788, "offset": 23547}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 787, "offset": 23508}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 789, "offset": 23730}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_11", "is_ignored": false, "lines": "          sprintf(&local_1e80,\n                  \"{\\\"ModuleID\\\":\\\"1\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Reactor\\\",\\\"Type\\\":\\\"Camera\\\",\\\"SubType\\\":\\\"Camera Module\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"\n                  ,&local_1ef0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 787, "offset": 23515}, "start": {"col": 11, "line": 787, "offset": 23508}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 787, "offset": 23508}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 32, "line": 792, "offset": 23983}, "extra": {"engine_kind": "OSS", "fingerprint": "fb4fd82ccb857c40cfb21d783d1523cdf0c2519fa16fbe6c827b8d4892c04c6e8608101918a66e70b5fca15bee5339197d71c567446db80a76864a340500310d_0", "is_ignored": false, "lines": "          sprintf((char *)local_50,\n                  \"{\\\"ModuleID\\\":\\\"2\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Optical Recognition\\\",\\\"SubType\\\":\\\"Motion Sensor\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"\n                  ,&local_1ed0);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"{\\\"ModuleID\\\":\\\"2\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Optical Recognition\\\",\\\"SubType\\\":\\\"Motion Sensor\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"", "end": {"col": 166, "line": 1, "offset": 165}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "(char*local_50", "end": {"col": 35, "line": 790, "offset": 23766}, "start": {"col": 19, "line": 790, "offset": 23750}}, "$FMT": {"abstract_content": "\"{\\\"ModuleID\\\":\\\"2\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Optical Recognition\\\",\\\"SubType\\\":\\\"Motion Sensor\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"", "end": {"col": 184, "line": 791, "offset": 23951}, "start": {"col": 19, "line": 791, "offset": 23786}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 790, "offset": 23742}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 792, "offset": 23983}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_12", "is_ignored": false, "lines": "          sprintf((char *)local_50,\n                  \"{\\\"ModuleID\\\":\\\"2\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Optical Recognition\\\",\\\"SubType\\\":\\\"Motion Sensor\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"\n                  ,&local_1ed0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 790, "offset": 23749}, "start": {"col": 11, "line": 790, "offset": 23742}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 790, "offset": 23742}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 32, "line": 795, "offset": 24233}, "extra": {"engine_kind": "OSS", "fingerprint": "e95d5788ce838903e69fe123b2d256c305dc901b8a4ab48260ece9648c0d562df17ed8c5c90ab70119a0641cde7be50072687d2ca955da594184ae8fe25a8cf2_0", "is_ignored": false, "lines": "          sprintf(&local_1c80,\n                  \"{\\\"ModuleID\\\":\\\"3\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Environmental Sensor\\\",\\\"SubType\\\":\\\"Sound Detector\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"\n                  ,&local_1eb0);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"{\\\"ModuleID\\\":\\\"3\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Environmental Sensor\\\",\\\"SubType\\\":\\\"Sound Detector\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"", "end": {"col": 168, "line": 1, "offset": 167}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "&local_1c80", "end": {"col": 30, "line": 793, "offset": 24014}, "start": {"col": 19, "line": 793, "offset": 24003}}, "$FMT": {"abstract_content": "\"{\\\"ModuleID\\\":\\\"3\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Environmental Sensor\\\",\\\"SubType\\\":\\\"Sound Detector\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"", "end": {"col": 186, "line": 794, "offset": 24201}, "start": {"col": 19, "line": 794, "offset": 24034}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 793, "offset": 23995}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 795, "offset": 24233}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_13", "is_ignored": false, "lines": "          sprintf(&local_1c80,\n                  \"{\\\"ModuleID\\\":\\\"3\\\",\\\"NickName\\\":\\\"%s\\\",\\\"OPStatus\\\":\\\"1\\\",\\\"Cat\\\":\\\"Notifier\\\",\\\"Type\\\":\\\"Environmental Sensor\\\",\\\"SubType\\\":\\\"Sound Detector\\\",\\\"IsBuiltIn\\\":\\\"1\\\"}\"\n                  ,&local_1eb0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 793, "offset": 24002}, "start": {"col": 11, "line": 793, "offset": 23995}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 793, "offset": 23995}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 94, "line": 796, "offset": 24328}, "extra": {"engine_kind": "OSS", "fingerprint": "7328ba9aec6b2b2f9540251c5a0f6036ebfd96d90471020333938d96d9efc14bb334b2747d7e1550f59d34e8583a1fcb88a73e6357c2b8e9a6182a22b4dd85eb_0", "is_ignored": false, "lines": "          sprintf(&local_1880,\"{\\\"ModuleInfo\\\":[%s,%s,%s]}\",&local_1e80,local_50,&local_1c80);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"{\\\"ModuleInfo\\\":[%s,%s,%s]}\"", "end": {"col": 30, "line": 1, "offset": 29}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "&local_1880", "end": {"col": 30, "line": 796, "offset": 24264}, "start": {"col": 19, "line": 796, "offset": 24253}}, "$FMT": {"abstract_content": "\"{\\\"ModuleInfo\\\":[%s,%s,%s]}\"", "end": {"col": 60, "line": 796, "offset": 24294}, "start": {"col": 31, "line": 796, "offset": 24265}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 796, "offset": 24245}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 94, "line": 796, "offset": 24328}, "extra": {"engine_kind": "OSS", "fingerprint": "217e7b268b61c4de456164eb4bce5701704a664d4a554fa129084e287da5fef91b7136d2f7b6b6eaf5787707b5354943a44d8f3862e76bf4611a34fa6380cc83_14", "is_ignored": false, "lines": "          sprintf(&local_1880,\"{\\\"ModuleInfo\\\":[%s,%s,%s]}\",&local_1e80,local_50,&local_1c80);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 796, "offset": 24252}, "start": {"col": 11, "line": 796, "offset": 24245}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 796, "offset": 24245}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 848, "offset": 26107}, "extra": {"engine_kind": "OSS", "fingerprint": "739ff8f10506877d1689f59708001baee675c3bfe5fcd878475d9b5df6c77703fce6a29f18f93b2650d6d624614e3f4e9289e180de8dae8158fb17b4769c1227_0", "is_ignored": false, "lines": "        memset((void *)((int)&local_1ef0 + 1),0,0x17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 48, "line": 848, "offset": 26101}, "start": {"col": 47, "line": 848, "offset": 26100}}, "$DST": {"abstract_content": "(void*(int&local_1ef0+1", "end": {"col": 45, "line": 848, "offset": 26098}, "start": {"col": 16, "line": 848, "offset": 26069}}, "$LEN": {"abstract_content": "0x17", "end": {"col": 53, "line": 848, "offset": 26106}, "start": {"col": 49, "line": 848, "offset": 26102}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 9, "line": 848, "offset": 26062}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 849, "offset": 26171}, "extra": {"engine_kind": "OSS", "fingerprint": "0895421a4829cb3b48bacc8a5a7b8623c64dbff0d1aa516a0902460ac8085ca972d358b9cb7d1eb2939d5eaa6f651f4035f682c902d5523d9690166d4e740a99_0", "is_ignored": false, "lines": "        system(\"/usr/sbin/makeDevUid 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 15, "line": 849, "offset": 26123}, "start": {"col": 9, "line": 849, "offset": 26117}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 9, "line": 849, "offset": 26117}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 864, "offset": 26626}, "extra": {"engine_kind": "OSS", "fingerprint": "e15d90786c8424e82419c28a358fe3080da03ea8f0fa5cd878582708c938ea7f93fa6d9fb3efb782432a1a5e293ab605c8d62ee80a643abe8ab3e3a63bdec769_1", "is_ignored": false, "lines": "      pFVar2 = fopen(\"/mnt/flash/config/lrunmapping.dat\",\"rb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 864, "offset": 26584}, "start": {"col": 16, "line": 864, "offset": 26579}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 16, "line": 864, "offset": 26579}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-wraparound", "end": {"col": 41, "line": 871, "offset": 26805}, "extra": {"engine_kind": "OSS", "fingerprint": "652faa3a3606dc2e07aa88b593e3723549bb5129ff2e1171454dabb778ae92309f201076912e861342173a11e7a1cafeb1ffab32ba7e07dc1d863eda385eb46e_1", "is_ignored": false, "lines": "      pcVar9 = (char *)malloc(sVar3 + 1);", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/190", "https://cwe.mitre.org/data/definitions/128", "https://cwe.mitre.org/data/definitions/131", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 30, "line": 871, "offset": 26794}, "start": {"col": 24, "line": 871, "offset": 26788}}, "$X": {"abstract_content": "sVar3", "end": {"col": 36, "line": 871, "offset": 26800}, "propagated_value": {"svalue_abstract_content": "ftell(pFVar2)", "svalue_end": {"col": 28, "line": 869, "offset": 26741}, "svalue_start": {"col": 15, "line": 869, "offset": 26728}}, "start": {"col": 31, "line": 871, "offset": 26795}}, "$Y": {"abstract_content": "1", "end": {"col": 40, "line": 871, "offset": 26804}, "start": {"col": 39, "line": 871, "offset": 26803}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 24, "line": 871, "offset": 26788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 871, "offset": 26805}, "extra": {"engine_kind": "OSS", "fingerprint": "33a0ff7c6c0aa21e0ee3cb9b5ca1eeb23a90af0cb7b69012416c75673aa3831f940cf64c82e4283e8d2e0bae685976fcadd61f8673b9f5636e2b26c5550c724e_1", "is_ignored": false, "lines": "      pcVar9 = (char *)malloc(sVar3 + 1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 30, "line": 871, "offset": 26794}, "start": {"col": 24, "line": 871, "offset": 26788}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 24, "line": 871, "offset": 26788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 18, "line": 874, "offset": 26895}, "extra": {"engine_kind": "OSS", "fingerprint": "84de5e458535e0d6e2d84be184a4a9848ad6f3f79883dd73d162ea7d2b182e009db5db8f8061e565bc825d88adba515fa33803df89dca323c7ddeb8551d85e36_1", "is_ignored": false, "lines": "        sVar6 = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 18, "line": 874, "offset": 26895}, "start": {"col": 17, "line": 874, "offset": 26894}}, "$UNSIGNED": {"abstract_content": "sVar6", "end": {"col": 14, "line": 874, "offset": 26891}, "start": {"col": 9, "line": 874, "offset": 26886}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 9, "line": 874, "offset": 26886}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 47, "line": 885, "offset": 27202}, "extra": {"engine_kind": "OSS", "fingerprint": "876aed300b0d795780ec9f7853dd7b133fa70f464f5de47dba3273985d381548c402b626f88d08e594e8b0ce78054b5b26b40211c58aaf8c5d4b6d82b853a0f5_1", "is_ignored": false, "lines": "          sVar6 = fread(pcVar9,1,sVar3,pFVar2);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "1", "end": {"col": 33, "line": 885, "offset": 27188}, "start": {"col": 32, "line": 885, "offset": 27187}}, "$UNSIGNED": {"abstract_content": "sVar6", "end": {"col": 16, "line": 885, "offset": 27171}, "start": {"col": 11, "line": 885, "offset": 27166}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 885, "offset": 27166}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 47, "line": 885, "offset": 27202}, "extra": {"engine_kind": "OSS", "fingerprint": "32d92a177b05ac29707c0fb924d2e9f971d6188da4920fe0bfd9fba313417b2f6d6383cdd7190fb750a6db62f6a4241300636f79d82f402a8a26a47d59543cf7_1", "is_ignored": false, "lines": "          sVar6 = fread(pcVar9,1,sVar3,pFVar2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fread", "end": {"col": 24, "line": 885, "offset": 27179}, "start": {"col": 19, "line": 885, "offset": 27174}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 19, "line": 885, "offset": 27174}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 47, "line": 885, "offset": 27202}, "extra": {"engine_kind": "OSS", "fingerprint": "c8614004d3526b69f578311803c9920f4c8102aeb49a5df8af1894c4a58cf67b046388c535090469a8a0efac87c8c1a0cab235c231fdaa14ca88cebe0e8a0a81_1", "is_ignored": false, "lines": "          sVar6 = fread(pcVar9,1,sVar3,pFVar2);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$FS": {"abstract_content": "pFVar2", "end": {"col": 46, "line": 885, "offset": 27201}, "propagated_value": {"svalue_abstract_content": "fopen(\"/mnt/flash/config/lrunmapping.dat\"\"rb\")", "svalue_end": {"col": 63, "line": 864, "offset": 26626}, "svalue_start": {"col": 16, "line": 864, "offset": 26579}}, "start": {"col": 40, "line": 885, "offset": 27195}}, "$LEN": {"abstract_content": "1", "end": {"col": 33, "line": 885, "offset": 27188}, "start": {"col": 32, "line": 885, "offset": 27187}}, "$NITEMS": {"abstract_content": "sVar3", "end": {"col": 39, "line": 885, "offset": 27194}, "propagated_value": {"svalue_abstract_content": "ftell(pFVar2)", "svalue_end": {"col": 28, "line": 869, "offset": 26741}, "svalue_start": {"col": 15, "line": 869, "offset": 26728}}, "start": {"col": 34, "line": 885, "offset": 27189}}, "$PTR": {"abstract_content": "pcVar9", "end": {"col": 31, "line": 885, "offset": 27186}, "propagated_value": {"svalue_abstract_content": "pcVar9+sVar6", "svalue_end": {"col": 34, "line": 884, "offset": 27154}, "svalue_start": {"col": 20, "line": 884, "offset": 27140}}, "start": {"col": 25, "line": 885, "offset": 27180}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 19, "line": 885, "offset": 27174}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 898, "offset": 27491}, "extra": {"engine_kind": "OSS", "fingerprint": "fc570ee168c3af13fb3407c2932a974762befb106ad447368ee1dbf3fbf6338347b11332b9efc8d5672850b6779ccd80363416d81b46b42276073d8316125aef_0", "is_ignored": false, "lines": "    memset(auStack_1c7f,0,0x3ff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 898, "offset": 27484}, "start": {"col": 25, "line": 898, "offset": 27483}}, "$DST": {"abstract_content": "auStack_1c7f", "end": {"col": 24, "line": 898, "offset": 27482}, "start": {"col": 12, "line": 898, "offset": 27470}}, "$LEN": {"abstract_content": "0x3ff", "end": {"col": 32, "line": 898, "offset": 27490}, "start": {"col": 27, "line": 898, "offset": 27485}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 898, "offset": 27463}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 900, "offset": 27543}, "extra": {"engine_kind": "OSS", "fingerprint": "e06a5321f7756e2ee046638debfe77f2251e12c9b03722fefef2d9a0f1fde2a0860c33a5368360e26d439a671857677e5c620bf47cbe655beb03f9a0ccd0317f_2", "is_ignored": false, "lines": "    memset(&local_1d7f,0,0xbf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 900, "offset": 27537}, "start": {"col": 24, "line": 900, "offset": 27536}}, "$DST": {"abstract_content": "&local_1d7f", "end": {"col": 23, "line": 900, "offset": 27535}, "start": {"col": 12, "line": 900, "offset": 27524}}, "$LEN": {"abstract_content": "0xbf", "end": {"col": 30, "line": 900, "offset": 27542}, "start": {"col": 26, "line": 900, "offset": 27538}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 5, "line": 900, "offset": 27517}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 901, "offset": 27580}, "extra": {"engine_kind": "OSS", "fingerprint": "33a0ff7c6c0aa21e0ee3cb9b5ca1eeb23a90af0cb7b69012416c75673aa3831f940cf64c82e4283e8d2e0bae685976fcadd61f8673b9f5636e2b26c5550c724e_2", "is_ignored": false, "lines": "    pcVar9 = (char *)malloc(0x5554);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 28, "line": 901, "offset": 27572}, "start": {"col": 22, "line": 901, "offset": 27566}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 22, "line": 901, "offset": 27566}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 901, "offset": 27580}, "extra": {"engine_kind": "OSS", "fingerprint": "f58ca4d61d6777a105419a787fd1185be4f4152a152dc60feeba7933493f90abed84031c8b445d9dca20ddfa27a26efdab32f0c411616ab36172c6d81e95c2bb_0", "is_ignored": false, "lines": "    pcVar9 = (char *)malloc(0x5554);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$LEN": {"abstract_content": "0x5554", "end": {"col": 35, "line": 901, "offset": 27579}, "start": {"col": 29, "line": 901, "offset": 27573}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 22, "line": 901, "offset": 27566}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 23, "line": 906, "offset": 27691}, "extra": {"engine_kind": "OSS", "fingerprint": "2057cc0f766a6f1f970e24517d2f806ca4ab255e13c8848c622bed620d1ee2ae9b4239fefb5ee280f3656a47038b5b9721b45d7c900df2e4e4838fd31041aa4a_0", "is_ignored": false, "lines": "    pFVar2 = tmpfile();", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "tmpfile", "end": {"col": 21, "line": 906, "offset": 27689}, "start": {"col": 14, "line": 906, "offset": 27682}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 14, "line": 906, "offset": 27682}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 925, "offset": 28219}, "extra": {"engine_kind": "OSS", "fingerprint": "c3e7bf605b934126459c5e5100126b31c11718a988b79cdc3c682bd4b0515a00f7d0ef7957abfad15da5051c9d88c07dd98f1651a00d33ff3b71f394573baee7_0", "is_ignored": false, "lines": "          pcVar9 = fgets(&local_1c80,0x400,pFVar2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$1": {"abstract_content": "s", "end": {"col": 5, "line": 2, "offset": 5}, "start": {"col": 4, "line": 2, "offset": 4}}, "$FUN": {"abstract_content": "fgets", "end": {"col": 25, "line": 925, "offset": 28193}, "start": {"col": 20, "line": 925, "offset": 28188}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 20, "line": 925, "offset": 28188}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 929, "offset": 28330}, "extra": {"engine_kind": "OSS", "fingerprint": "7761bf8c887de7c611822ec7aa4fb089753c1cdb13c4ca8935f68caad906455118ef67cd41c5437e2e3ccdeccd4909b77d12f5c9938067471bb84b3169308e70_0", "is_ignored": false, "lines": "          memset(&local_1880,0,0x6b);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 929, "offset": 28324}, "start": {"col": 30, "line": 929, "offset": 28323}}, "$DST": {"abstract_content": "&local_1880", "end": {"col": 29, "line": 929, "offset": 28322}, "start": {"col": 18, "line": 929, "offset": 28311}}, "$LEN": {"abstract_content": "0x6b", "end": {"col": 36, "line": 929, "offset": 28329}, "start": {"col": 32, "line": 929, "offset": 28325}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 929, "offset": 28304}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 45, "line": 930, "offset": 28376}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_0", "is_ignored": false, "lines": "          strncpy(&local_1880,&local_1c80,4);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 930, "offset": 28349}, "start": {"col": 11, "line": 930, "offset": 28342}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 930, "offset": 28342}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 45, "line": 930, "offset": 28376}, "extra": {"engine_kind": "OSS", "fingerprint": "94a892f2441eec3e2b243f658bf9e2890d240409a5eba3fb1cf5c2570f20e2e806f8458bed905d82a91d30617bbc814af0f484b7ab061c6b2c03e9c4e57fd6e1_0", "is_ignored": false, "lines": "          strncpy(&local_1880,&local_1c80,4);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_1880", "end": {"col": 30, "line": 930, "offset": 28361}, "start": {"col": 19, "line": 930, "offset": 28350}}, "$LEN": {"abstract_content": "4", "end": {"col": 44, "line": 930, "offset": 28375}, "start": {"col": 43, "line": 930, "offset": 28374}}, "$SRC": {"abstract_content": "&local_1c80", "end": {"col": 42, "line": 930, "offset": 28373}, "start": {"col": 31, "line": 930, "offset": 28362}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 930, "offset": 28342}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 45, "line": 930, "offset": 28376}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_0", "is_ignored": false, "lines": "          strncpy(&local_1880,&local_1c80,4);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 930, "offset": 28349}, "start": {"col": 11, "line": 930, "offset": 28342}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 930, "offset": 28342}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "end": {"col": 50, "line": 931, "offset": 28427}, "extra": {"engine_kind": "OSS", "fingerprint": "c4f3df2b5dbd6cfb1a9ff51e6461920ebe4e0547f181e79f53f5bef78fe3bf717476ee437b8262ec66b25ff677075fc76744c3df9a810a5d79b1d00fd02e1797_0", "is_ignored": false, "lines": "          strncpy(acStack_187b,acStack_1c7c,0x21);", "message": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/806", "https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$DST": {"abstract_content": "acStack_187b", "end": {"col": 31, "line": 931, "offset": 28408}, "start": {"col": 19, "line": 931, "offset": 28396}}, "$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 931, "offset": 28395}, "start": {"col": 11, "line": 931, "offset": 28388}}, "$LEN": {"abstract_content": "0x21", "end": {"col": 49, "line": 931, "offset": 28426}, "start": {"col": 45, "line": 931, "offset": 28422}}, "$SRC": {"abstract_content": "acStack_1c7c", "end": {"col": 44, "line": 931, "offset": 28421}, "start": {"col": 32, "line": 931, "offset": 28409}}, "$TYPE": {"abstract_content": "char", "end": {"col": 7, "line": 54, "offset": 1125}, "start": {"col": 3, "line": 54, "offset": 1121}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 931, "offset": 28388}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 931, "offset": 28427}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_1", "is_ignored": false, "lines": "          strncpy(acStack_187b,acStack_1c7c,0x21);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 931, "offset": 28395}, "start": {"col": 11, "line": 931, "offset": 28388}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 931, "offset": 28388}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 931, "offset": 28427}, "extra": {"engine_kind": "OSS", "fingerprint": "2551f33efdcf4f0d4fdfba4203647c9dc97b997f264d1a5d9ea915169c3989229462426a2a16c238b37211e55b7b98c3fdfcbefcbd83a0b05e1da4ba9fead2ea_0", "is_ignored": false, "lines": "          strncpy(acStack_187b,acStack_1c7c,0x21);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_187b", "end": {"col": 31, "line": 931, "offset": 28408}, "start": {"col": 19, "line": 931, "offset": 28396}}, "$LEN": {"abstract_content": "0x21", "end": {"col": 49, "line": 931, "offset": 28426}, "start": {"col": 45, "line": 931, "offset": 28422}}, "$SRC": {"abstract_content": "acStack_1c7c", "end": {"col": 44, "line": 931, "offset": 28421}, "start": {"col": 32, "line": 931, "offset": 28409}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 931, "offset": 28388}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 50, "line": 931, "offset": 28427}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_1", "is_ignored": false, "lines": "          strncpy(acStack_187b,acStack_1c7c,0x21);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 931, "offset": 28395}, "start": {"col": 11, "line": 931, "offset": 28388}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 931, "offset": 28388}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "end": {"col": 50, "line": 932, "offset": 28478}, "extra": {"engine_kind": "OSS", "fingerprint": "4b9eec931ac29e5d9bbb91ce63b727890ebe59f2210ab49b81897d5984669497003bc61c6a62b144889b8ab7c73158fbd076920f92eec715cbe2f36f7c104d14_0", "is_ignored": false, "lines": "          strncpy(acStack_1859,acStack_1c5b,0x14);", "message": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/806", "https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$DST": {"abstract_content": "acStack_1859", "end": {"col": 31, "line": 932, "offset": 28459}, "start": {"col": 19, "line": 932, "offset": 28447}}, "$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 932, "offset": 28446}, "start": {"col": 11, "line": 932, "offset": 28439}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 932, "offset": 28477}, "start": {"col": 45, "line": 932, "offset": 28473}}, "$SRC": {"abstract_content": "acStack_1c5b", "end": {"col": 44, "line": 932, "offset": 28472}, "start": {"col": 32, "line": 932, "offset": 28460}}, "$TYPE": {"abstract_content": "char", "end": {"col": 7, "line": 55, "offset": 1151}, "start": {"col": 3, "line": 55, "offset": 1147}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 932, "offset": 28439}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 932, "offset": 28478}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_2", "is_ignored": false, "lines": "          strncpy(acStack_1859,acStack_1c5b,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 932, "offset": 28446}, "start": {"col": 11, "line": 932, "offset": 28439}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 932, "offset": 28439}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 932, "offset": 28478}, "extra": {"engine_kind": "OSS", "fingerprint": "0b0504765b8093c8d4e2b7dd599db53e73fd8063ba888fd45de1cab80f429ce04e5a252f566c93ddd687a134ef251f5fe7fa49777fc5d52ae421f7c6fa7667f7_0", "is_ignored": false, "lines": "          strncpy(acStack_1859,acStack_1c5b,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_1859", "end": {"col": 31, "line": 932, "offset": 28459}, "start": {"col": 19, "line": 932, "offset": 28447}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 932, "offset": 28477}, "start": {"col": 45, "line": 932, "offset": 28473}}, "$SRC": {"abstract_content": "acStack_1c5b", "end": {"col": 44, "line": 932, "offset": 28472}, "start": {"col": 32, "line": 932, "offset": 28460}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 932, "offset": 28439}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 50, "line": 932, "offset": 28478}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_2", "is_ignored": false, "lines": "          strncpy(acStack_1859,acStack_1c5b,0x14);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 932, "offset": 28446}, "start": {"col": 11, "line": 932, "offset": 28439}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 932, "offset": 28439}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "end": {"col": 50, "line": 933, "offset": 28529}, "extra": {"engine_kind": "OSS", "fingerprint": "cb5039081964ec4f3cddddf468b1f7d41e070ee0649618317d013ef5278d84feb65d5baaf6617550748b113fbe122bf37118f899f6b7d2403af434455dbbb0ec_0", "is_ignored": false, "lines": "          strncpy(acStack_1844,acStack_1c47,0x17);", "message": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/806", "https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$DST": {"abstract_content": "acStack_1844", "end": {"col": 31, "line": 933, "offset": 28510}, "start": {"col": 19, "line": 933, "offset": 28498}}, "$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 933, "offset": 28497}, "start": {"col": 11, "line": 933, "offset": 28490}}, "$LEN": {"abstract_content": "0x17", "end": {"col": 49, "line": 933, "offset": 28528}, "start": {"col": 45, "line": 933, "offset": 28524}}, "$SRC": {"abstract_content": "acStack_1c47", "end": {"col": 44, "line": 933, "offset": 28523}, "start": {"col": 32, "line": 933, "offset": 28511}}, "$TYPE": {"abstract_content": "char", "end": {"col": 7, "line": 56, "offset": 1177}, "start": {"col": 3, "line": 56, "offset": 1173}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 933, "offset": 28490}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 933, "offset": 28529}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_3", "is_ignored": false, "lines": "          strncpy(acStack_1844,acStack_1c47,0x17);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 933, "offset": 28497}, "start": {"col": 11, "line": 933, "offset": 28490}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 933, "offset": 28490}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 933, "offset": 28529}, "extra": {"engine_kind": "OSS", "fingerprint": "2ecc51ff4784afcffae6cb9f7eef899f219b1b61628d7df8ecbb5c96649847535aa396f99de997d76eef916ea9371e16015da535eb55de9840a37197fd8081db_0", "is_ignored": false, "lines": "          strncpy(acStack_1844,acStack_1c47,0x17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_1844", "end": {"col": 31, "line": 933, "offset": 28510}, "start": {"col": 19, "line": 933, "offset": 28498}}, "$LEN": {"abstract_content": "0x17", "end": {"col": 49, "line": 933, "offset": 28528}, "start": {"col": 45, "line": 933, "offset": 28524}}, "$SRC": {"abstract_content": "acStack_1c47", "end": {"col": 44, "line": 933, "offset": 28523}, "start": {"col": 32, "line": 933, "offset": 28511}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 933, "offset": 28490}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 50, "line": 933, "offset": 28529}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_3", "is_ignored": false, "lines": "          strncpy(acStack_1844,acStack_1c47,0x17);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 933, "offset": 28497}, "start": {"col": 11, "line": 933, "offset": 28490}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 933, "offset": 28490}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "end": {"col": 48, "line": 934, "offset": 28578}, "extra": {"engine_kind": "OSS", "fingerprint": "e0b32e00dc0c9a8920f7d61f054ab035740f154b4d0130812ba7359a0a3dd8b9cf15a80cbf8a8c8f20d6b9508a0e340769be3810267ab08173176f8c48598ed7_0", "is_ignored": false, "lines": "          strncpy(acStack_182c,acStack_1c30,10);", "message": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/806", "https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$DST": {"abstract_content": "acStack_182c", "end": {"col": 31, "line": 934, "offset": 28561}, "start": {"col": 19, "line": 934, "offset": 28549}}, "$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 934, "offset": 28548}, "start": {"col": 11, "line": 934, "offset": 28541}}, "$LEN": {"abstract_content": "10", "end": {"col": 47, "line": 934, "offset": 28577}, "start": {"col": 45, "line": 934, "offset": 28575}}, "$SRC": {"abstract_content": "acStack_1c30", "end": {"col": 44, "line": 934, "offset": 28574}, "start": {"col": 32, "line": 934, "offset": 28562}}, "$TYPE": {"abstract_content": "char", "end": {"col": 7, "line": 57, "offset": 1203}, "start": {"col": 3, "line": 57, "offset": 1199}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 934, "offset": 28541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 48, "line": 934, "offset": 28578}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_4", "is_ignored": false, "lines": "          strncpy(acStack_182c,acStack_1c30,10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 934, "offset": 28548}, "start": {"col": 11, "line": 934, "offset": 28541}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 934, "offset": 28541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 48, "line": 934, "offset": 28578}, "extra": {"engine_kind": "OSS", "fingerprint": "cf44f29bbea483ccaaf145e93f554c1c22d9a32167de8b547a255bcd1d78def4b33c57aa4b77fa173761a4da31c645df709956c86c58ca13e527befd147706fa_0", "is_ignored": false, "lines": "          strncpy(acStack_182c,acStack_1c30,10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_182c", "end": {"col": 31, "line": 934, "offset": 28561}, "start": {"col": 19, "line": 934, "offset": 28549}}, "$LEN": {"abstract_content": "10", "end": {"col": 47, "line": 934, "offset": 28577}, "start": {"col": 45, "line": 934, "offset": 28575}}, "$SRC": {"abstract_content": "acStack_1c30", "end": {"col": 44, "line": 934, "offset": 28574}, "start": {"col": 32, "line": 934, "offset": 28562}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 934, "offset": 28541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 48, "line": 934, "offset": 28578}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_4", "is_ignored": false, "lines": "          strncpy(acStack_182c,acStack_1c30,10);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 934, "offset": 28548}, "start": {"col": 11, "line": 934, "offset": 28541}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 934, "offset": 28541}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "end": {"col": 47, "line": 935, "offset": 28626}, "extra": {"engine_kind": "OSS", "fingerprint": "bab049c84e3678a85d88177bb74f7702c9f96c8fcac7f4e3f397467c4a7ee19f8613fb3d938de9c70affb1b3f35ae15ee5cef750b96e18f7679827921d3dfce7_0", "is_ignored": false, "lines": "          strncpy(acStack_1821,acStack_1c26,8);", "message": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/806", "https://github.com/0xdea/advisories/blob/master/2020-07-solaris-whodo-w.txt", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$DST": {"abstract_content": "acStack_1821", "end": {"col": 31, "line": 935, "offset": 28610}, "start": {"col": 19, "line": 935, "offset": 28598}}, "$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 935, "offset": 28597}, "start": {"col": 11, "line": 935, "offset": 28590}}, "$LEN": {"abstract_content": "8", "end": {"col": 46, "line": 935, "offset": 28625}, "start": {"col": 45, "line": 935, "offset": 28624}}, "$SRC": {"abstract_content": "acStack_1c26", "end": {"col": 44, "line": 935, "offset": 28623}, "start": {"col": 32, "line": 935, "offset": 28611}}, "$TYPE": {"abstract_content": "char", "end": {"col": 7, "line": 58, "offset": 1229}, "start": {"col": 3, "line": 58, "offset": 1225}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 935, "offset": 28590}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 47, "line": 935, "offset": 28626}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_5", "is_ignored": false, "lines": "          strncpy(acStack_1821,acStack_1c26,8);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 935, "offset": 28597}, "start": {"col": 11, "line": 935, "offset": 28590}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 935, "offset": 28590}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 47, "line": 935, "offset": 28626}, "extra": {"engine_kind": "OSS", "fingerprint": "43671a5416606c760d179a9e3e5a7d2af79f7ec60e039bce952d6264440d9ce18ee040c7559be8b9949f826b06ce2718c946c484a1dc5aa5864be2468ea695e3_0", "is_ignored": false, "lines": "          strncpy(acStack_1821,acStack_1c26,8);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_1821", "end": {"col": 31, "line": 935, "offset": 28610}, "start": {"col": 19, "line": 935, "offset": 28598}}, "$LEN": {"abstract_content": "8", "end": {"col": 46, "line": 935, "offset": 28625}, "start": {"col": 45, "line": 935, "offset": 28624}}, "$SRC": {"abstract_content": "acStack_1c26", "end": {"col": 44, "line": 935, "offset": 28623}, "start": {"col": 32, "line": 935, "offset": 28611}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 935, "offset": 28590}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 47, "line": 935, "offset": 28626}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_5", "is_ignored": false, "lines": "          strncpy(acStack_1821,acStack_1c26,8);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 935, "offset": 28597}, "start": {"col": 11, "line": 935, "offset": 28590}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 935, "offset": 28590}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 47, "line": 936, "offset": 28674}, "extra": {"engine_kind": "OSS", "fingerprint": "5d0434a48b3113e14a49e593ee30dd627e4ef26303a15f4e09a69a0c69388e806369febf5d5ce6b4c13829b29655143cf159bbdc47a7341ae3aee5b9c30bf7eb_6", "is_ignored": false, "lines": "          strncpy(acStack_1818,acStack_1c1e,2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 936, "offset": 28645}, "start": {"col": 11, "line": 936, "offset": 28638}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 936, "offset": 28638}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 47, "line": 936, "offset": 28674}, "extra": {"engine_kind": "OSS", "fingerprint": "72acfb429f975043c362423283d82d0bb2368eae8af2db6d3859b87d73c00adf28cb9f45bab66998e9429940888527d28380c5525b40fab66361fffa7bcf10fb_0", "is_ignored": false, "lines": "          strncpy(acStack_1818,acStack_1c1e,2);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "acStack_1818", "end": {"col": 31, "line": 936, "offset": 28658}, "start": {"col": 19, "line": 936, "offset": 28646}}, "$LEN": {"abstract_content": "2", "end": {"col": 46, "line": 936, "offset": 28673}, "start": {"col": 45, "line": 936, "offset": 28672}}, "$SRC": {"abstract_content": "acStack_1c1e", "end": {"col": 44, "line": 936, "offset": 28671}, "start": {"col": 32, "line": 936, "offset": 28659}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 936, "offset": 28638}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 47, "line": 936, "offset": 28674}, "extra": {"engine_kind": "OSS", "fingerprint": "aaef44cae4703bc14187084bb1edbec619cf42fa26abdf57615909f2a0f6c9fe7078f38237d94a196f4eb845dc4cd2bf5e92444678070baef70c80233035bdfc_6", "is_ignored": false, "lines": "          strncpy(acStack_1818,acStack_1c1e,2);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 18, "line": 936, "offset": 28645}, "start": {"col": 11, "line": 936, "offset": 28638}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 11, "line": 936, "offset": 28638}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 35, "line": 947, "offset": 29064}, "extra": {"engine_kind": "OSS", "fingerprint": "20ea3f28e8b9a1f318a6d213abed7ed6e88aa0ea5920f8ccda97604027fbc8856604a2ad3ed717225d918c218904454ef23eb25fb57b6d23c0b9900c3a0855dd_0", "is_ignored": false, "lines": "        memset(&local_1d80,0,0xc0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 29, "line": 947, "offset": 29058}, "start": {"col": 28, "line": 947, "offset": 29057}}, "$DST": {"abstract_content": "&local_1d80", "end": {"col": 27, "line": 947, "offset": 29056}, "start": {"col": 16, "line": 947, "offset": 29045}}, "$LEN": {"abstract_content": "0xc0", "end": {"col": 34, "line": 947, "offset": 29063}, "start": {"col": 30, "line": 947, "offset": 29059}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00401920_00401920.c", "start": {"col": 9, "line": 947, "offset": 29038}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 26, "line": 7, "offset": 72}, "extra": {"engine_kind": "OSS", "fingerprint": "864467008cc8a94eca583d3cfef6a621b853028acafa8717d8a99797cd7a71b58fbc6a4a8a8e4ce3f1a77b53a29424407a5ca4bdc2d6412a830dddb99ab2c05f_0", "is_ignored": false, "lines": "  pvVar1 = calloc(1,0x10);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 18, "line": 7, "offset": 64}, "start": {"col": 12, "line": 7, "offset": 58}}, "$RET": {"abstract_content": "pvVar1", "end": {"col": 9, "line": 7, "offset": 55}, "start": {"col": 3, "line": 7, "offset": 49}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404b88_00404b88.c", "start": {"col": 3, "line": 7, "offset": 49}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 26, "line": 7, "offset": 72}, "extra": {"engine_kind": "OSS", "fingerprint": "d6741564d202a091414c8aa5819af036a25b40875a334fb5522659986a995fc8481ae213e71b9f0a3cfd025d1bfe115a3af11795fb23d3ab4ee87ac05f72d203_0", "is_ignored": false, "lines": "  pvVar1 = calloc(1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 18, "line": 7, "offset": 64}, "start": {"col": 12, "line": 7, "offset": 58}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404b88_00404b88.c", "start": {"col": 12, "line": 7, "offset": 58}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 26, "line": 7, "offset": 72}, "extra": {"engine_kind": "OSS", "fingerprint": "70be20569a346464c03711a1eccb3110cfc356fc13d200206acb3b761766b7815de58d6a30feb3a4ae8c930f53fe5023630315fdc3d7c8b5983207e6ef106dfd_0", "is_ignored": false, "lines": "  pvVar1 = calloc(1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 20, "line": 7, "offset": 66}, "start": {"col": 19, "line": 7, "offset": 65}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 25, "line": 7, "offset": 71}, "start": {"col": 21, "line": 7, "offset": 67}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404b88_00404b88.c", "start": {"col": 12, "line": 7, "offset": 58}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 17, "offset": 288}, "extra": {"engine_kind": "OSS", "fingerprint": "43c9b11827d56b18941204a304423650914db1926087353c8f81bc49df5b217b623a74130cf5ccc665344b54065503820de1bd5fa6a847ec11409c936ce23055_0", "is_ignored": false, "lines": "  memset(auStack_2a7,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 17, "offset": 282}, "start": {"col": 22, "line": 17, "offset": 281}}, "$DST": {"abstract_content": "auStack_2a7", "end": {"col": 21, "line": 17, "offset": 280}, "start": {"col": 10, "line": 17, "offset": 269}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 28, "line": 17, "offset": 287}, "start": {"col": 24, "line": 17, "offset": 283}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 17, "offset": 262}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 19, "offset": 343}, "extra": {"engine_kind": "OSS", "fingerprint": "c23316de5d75b73d10bc34c6f5fd5d13e2640fb3e0afaf3b29a802141d239df762dffef4048b60ced2053abc9d9a0195bc2452c114260c8631c18f0a111d46c2_0", "is_ignored": false, "lines": "  memset(local_268 + 1,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 19, "offset": 337}, "start": {"col": 24, "line": 19, "offset": 336}}, "$DST": {"abstract_content": "local_268+1", "end": {"col": 23, "line": 19, "offset": 335}, "start": {"col": 10, "line": 19, "offset": 322}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 30, "line": 19, "offset": 342}, "start": {"col": 26, "line": 19, "offset": 338}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 19, "offset": 315}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 21, "offset": 393}, "extra": {"engine_kind": "OSS", "fingerprint": "322a85c6b7b04c8b546625878c421289689421723e1f9184315b4fad2ff6c8bdcb0004a9edf7b94f2e88a66b804c40cbb77ff3647e6ce7815b54fce9055e9261_0", "is_ignored": false, "lines": "  memset(auStack_227,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 21, "offset": 387}, "start": {"col": 22, "line": 21, "offset": 386}}, "$DST": {"abstract_content": "auStack_227", "end": {"col": 21, "line": 21, "offset": 385}, "start": {"col": 10, "line": 21, "offset": 374}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 28, "line": 21, "offset": 392}, "start": {"col": 24, "line": 21, "offset": 388}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 21, "offset": 367}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 23, "offset": 448}, "extra": {"engine_kind": "OSS", "fingerprint": "c2190045163caded2c3218d02140ddb7207afce8e2e6882e29b191c2ac3150f2d02b547ce7f95c7d10bc0889833bb945b849e49fd17602a248792d74790aaff8_0", "is_ignored": false, "lines": "  memset(local_128 + 1,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 23, "offset": 442}, "start": {"col": 24, "line": 23, "offset": 441}}, "$DST": {"abstract_content": "local_128+1", "end": {"col": 23, "line": 23, "offset": 440}, "start": {"col": 10, "line": 23, "offset": 427}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 30, "line": 23, "offset": 447}, "start": {"col": 26, "line": 23, "offset": 443}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 23, "offset": 420}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 21, "line": 41, "offset": 1030}, "extra": {"engine_kind": "OSS", "fingerprint": "4aaf203cbe860badd0887ac60bd0e8c913b994ca457627e768c64f57c9ccc23ca42654cb3e97b4406aac3986a54cbd170c670dd3502b5c67018ed1f85b8b3222_0", "is_ignored": false, "lines": "  sprintf(&local_228,\"/usr/sbin/set_passwd -u \\\"%s\\\" -p \\\"%s\\\"  2>/dev/null 1>/dev/null\",&local_2a8,\n          local_128);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"/usr/sbin/set_passwd -u \\\"%s\\\" -p \\\"%s\\\"  2>/dev/null 1>/dev/null\"", "end": {"col": 68, "line": 1, "offset": 67}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "&local_228", "end": {"col": 21, "line": 40, "offset": 929}, "start": {"col": 11, "line": 40, "offset": 919}}, "$FMT": {"abstract_content": "\"/usr/sbin/set_passwd -u \\\"%s\\\" -p \\\"%s\\\"  2>/dev/null 1>/dev/null\"", "end": {"col": 89, "line": 40, "offset": 997}, "start": {"col": 22, "line": 40, "offset": 930}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 40, "offset": 911}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 21, "line": 41, "offset": 1030}, "extra": {"engine_kind": "OSS", "fingerprint": "f2afa6bc966b71f8aa27db2afbdadeae48020a99a5d1c3afb5112d6ad4a211c8688ef3274c907f5353260ce759c708e39c1910f0b5b3a9539a0007c88854aa22_0", "is_ignored": false, "lines": "  sprintf(&local_228,\"/usr/sbin/set_passwd -u \\\"%s\\\" -p \\\"%s\\\"  2>/dev/null 1>/dev/null\",&local_2a8,\n          local_128);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 10, "line": 40, "offset": 918}, "start": {"col": 3, "line": 40, "offset": 911}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 40, "offset": 911}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-command-injection", "end": {"col": 21, "line": 42, "offset": 1052}, "extra": {"engine_kind": "OSS", "fingerprint": "f9f09030e52e2e035720cad4a884fe1b07cdfcf69d7502af7d86d3e18f9fecf9e3aeded6378369417ae7c4e0ead3528d51120318493c7702397e119c7c263827_0", "is_ignored": false, "lines": "  system(&local_228);", "message": "The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/78", "https://cwe.mitre.org/data/definitions/88", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 42, "offset": 1034}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 21, "line": 42, "offset": 1052}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_0", "is_ignored": false, "lines": "  system(&local_228);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 42, "offset": 1040}, "start": {"col": 3, "line": 42, "offset": 1034}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 42, "offset": 1034}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-signal", "end": {"col": 35, "line": 43, "offset": 1088}, "extra": {"engine_kind": "OSS", "fingerprint": "b473b4d0f17fc1ba5cd32129d0f6a5bc3cf6fe795a5b2188d1e4966d9b1587dc062fd39266cc4ae134232e7cdf07967fe1ec34aa581c1a16b5a31d5c256018c0_0", "is_ignored": false, "lines": "  signal(0x10,(__sighandler_t)0x1);", "message": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/364", "https://cwe.mitre.org/data/definitions/479", "https://cwe.mitre.org/data/definitions/828"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 43, "offset": 1056}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 61, "line": 44, "offset": 1150}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_1", "is_ignored": false, "lines": "  system(\"/etc/init.d/rtmpd-0 stop 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 44, "offset": 1098}, "start": {"col": 3, "line": 44, "offset": 1092}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 44, "offset": 1092}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 61, "line": 45, "offset": 1212}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_2", "is_ignored": false, "lines": "  system(\"/etc/init.d/rtspd-0 stop 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 45, "offset": 1160}, "start": {"col": 3, "line": 45, "offset": 1154}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 45, "offset": 1154}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 46, "offset": 1276}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_3", "is_ignored": false, "lines": "  system(\"/etc/init.d/httpd-0 reload 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 46, "offset": 1222}, "start": {"col": 3, "line": 46, "offset": 1216}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 46, "offset": 1216}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 47, "offset": 1340}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_4", "is_ignored": false, "lines": "  system(\"/etc/init.d/https-0 reload 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 47, "offset": 1286}, "start": {"col": 3, "line": 47, "offset": 1280}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 47, "offset": 1280}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 62, "line": 48, "offset": 1403}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_5", "is_ignored": false, "lines": "  system(\"/etc/init.d/rtspd-0 start 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 48, "offset": 1350}, "start": {"col": 3, "line": 48, "offset": 1344}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 48, "offset": 1344}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 62, "line": 49, "offset": 1466}, "extra": {"engine_kind": "OSS", "fingerprint": "f7e4479bd6285ea264a64aae88ed82c8147d8b1b73d69673455c00c80c5e7abb84243cd46411bde4dbd251bc10a61e4c360fdf87914bce9374022cdaf49e693c_6", "is_ignored": false, "lines": "  system(\"/etc/init.d/rtmpd-0 start 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 9, "line": 49, "offset": 1413}, "start": {"col": 3, "line": 49, "offset": 1407}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404c1c_00404c1c.c", "start": {"col": 3, "line": 49, "offset": 1407}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 78, "line": 33, "offset": 701}, "extra": {"engine_kind": "OSS", "fingerprint": "1be205f51649b518183c66007edadbc5e660d9a698ecf695a45007b6a643da0d15d1fd54efffca6d44759a652ce2511389583d043b424641b474a8f4e8f3b21c_0", "is_ignored": false, "lines": "    system(\"/usr/sbin/msger httpdmgr 0 hrestart 0 0 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 11, "line": 33, "offset": 634}, "start": {"col": 5, "line": 33, "offset": 628}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 5, "line": 33, "offset": 628}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 41, "offset": 967}, "extra": {"engine_kind": "OSS", "fingerprint": "fa2628165ce55b6801b5667fdc9f2ad764a701131479690f21cc7790bb6fb7a303ef203662ef372f63df10a6646bc784696b292c5d4496342261810a0cf498cd_0", "is_ignored": false, "lines": "      memset(auStack_443,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 27, "line": 41, "offset": 961}, "start": {"col": 26, "line": 41, "offset": 960}}, "$DST": {"abstract_content": "auStack_443", "end": {"col": 25, "line": 41, "offset": 959}, "start": {"col": 14, "line": 41, "offset": 948}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 32, "line": 41, "offset": 966}, "start": {"col": 28, "line": 41, "offset": 962}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 41, "offset": 941}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 43, "offset": 1022}, "extra": {"engine_kind": "OSS", "fingerprint": "d5d5ce6a5068678443fe10d839606615b13697cb78c0be88a46450b270bd7d413bb4ba429673b920849eb538e05c7406976d9f588214475d8e59b59e88306ad0_0", "is_ignored": false, "lines": "      memset(&local_444,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 43, "offset": 1015}, "start": {"col": 25, "line": 43, "offset": 1014}}, "$DST": {"abstract_content": "&local_444", "end": {"col": 24, "line": 43, "offset": 1013}, "start": {"col": 14, "line": 43, "offset": 1003}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 43, "offset": 1021}, "start": {"col": 27, "line": 43, "offset": 1016}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 43, "offset": 996}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 64, "offset": 1961}, "extra": {"engine_kind": "OSS", "fingerprint": "d5d5ce6a5068678443fe10d839606615b13697cb78c0be88a46450b270bd7d413bb4ba429673b920849eb538e05c7406976d9f588214475d8e59b59e88306ad0_1", "is_ignored": false, "lines": "      memset(&local_444,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 64, "offset": 1954}, "start": {"col": 25, "line": 64, "offset": 1953}}, "$DST": {"abstract_content": "&local_444", "end": {"col": 24, "line": 64, "offset": 1952}, "start": {"col": 14, "line": 64, "offset": 1942}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 64, "offset": 1960}, "start": {"col": 27, "line": 64, "offset": 1955}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 64, "offset": 1935}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 67, "offset": 2098}, "extra": {"engine_kind": "OSS", "fingerprint": "d5d5ce6a5068678443fe10d839606615b13697cb78c0be88a46450b270bd7d413bb4ba429673b920849eb538e05c7406976d9f588214475d8e59b59e88306ad0_2", "is_ignored": false, "lines": "      memset(&local_444,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 67, "offset": 2091}, "start": {"col": 25, "line": 67, "offset": 2090}}, "$DST": {"abstract_content": "&local_444", "end": {"col": 24, "line": 67, "offset": 2089}, "start": {"col": 14, "line": 67, "offset": 2079}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 67, "offset": 2097}, "start": {"col": 27, "line": 67, "offset": 2092}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 67, "offset": 2072}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 70, "offset": 2235}, "extra": {"engine_kind": "OSS", "fingerprint": "d5d5ce6a5068678443fe10d839606615b13697cb78c0be88a46450b270bd7d413bb4ba429673b920849eb538e05c7406976d9f588214475d8e59b59e88306ad0_3", "is_ignored": false, "lines": "      memset(&local_444,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 70, "offset": 2228}, "start": {"col": 25, "line": 70, "offset": 2227}}, "$DST": {"abstract_content": "&local_444", "end": {"col": 24, "line": 70, "offset": 2226}, "start": {"col": 14, "line": 70, "offset": 2216}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 70, "offset": 2234}, "start": {"col": 27, "line": 70, "offset": 2229}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 70, "offset": 2209}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 73, "offset": 2372}, "extra": {"engine_kind": "OSS", "fingerprint": "d5d5ce6a5068678443fe10d839606615b13697cb78c0be88a46450b270bd7d413bb4ba429673b920849eb538e05c7406976d9f588214475d8e59b59e88306ad0_4", "is_ignored": false, "lines": "      memset(&local_444,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 73, "offset": 2365}, "start": {"col": 25, "line": 73, "offset": 2364}}, "$DST": {"abstract_content": "&local_444", "end": {"col": 24, "line": 73, "offset": 2363}, "start": {"col": 14, "line": 73, "offset": 2353}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 73, "offset": 2371}, "start": {"col": 27, "line": 73, "offset": 2366}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 73, "offset": 2346}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 76, "offset": 2509}, "extra": {"engine_kind": "OSS", "fingerprint": "d5d5ce6a5068678443fe10d839606615b13697cb78c0be88a46450b270bd7d413bb4ba429673b920849eb538e05c7406976d9f588214475d8e59b59e88306ad0_5", "is_ignored": false, "lines": "      memset(&local_444,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 76, "offset": 2502}, "start": {"col": 25, "line": 76, "offset": 2501}}, "$DST": {"abstract_content": "&local_444", "end": {"col": 24, "line": 76, "offset": 2500}, "start": {"col": 14, "line": 76, "offset": 2490}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 76, "offset": 2508}, "start": {"col": 27, "line": 76, "offset": 2503}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 7, "line": 76, "offset": 2483}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 65, "line": 84, "offset": 2850}, "extra": {"engine_kind": "OSS", "fingerprint": "1be205f51649b518183c66007edadbc5e660d9a698ecf695a45007b6a643da0d15d1fd54efffca6d44759a652ce2511389583d043b424641b474a8f4e8f3b21c_1", "is_ignored": false, "lines": "    system(\"/etc/init.d/ipv4 restart 2>/dev/null 1>/dev/null &\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 11, "line": 84, "offset": 2796}, "start": {"col": 5, "line": 84, "offset": 2790}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00404e88_00404e88.c", "start": {"col": 5, "line": 84, "offset": 2790}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 57, "line": 24, "offset": 668}, "extra": {"engine_kind": "OSS", "fingerprint": "3213d4abbea280ebee0641ae592682f6afde696adb334cf3b8cbf1706ec95e1d3eb9252844a99b11a8d6cc562dcbaf76ef6b83e17c66aecec4e25572ae894f68_0", "is_ignored": false, "lines": "    system(\"/usr/sbin/rtcfg -w 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 11, "line": 24, "offset": 622}, "start": {"col": 5, "line": 24, "offset": 616}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004053f0_004053f0.c", "start": {"col": 5, "line": 24, "offset": 616}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 79, "line": 25, "offset": 748}, "extra": {"engine_kind": "OSS", "fingerprint": "3213d4abbea280ebee0641ae592682f6afde696adb334cf3b8cbf1706ec95e1d3eb9252844a99b11a8d6cc562dcbaf76ef6b83e17c66aecec4e25572ae894f68_1", "is_ignored": false, "lines": "    system(\"/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 11, "line": 25, "offset": 680}, "start": {"col": 5, "line": 25, "offset": 674}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004053f0_004053f0.c", "start": {"col": 5, "line": 25, "offset": 674}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 79, "line": 36, "offset": 810}, "extra": {"engine_kind": "OSS", "fingerprint": "86c078f141dc0afa33a3192e4d50ec1fa120e4e2db512fbb538ee3c858b7cae46069036c77e111674fec8f95639d03efdff12f67dc6807248204139d13751eb5_0", "is_ignored": false, "lines": "    system(\"/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 11, "line": 36, "offset": 742}, "start": {"col": 5, "line": 36, "offset": 736}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 5, "line": 36, "offset": 736}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 54, "offset": 1200}, "extra": {"engine_kind": "OSS", "fingerprint": "632ea884961bfac525fc537e517cd10bd5df3380016c61a53d3092f7791b6038b59a19b1c5bee334fb8af27f12566844cfea6f2b2727023e5cce1e84883204ef_0", "is_ignored": false, "lines": "      memset(acStack_8b,0,0xf);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 54, "offset": 1195}, "start": {"col": 25, "line": 54, "offset": 1194}}, "$DST": {"abstract_content": "acStack_8b", "end": {"col": 24, "line": 54, "offset": 1193}, "start": {"col": 14, "line": 54, "offset": 1183}}, "$LEN": {"abstract_content": "0xf", "end": {"col": 30, "line": 54, "offset": 1199}, "start": {"col": 27, "line": 54, "offset": 1196}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 7, "line": 54, "offset": 1176}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 56, "offset": 1256}, "extra": {"engine_kind": "OSS", "fingerprint": "95581dfb7affe4961b52b9eaf6c35cd3cdea59ed7d5d1f0b51586b5a998971cd8272696adaeced8edbe307172235592cb57fe984a6ebf71af7de1a73c597c08e_0", "is_ignored": false, "lines": "      memset(auStack_7b,0,0x1f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 56, "offset": 1250}, "start": {"col": 25, "line": 56, "offset": 1249}}, "$DST": {"abstract_content": "auStack_7b", "end": {"col": 24, "line": 56, "offset": 1248}, "start": {"col": 14, "line": 56, "offset": 1238}}, "$LEN": {"abstract_content": "0x1f", "end": {"col": 31, "line": 56, "offset": 1255}, "start": {"col": 27, "line": 56, "offset": 1251}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 7, "line": 56, "offset": 1231}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 58, "offset": 1312}, "extra": {"engine_kind": "OSS", "fingerprint": "4e6faa9a045ddd44e5a4e82a04ce43437cff64653fb7007f80717f99ffb8f09b1de42b017e19a37d8dd2c678a29c2afce56a4d27e9fa52644f7e78c64b0b3c04_0", "is_ignored": false, "lines": "      memset(auStack_5b,0,0x1f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 58, "offset": 1306}, "start": {"col": 25, "line": 58, "offset": 1305}}, "$DST": {"abstract_content": "auStack_5b", "end": {"col": 24, "line": 58, "offset": 1304}, "start": {"col": 14, "line": 58, "offset": 1294}}, "$LEN": {"abstract_content": "0x1f", "end": {"col": 31, "line": 58, "offset": 1311}, "start": {"col": 27, "line": 58, "offset": 1307}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 7, "line": 58, "offset": 1287}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 61, "line": 65, "offset": 1577}, "extra": {"engine_kind": "OSS", "fingerprint": "d4d285349fc41d4fbcdf82d5143b0acfb6ec963de0db8a7a18daa57fd42795f95838fc095c0427cc7b5d83ba13282941a14e5d041ef7b4d8caa1bf4888ed266d_0", "is_ignored": false, "lines": "      iVar1 = sscanf(acStack_8b,\"%d:%d\",&local_98,&local_94);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 21, "line": 65, "offset": 1537}, "start": {"col": 15, "line": 65, "offset": 1531}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 15, "line": 65, "offset": 1531}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 72, "offset": 1861}, "extra": {"engine_kind": "OSS", "fingerprint": "d4d285349fc41d4fbcdf82d5143b0acfb6ec963de0db8a7a18daa57fd42795f95838fc095c0427cc7b5d83ba13282941a14e5d041ef7b4d8caa1bf4888ed266d_1", "is_ignored": false, "lines": "        iVar1 = sscanf(&local_7c,\"M%d.%d.%d/%d:%d:%d\",&local_38,&local_34,&local_30,&local_2c,\n                       &local_28,&local_90);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 23, "line": 71, "offset": 1745}, "start": {"col": 17, "line": 71, "offset": 1739}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 17, "line": 71, "offset": 1739}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 45, "line": 75, "offset": 2030}, "extra": {"engine_kind": "OSS", "fingerprint": "d4d285349fc41d4fbcdf82d5143b0acfb6ec963de0db8a7a18daa57fd42795f95838fc095c0427cc7b5d83ba13282941a14e5d041ef7b4d8caa1bf4888ed266d_2", "is_ignored": false, "lines": "          iVar1 = sscanf(&local_5c,\"M%d.%d.%d/%d:%d:%d\",&local_24,&local_20,&local_1c,&local_18,\n                         local_14,&local_90);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 25, "line": 74, "offset": 1913}, "start": {"col": 19, "line": 74, "offset": 1907}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 19, "line": 74, "offset": 1907}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 87, "line": 78, "offset": 2196}, "extra": {"engine_kind": "OSS", "fingerprint": "86c078f141dc0afa33a3192e4d50ec1fa120e4e2db512fbb538ee3c858b7cae46069036c77e111674fec8f95639d03efdff12f67dc6807248204139d13751eb5_1", "is_ignored": false, "lines": "            system(\"/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 19, "line": 78, "offset": 2128}, "start": {"col": 13, "line": 78, "offset": 2122}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 13, "line": 78, "offset": 2122}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 81, "line": 85, "offset": 2361}, "extra": {"engine_kind": "OSS", "fingerprint": "86c078f141dc0afa33a3192e4d50ec1fa120e4e2db512fbb538ee3c858b7cae46069036c77e111674fec8f95639d03efdff12f67dc6807248204139d13751eb5_2", "is_ignored": false, "lines": "      system(\"/usr/sbin/msger camsvr 0 ctimeupdate 0 1 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 13, "line": 85, "offset": 2293}, "start": {"col": 7, "line": 85, "offset": 2287}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004054d4_004054d4.c", "start": {"col": 7, "line": 85, "offset": 2287}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 72, "offset": 1587}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_0", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 72, "offset": 1580}, "start": {"col": 23, "line": 72, "offset": 1579}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 72, "offset": 1578}, "start": {"col": 12, "line": 72, "offset": 1568}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 72, "offset": 1586}, "start": {"col": 25, "line": 72, "offset": 1581}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 72, "offset": 1561}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 73, "offset": 1642}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_0", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 73, "offset": 1600}, "start": {"col": 5, "line": 73, "offset": 1593}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 73, "offset": 1593}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 73, "offset": 1642}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_0", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 73, "offset": 1611}, "start": {"col": 13, "line": 73, "offset": 1601}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 73, "offset": 1641}, "start": {"col": 48, "line": 73, "offset": 1636}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 73, "offset": 1634}, "start": {"col": 24, "line": 73, "offset": 1612}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 73, "offset": 1593}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 73, "offset": 1642}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_0", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 73, "offset": 1600}, "start": {"col": 5, "line": 73, "offset": 1593}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 73, "offset": 1593}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 74, "offset": 1710}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_0", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 74, "offset": 1656}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 74, "offset": 1710}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_0", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 74, "offset": 1660}, "start": {"col": 13, "line": 74, "offset": 1656}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 74, "offset": 1656}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 76, "offset": 1790}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_0", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 76, "offset": 1753}, "start": {"col": 16, "line": 76, "offset": 1748}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 76, "offset": 1748}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 90, "offset": 2208}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_1", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 90, "offset": 2201}, "start": {"col": 23, "line": 90, "offset": 2200}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 90, "offset": 2199}, "start": {"col": 12, "line": 90, "offset": 2189}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 90, "offset": 2207}, "start": {"col": 25, "line": 90, "offset": 2202}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 90, "offset": 2182}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 91, "offset": 2263}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_1", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 91, "offset": 2221}, "start": {"col": 5, "line": 91, "offset": 2214}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 91, "offset": 2214}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 91, "offset": 2263}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_1", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 91, "offset": 2232}, "start": {"col": 13, "line": 91, "offset": 2222}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 91, "offset": 2262}, "start": {"col": 48, "line": 91, "offset": 2257}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 91, "offset": 2255}, "start": {"col": 24, "line": 91, "offset": 2233}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 91, "offset": 2214}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 91, "offset": 2263}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_1", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 91, "offset": 2221}, "start": {"col": 5, "line": 91, "offset": 2214}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 91, "offset": 2214}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 92, "offset": 2331}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_1", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 92, "offset": 2277}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 92, "offset": 2331}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_1", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 92, "offset": 2281}, "start": {"col": 13, "line": 92, "offset": 2277}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 92, "offset": 2277}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 94, "offset": 2411}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_1", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 94, "offset": 2374}, "start": {"col": 16, "line": 94, "offset": 2369}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 94, "offset": 2369}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 108, "offset": 2817}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_2", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 108, "offset": 2810}, "start": {"col": 23, "line": 108, "offset": 2809}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 108, "offset": 2808}, "start": {"col": 12, "line": 108, "offset": 2798}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 108, "offset": 2816}, "start": {"col": 25, "line": 108, "offset": 2811}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 108, "offset": 2791}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 109, "offset": 2872}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_2", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 109, "offset": 2830}, "start": {"col": 5, "line": 109, "offset": 2823}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 109, "offset": 2823}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 109, "offset": 2872}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_2", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 109, "offset": 2841}, "start": {"col": 13, "line": 109, "offset": 2831}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 109, "offset": 2871}, "start": {"col": 48, "line": 109, "offset": 2866}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 109, "offset": 2864}, "start": {"col": 24, "line": 109, "offset": 2842}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 109, "offset": 2823}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 109, "offset": 2872}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_2", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 109, "offset": 2830}, "start": {"col": 5, "line": 109, "offset": 2823}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 109, "offset": 2823}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 110, "offset": 2940}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_2", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 110, "offset": 2886}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 110, "offset": 2940}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_2", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 110, "offset": 2890}, "start": {"col": 13, "line": 110, "offset": 2886}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 110, "offset": 2886}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 112, "offset": 3020}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_2", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 112, "offset": 2983}, "start": {"col": 16, "line": 112, "offset": 2978}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 112, "offset": 2978}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 126, "offset": 3429}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_3", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 126, "offset": 3422}, "start": {"col": 23, "line": 126, "offset": 3421}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 126, "offset": 3420}, "start": {"col": 12, "line": 126, "offset": 3410}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 126, "offset": 3428}, "start": {"col": 25, "line": 126, "offset": 3423}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 126, "offset": 3403}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 127, "offset": 3484}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_3", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 127, "offset": 3442}, "start": {"col": 5, "line": 127, "offset": 3435}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 127, "offset": 3435}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 127, "offset": 3484}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_3", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 127, "offset": 3453}, "start": {"col": 13, "line": 127, "offset": 3443}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 127, "offset": 3483}, "start": {"col": 48, "line": 127, "offset": 3478}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 127, "offset": 3476}, "start": {"col": 24, "line": 127, "offset": 3454}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 127, "offset": 3435}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 127, "offset": 3484}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_3", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 127, "offset": 3442}, "start": {"col": 5, "line": 127, "offset": 3435}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 127, "offset": 3435}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 128, "offset": 3552}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_3", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 128, "offset": 3498}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 128, "offset": 3552}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_3", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 128, "offset": 3502}, "start": {"col": 13, "line": 128, "offset": 3498}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 128, "offset": 3498}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 130, "offset": 3632}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_3", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 130, "offset": 3595}, "start": {"col": 16, "line": 130, "offset": 3590}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 130, "offset": 3590}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 144, "offset": 4041}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_4", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 144, "offset": 4034}, "start": {"col": 23, "line": 144, "offset": 4033}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 144, "offset": 4032}, "start": {"col": 12, "line": 144, "offset": 4022}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 144, "offset": 4040}, "start": {"col": 25, "line": 144, "offset": 4035}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 144, "offset": 4015}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 145, "offset": 4096}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_4", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 145, "offset": 4054}, "start": {"col": 5, "line": 145, "offset": 4047}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 145, "offset": 4047}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 145, "offset": 4096}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_4", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 145, "offset": 4065}, "start": {"col": 13, "line": 145, "offset": 4055}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 145, "offset": 4095}, "start": {"col": 48, "line": 145, "offset": 4090}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 145, "offset": 4088}, "start": {"col": 24, "line": 145, "offset": 4066}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 145, "offset": 4047}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 145, "offset": 4096}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_4", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 145, "offset": 4054}, "start": {"col": 5, "line": 145, "offset": 4047}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 145, "offset": 4047}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 146, "offset": 4164}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_4", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 146, "offset": 4110}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 146, "offset": 4164}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_4", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 146, "offset": 4114}, "start": {"col": 13, "line": 146, "offset": 4110}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 146, "offset": 4110}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 148, "offset": 4244}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_4", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 148, "offset": 4207}, "start": {"col": 16, "line": 148, "offset": 4202}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 148, "offset": 4202}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 162, "offset": 4653}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_5", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 162, "offset": 4646}, "start": {"col": 23, "line": 162, "offset": 4645}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 162, "offset": 4644}, "start": {"col": 12, "line": 162, "offset": 4634}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 162, "offset": 4652}, "start": {"col": 25, "line": 162, "offset": 4647}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 162, "offset": 4627}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 163, "offset": 4708}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_5", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 163, "offset": 4666}, "start": {"col": 5, "line": 163, "offset": 4659}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 163, "offset": 4659}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 163, "offset": 4708}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_5", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 163, "offset": 4677}, "start": {"col": 13, "line": 163, "offset": 4667}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 163, "offset": 4707}, "start": {"col": 48, "line": 163, "offset": 4702}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 163, "offset": 4700}, "start": {"col": 24, "line": 163, "offset": 4678}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 163, "offset": 4659}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 163, "offset": 4708}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_5", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 163, "offset": 4666}, "start": {"col": 5, "line": 163, "offset": 4659}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 163, "offset": 4659}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 164, "offset": 4776}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_5", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 164, "offset": 4722}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 164, "offset": 4776}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_5", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 164, "offset": 4726}, "start": {"col": 13, "line": 164, "offset": 4722}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 164, "offset": 4722}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 166, "offset": 4856}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_5", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 166, "offset": 4819}, "start": {"col": 16, "line": 166, "offset": 4814}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 166, "offset": 4814}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 180, "offset": 5265}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_6", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 180, "offset": 5258}, "start": {"col": 23, "line": 180, "offset": 5257}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 180, "offset": 5256}, "start": {"col": 12, "line": 180, "offset": 5246}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 180, "offset": 5264}, "start": {"col": 25, "line": 180, "offset": 5259}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 180, "offset": 5239}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 181, "offset": 5320}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_6", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 181, "offset": 5278}, "start": {"col": 5, "line": 181, "offset": 5271}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 181, "offset": 5271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 181, "offset": 5320}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_6", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 181, "offset": 5289}, "start": {"col": 13, "line": 181, "offset": 5279}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 181, "offset": 5319}, "start": {"col": 48, "line": 181, "offset": 5314}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 181, "offset": 5312}, "start": {"col": 24, "line": 181, "offset": 5290}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 181, "offset": 5271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 181, "offset": 5320}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_6", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 181, "offset": 5278}, "start": {"col": 5, "line": 181, "offset": 5271}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 181, "offset": 5271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 182, "offset": 5388}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_6", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 182, "offset": 5334}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 182, "offset": 5388}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_6", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 182, "offset": 5338}, "start": {"col": 13, "line": 182, "offset": 5334}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 182, "offset": 5334}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 184, "offset": 5468}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_6", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 184, "offset": 5431}, "start": {"col": 16, "line": 184, "offset": 5426}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 184, "offset": 5426}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 198, "offset": 5878}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_7", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 198, "offset": 5871}, "start": {"col": 23, "line": 198, "offset": 5870}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 198, "offset": 5869}, "start": {"col": 12, "line": 198, "offset": 5859}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 198, "offset": 5877}, "start": {"col": 25, "line": 198, "offset": 5872}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 198, "offset": 5852}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 199, "offset": 5933}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_7", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 199, "offset": 5891}, "start": {"col": 5, "line": 199, "offset": 5884}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 199, "offset": 5884}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 199, "offset": 5933}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_7", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 199, "offset": 5902}, "start": {"col": 13, "line": 199, "offset": 5892}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 199, "offset": 5932}, "start": {"col": 48, "line": 199, "offset": 5927}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 199, "offset": 5925}, "start": {"col": 24, "line": 199, "offset": 5903}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 199, "offset": 5884}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 199, "offset": 5933}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_7", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 199, "offset": 5891}, "start": {"col": 5, "line": 199, "offset": 5884}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 199, "offset": 5884}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 200, "offset": 6001}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_7", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 200, "offset": 5947}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 200, "offset": 6001}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_7", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 200, "offset": 5951}, "start": {"col": 13, "line": 200, "offset": 5947}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 200, "offset": 5947}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 202, "offset": 6081}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_7", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 202, "offset": 6044}, "start": {"col": 16, "line": 202, "offset": 6039}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 202, "offset": 6039}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 216, "offset": 6491}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_8", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 216, "offset": 6484}, "start": {"col": 23, "line": 216, "offset": 6483}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 216, "offset": 6482}, "start": {"col": 12, "line": 216, "offset": 6472}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 216, "offset": 6490}, "start": {"col": 25, "line": 216, "offset": 6485}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 216, "offset": 6465}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 217, "offset": 6546}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_8", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 217, "offset": 6504}, "start": {"col": 5, "line": 217, "offset": 6497}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 217, "offset": 6497}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 217, "offset": 6546}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_8", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 217, "offset": 6515}, "start": {"col": 13, "line": 217, "offset": 6505}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 217, "offset": 6545}, "start": {"col": 48, "line": 217, "offset": 6540}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 217, "offset": 6538}, "start": {"col": 24, "line": 217, "offset": 6516}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 217, "offset": 6497}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 217, "offset": 6546}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_8", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 217, "offset": 6504}, "start": {"col": 5, "line": 217, "offset": 6497}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 217, "offset": 6497}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 218, "offset": 6614}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_8", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 218, "offset": 6560}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 218, "offset": 6614}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_8", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 218, "offset": 6564}, "start": {"col": 13, "line": 218, "offset": 6560}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 218, "offset": 6560}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 220, "offset": 6694}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_8", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 220, "offset": 6657}, "start": {"col": 16, "line": 220, "offset": 6652}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 220, "offset": 6652}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 234, "offset": 7104}, "extra": {"engine_kind": "OSS", "fingerprint": "d21645d9635a8f3fb75b02a71e4c78a2b669a757b3c4f613d41b666a5432c9d830198cf9240ca9cd37381de62020529c3610b5de434d3d2a13668dc3fd4bf0bd_9", "is_ignored": false, "lines": "    memset(&local_c57,0,0xc17);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 234, "offset": 7097}, "start": {"col": 23, "line": 234, "offset": 7096}}, "$DST": {"abstract_content": "&local_c57", "end": {"col": 22, "line": 234, "offset": 7095}, "start": {"col": 12, "line": 234, "offset": 7085}}, "$LEN": {"abstract_content": "0xc17", "end": {"col": 30, "line": 234, "offset": 7103}, "start": {"col": 25, "line": 234, "offset": 7098}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 234, "offset": 7078}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 235, "offset": 7159}, "extra": {"engine_kind": "OSS", "fingerprint": "acbf99bd34d819162146d382e7ac985f82279cff0f35d383c16a2523a81ea367d02751be72a6de305be15aa95ad161481dd65af52c7d601babe195a06c382dd5_9", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 235, "offset": 7117}, "start": {"col": 5, "line": 235, "offset": 7110}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 235, "offset": 7110}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 54, "line": 235, "offset": 7159}, "extra": {"engine_kind": "OSS", "fingerprint": "124c005f484f51bdaaf7f5796f4acdb621e584728e54090227f0dad4d8251f78735013ce8b13e052e4297d6308b3916cb0b98ccbbfce178a9011bc47335041fb_9", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_c58", "end": {"col": 23, "line": 235, "offset": 7128}, "start": {"col": 13, "line": 235, "offset": 7118}}, "$LEN": {"abstract_content": "0xc18", "end": {"col": 53, "line": 235, "offset": 7158}, "start": {"col": 48, "line": 235, "offset": 7153}}, "$SRC": {"abstract_content": "*(char**param_1+8", "end": {"col": 46, "line": 235, "offset": 7151}, "start": {"col": 24, "line": 235, "offset": 7129}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 235, "offset": 7110}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 235, "offset": 7159}, "extra": {"engine_kind": "OSS", "fingerprint": "633e562bd98594a609ec86de3229c1ac4f5967819cac4366165afea8ce023ef0f315bd0db2aa29028c266681ee688c8ecc16d443c18bdb51c20958a8d234b683_9", "is_ignored": false, "lines": "    strncpy(&local_c58,*(char **)(param_1 + 8),0xc18);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 235, "offset": 7117}, "start": {"col": 5, "line": 235, "offset": 7110}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 5, "line": 235, "offset": 7110}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-access-stat-lstat", "end": {"col": 67, "line": 236, "offset": 7227}, "extra": {"engine_kind": "OSS", "fingerprint": "6216a1cc0180ae1176180f22e13c030036c2cacd249faab69edeaff5213cd002153a81ca3494b8d5c65e04389f38c090d8a218309bcbb4e5e666e75c2f60006d_9", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/367", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 236, "offset": 7173}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 236, "offset": 7227}, "extra": {"engine_kind": "OSS", "fingerprint": "a470bc89af7d62b1e3f3b2fca55633eecf4d5b75074101a3e8315efbb2617cfc74a606f5ee2c1fd15074bb3a62c5d5782b4ac7011dc8249b5866cd3f060a8d03_9", "is_ignored": false, "lines": "    iVar1 = stat(\"/mnt/flash/config/mdbcfg.ini\",(stat *)local_d58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "stat", "end": {"col": 17, "line": 236, "offset": 7177}, "start": {"col": 13, "line": 236, "offset": 7173}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 236, "offset": 7173}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 238, "offset": 7307}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_9", "is_ignored": false, "lines": "      pFVar3 = fopen(\"/mnt/flash/config/mdbcfg.ini\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 21, "line": 238, "offset": 7270}, "start": {"col": 16, "line": 238, "offset": 7265}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 16, "line": 238, "offset": 7265}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 88, "line": 372, "offset": 11381}, "extra": {"engine_kind": "OSS", "fingerprint": "1302e2a0e476ad63b5016f11cccc120e68471b2f8d5c14c3d7af24506399a647f30bbc6e3aed0066eab7ec82ef8e1cfa1493e9a547a21baf2b520986acd6ae6a_0", "is_ignored": false, "lines": "      iVar1 = sscanf(*(char **)(param_1 + 8),\"%d:%d:%d:%d:%d:%d:%d:%d\",&local_d78,&local_d7c,\n                     &local_d70,&local_d6c,&local_d5c,&local_d60,&local_d64,&local_d68);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 21, "line": 371, "offset": 11220}, "start": {"col": 15, "line": 371, "offset": 11214}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 15, "line": 371, "offset": 11214}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 408, "offset": 12291}, "extra": {"engine_kind": "OSS", "fingerprint": "0a211bd1e6aed254277e1c023d6213111f73f2be8cf5ee4f04d897d2c041f14ef0c63bab72f25866f8f51ab7b6cfe99db735da36d8c3acd77193167fa6a97dda_0", "is_ignored": false, "lines": "        memset(local_d58 + 1,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 408, "offset": 12285}, "start": {"col": 30, "line": 408, "offset": 12284}}, "$DST": {"abstract_content": "local_d58+1", "end": {"col": 29, "line": 408, "offset": 12283}, "start": {"col": 16, "line": 408, "offset": 12270}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 36, "line": 408, "offset": 12290}, "start": {"col": 32, "line": 408, "offset": 12286}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 9, "line": 408, "offset": 12263}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 35, "line": 414, "offset": 12516}, "extra": {"engine_kind": "OSS", "fingerprint": "1302e2a0e476ad63b5016f11cccc120e68471b2f8d5c14c3d7af24506399a647f30bbc6e3aed0066eab7ec82ef8e1cfa1493e9a547a21baf2b520986acd6ae6a_1", "is_ignored": false, "lines": "        iVar1 = sscanf(*(char **)(param_1 + 8),\"%d:%d:%[^:]:%u\",&local_d60,&local_d68,local_d58,\n                       &local_d5c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 23, "line": 413, "offset": 12407}, "start": {"col": 17, "line": 413, "offset": 12401}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 17, "line": 413, "offset": 12401}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 69, "line": 439, "offset": 13320}, "extra": {"engine_kind": "OSS", "fingerprint": "cbbbf4f89d8c3caba81f5f60478ef830f3a206daa43223d778b86f15ac521cdba2ebff87691c40f5127c85fda06097cdcb2dea258efcd83e7e115e2bf60dde20_0", "is_ignored": false, "lines": "          system(\"/etc/init.d/ntpc.sh stop 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 17, "line": 439, "offset": 13268}, "start": {"col": 11, "line": 439, "offset": 13262}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 439, "offset": 13262}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 82, "line": 440, "offset": 13403}, "extra": {"engine_kind": "OSS", "fingerprint": "cbbbf4f89d8c3caba81f5f60478ef830f3a206daa43223d778b86f15ac521cdba2ebff87691c40f5127c85fda06097cdcb2dea258efcd83e7e115e2bf60dde20_1", "is_ignored": false, "lines": "          system(\"/usr/sbin/msger sinfo 0 sntpstate 0 0 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 17, "line": 440, "offset": 13338}, "start": {"col": 11, "line": 440, "offset": 13332}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 440, "offset": 13332}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 70, "line": 441, "offset": 13474}, "extra": {"engine_kind": "OSS", "fingerprint": "cbbbf4f89d8c3caba81f5f60478ef830f3a206daa43223d778b86f15ac521cdba2ebff87691c40f5127c85fda06097cdcb2dea258efcd83e7e115e2bf60dde20_2", "is_ignored": false, "lines": "          system(\"/etc/init.d/ntpc.sh start 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 17, "line": 441, "offset": 13421}, "start": {"col": 11, "line": 441, "offset": 13415}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 441, "offset": 13415}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 69, "line": 444, "offset": 13569}, "extra": {"engine_kind": "OSS", "fingerprint": "cbbbf4f89d8c3caba81f5f60478ef830f3a206daa43223d778b86f15ac521cdba2ebff87691c40f5127c85fda06097cdcb2dea258efcd83e7e115e2bf60dde20_3", "is_ignored": false, "lines": "          system(\"/etc/init.d/ntpc.sh stop 2>/dev/null 1>/dev/null\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 17, "line": 444, "offset": 13517}, "start": {"col": 11, "line": 444, "offset": 13511}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 444, "offset": 13511}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 451, "offset": 13767}, "extra": {"engine_kind": "OSS", "fingerprint": "b9dff0888b9f1e34a7ec3c01afae89ce70bd70993d2b1486a0c5e6aa7a3a3837107d3445b0c7463f0c07a6e0e169c6b0ebc82428b806f501b2eb67ec8fda9f56_0", "is_ignored": false, "lines": "          sVar2 = strlen(*(char **)(param_1 + 8));", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "param_1", "end": {"col": 44, "line": 451, "offset": 13761}, "start": {"col": 37, "line": 451, "offset": 13754}}, "$UNSIGNED": {"abstract_content": "sVar2", "end": {"col": 16, "line": 451, "offset": 13733}, "start": {"col": 11, "line": 451, "offset": 13728}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 451, "offset": 13728}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 65, "line": 452, "offset": 13833}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_10", "is_ignored": false, "lines": "          pFVar3 = fopen(\"/mnt/flash/config/lrmapping.dat\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 25, "line": 452, "offset": 13793}, "start": {"col": 20, "line": 452, "offset": 13788}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 20, "line": 452, "offset": 13788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 20, "line": 456, "offset": 13927}, "extra": {"engine_kind": "OSS", "fingerprint": "9e1efe679d5d1959d24efe9fe51bea9a5d830543cf7aa31bab58a2924e1f01ebac8b7de5b7a2d1f71f1c4f65a1d769fa7a305cadc433677ead4389db880ce730_0", "is_ignored": false, "lines": "          sVar7 = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 20, "line": 456, "offset": 13927}, "start": {"col": 19, "line": 456, "offset": 13926}}, "$UNSIGNED": {"abstract_content": "sVar7", "end": {"col": 16, "line": 456, "offset": 13923}, "start": {"col": 11, "line": 456, "offset": 13918}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 456, "offset": 13918}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 460, "offset": 14121}, "extra": {"engine_kind": "OSS", "fingerprint": "256dce9aa24b4f47442a94d6a86afe2d1c018cf0d3799a3cb32a484af6a89fd3c21e003512a8a6a5464856befbd844809f83f39c48eda559659b6724b6a436a8_0", "is_ignored": false, "lines": "            sVar7 = fwrite(pvVar8,1,sVar2,pFVar3);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "1", "end": {"col": 36, "line": 460, "offset": 14107}, "start": {"col": 35, "line": 460, "offset": 14106}}, "$UNSIGNED": {"abstract_content": "sVar7", "end": {"col": 18, "line": 460, "offset": 14089}, "start": {"col": 13, "line": 460, "offset": 14084}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 460, "offset": 14084}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 473, "offset": 14498}, "extra": {"engine_kind": "OSS", "fingerprint": "b9dff0888b9f1e34a7ec3c01afae89ce70bd70993d2b1486a0c5e6aa7a3a3837107d3445b0c7463f0c07a6e0e169c6b0ebc82428b806f501b2eb67ec8fda9f56_1", "is_ignored": false, "lines": "            sVar2 = strlen(*(char **)(param_1 + 8));", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "param_1", "end": {"col": 46, "line": 473, "offset": 14492}, "start": {"col": 39, "line": 473, "offset": 14485}}, "$UNSIGNED": {"abstract_content": "sVar2", "end": {"col": 18, "line": 473, "offset": 14464}, "start": {"col": 13, "line": 473, "offset": 14459}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 473, "offset": 14459}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 69, "line": 474, "offset": 14568}, "extra": {"engine_kind": "OSS", "fingerprint": "98c08d70c4f986b661d6c15351669fd2274a6bf4fa296c9854ac1d84bc7a25c3a07d98e4fe239fb375afec3ec1f2cf3620b19d742bd5d49dadd28e02894e8987_11", "is_ignored": false, "lines": "            pFVar3 = fopen(\"/mnt/flash/config/lrunmapping.dat\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 27, "line": 474, "offset": 14526}, "start": {"col": 22, "line": 474, "offset": 14521}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 22, "line": 474, "offset": 14521}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 22, "line": 478, "offset": 14670}, "extra": {"engine_kind": "OSS", "fingerprint": "9e1efe679d5d1959d24efe9fe51bea9a5d830543cf7aa31bab58a2924e1f01ebac8b7de5b7a2d1f71f1c4f65a1d769fa7a305cadc433677ead4389db880ce730_1", "is_ignored": false, "lines": "            sVar7 = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 22, "line": 478, "offset": 14670}, "start": {"col": 21, "line": 478, "offset": 14669}}, "$UNSIGNED": {"abstract_content": "sVar7", "end": {"col": 18, "line": 478, "offset": 14666}, "start": {"col": 13, "line": 478, "offset": 14661}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 13, "line": 478, "offset": 14661}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 482, "offset": 14872}, "extra": {"engine_kind": "OSS", "fingerprint": "256dce9aa24b4f47442a94d6a86afe2d1c018cf0d3799a3cb32a484af6a89fd3c21e003512a8a6a5464856befbd844809f83f39c48eda559659b6724b6a436a8_1", "is_ignored": false, "lines": "              sVar7 = fwrite(pvVar8,1,sVar2,pFVar3);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "1", "end": {"col": 38, "line": 482, "offset": 14858}, "start": {"col": 37, "line": 482, "offset": 14857}}, "$UNSIGNED": {"abstract_content": "sVar7", "end": {"col": 20, "line": 482, "offset": 14840}, "start": {"col": 15, "line": 482, "offset": 14835}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 15, "line": 482, "offset": 14835}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 78, "line": 537, "offset": 17336}, "extra": {"engine_kind": "OSS", "fingerprint": "cbbbf4f89d8c3caba81f5f60478ef830f3a206daa43223d778b86f15ac521cdba2ebff87691c40f5127c85fda06097cdcb2dea258efcd83e7e115e2bf60dde20_4", "is_ignored": false, "lines": "                      system(\"msger hnap_push_service 0 hreview_policy 0 0&\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "system", "end": {"col": 29, "line": 537, "offset": 17287}, "start": {"col": 23, "line": 537, "offset": 17281}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 23, "line": 537, "offset": 17281}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 579, "offset": 18842}, "extra": {"engine_kind": "OSS", "fingerprint": "508db2104f8196252fe4c305b22cdb889b89a8117189d16a2fdd8d8132a6257870a7ae1f5f0b4e9b8f1de997642d47de850e304cd47b603766f1788048bd7bd7_0", "is_ignored": false, "lines": "  memset(local_d58 + 1,0,0x7f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 579, "offset": 18836}, "start": {"col": 24, "line": 579, "offset": 18835}}, "$DST": {"abstract_content": "local_d58+1", "end": {"col": 23, "line": 579, "offset": 18834}, "start": {"col": 10, "line": 579, "offset": 18821}}, "$LEN": {"abstract_content": "0x7f", "end": {"col": 30, "line": 579, "offset": 18841}, "start": {"col": 26, "line": 579, "offset": 18837}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 3, "line": 579, "offset": 18814}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 63, "line": 676, "offset": 22073}, "extra": {"engine_kind": "OSS", "fingerprint": "eaa7d2f396b38c09dd08035d8da5a5f4683b756f847e1330671b369045be1892ffe101134b40e24cb1bc806436c1292dde304cd48b136aa0e5dff0e96a88f699_0", "is_ignored": false, "lines": "                strcpy(local_34,(char *)piVar10[iVar1 + 0x81]);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 17, "line": 676, "offset": 22027}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 676, "offset": 22073}, "extra": {"engine_kind": "OSS", "fingerprint": "60a9517ee5b03db6bb43820f7f2be337b990df71461184f54e4cf2fdf678f821bf53c7cb280a65330e8790ce7a5d2f1e18cd03dc4765bea14532cb6a33c6db85_0", "is_ignored": false, "lines": "                strcpy(local_34,(char *)piVar10[iVar1 + 0x81]);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 23, "line": 676, "offset": 22033}, "start": {"col": 17, "line": 676, "offset": 22027}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 17, "line": 676, "offset": 22027}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 710, "offset": 23071}, "extra": {"engine_kind": "OSS", "fingerprint": "1eb3576d6d98f2393dc094ac0558f4991e86c8ae0c792a13be22a3ca5ba36085d12db6d0c16bef3ee6027e60414ec1ee50909920e6cdaa383db05e60720341a2_0", "is_ignored": false, "lines": "          sprintf(&local_c58,\"WEPKey%d\",local_d70);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 710, "offset": 23038}, "start": {"col": 11, "line": 710, "offset": 23031}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 710, "offset": 23031}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 730, "offset": 23772}, "extra": {"engine_kind": "OSS", "fingerprint": "1eb3576d6d98f2393dc094ac0558f4991e86c8ae0c792a13be22a3ca5ba36085d12db6d0c16bef3ee6027e60414ec1ee50909920e6cdaa383db05e60720341a2_1", "is_ignored": false, "lines": "          sprintf(&local_c58,\"WEPKey%d\",local_d78);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 730, "offset": 23739}, "start": {"col": 11, "line": 730, "offset": 23732}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 730, "offset": 23732}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 752, "offset": 24506}, "extra": {"engine_kind": "OSS", "fingerprint": "1eb3576d6d98f2393dc094ac0558f4991e86c8ae0c792a13be22a3ca5ba36085d12db6d0c16bef3ee6027e60414ec1ee50909920e6cdaa383db05e60720341a2_2", "is_ignored": false, "lines": "          sprintf(&local_c58,\"WEPKey%d\",local_d70);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 752, "offset": 24473}, "start": {"col": 11, "line": 752, "offset": 24466}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 752, "offset": 24466}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 772, "offset": 25207}, "extra": {"engine_kind": "OSS", "fingerprint": "1eb3576d6d98f2393dc094ac0558f4991e86c8ae0c792a13be22a3ca5ba36085d12db6d0c16bef3ee6027e60414ec1ee50909920e6cdaa383db05e60720341a2_3", "is_ignored": false, "lines": "          sprintf(&local_c58,\"WEPKey%d\",local_d78);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 772, "offset": 25174}, "start": {"col": 11, "line": 772, "offset": 25167}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004057f4_004057f4.c", "start": {"col": 11, "line": 772, "offset": 25167}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 27, "line": 20, "offset": 338}, "extra": {"engine_kind": "OSS", "fingerprint": "2bc714c8b451ecfbc99f651122913b25a8355689a93b2daca52927f49817282a418dde5c6543d8328d1ee9dfc34c2adc12f2cbd8f97cfcdcb979e719c803b1e7_0", "is_ignored": false, "lines": "        cVar1 = param_1[2];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "2", "end": {"col": 26, "line": 20, "offset": 337}, "start": {"col": 25, "line": 20, "offset": 336}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 14, "line": 20, "offset": 325}, "start": {"col": 9, "line": 20, "offset": 320}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408080_00408080.c", "start": {"col": 9, "line": 20, "offset": 320}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 26, "line": 20, "offset": 434}, "extra": {"engine_kind": "OSS", "fingerprint": "2f7d34ca716401dfe40c8bef6b5bb19475b598d24047a5c0c2cfa1c3fb85b325c9de43492c81db3ecd033834686a8c7a30c9ca6dd819b21de184cabce9b64c06_0", "is_ignored": false, "lines": "  memset(param_1,0,0x404);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 19, "line": 20, "offset": 427}, "start": {"col": 18, "line": 20, "offset": 426}}, "$DST": {"abstract_content": "param_1", "end": {"col": 17, "line": 20, "offset": 425}, "start": {"col": 10, "line": 20, "offset": 418}}, "$LEN": {"abstract_content": "0x404", "end": {"col": 25, "line": 20, "offset": 433}, "start": {"col": 20, "line": 20, "offset": 428}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004082d8_004082d8.c", "start": {"col": 3, "line": 20, "offset": 411}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 16, "offset": 296}, "extra": {"engine_kind": "OSS", "fingerprint": "3c4a8fb0acaee5de0db5aa355bbd6458771e7b82e03eb08dcc6af80b4acae1f1384bbc5f5d2f5a3f8f0a944cb42cca75c92d3d30331a27a82dc5908172d91688_0", "is_ignored": false, "lines": "  memset(&local_818,0,0x800);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 22, "line": 16, "offset": 289}, "start": {"col": 21, "line": 16, "offset": 288}}, "$DST": {"abstract_content": "&local_818", "end": {"col": 20, "line": 16, "offset": 287}, "start": {"col": 10, "line": 16, "offset": 277}}, "$LEN": {"abstract_content": "0x800", "end": {"col": 28, "line": 16, "offset": 295}, "start": {"col": 23, "line": 16, "offset": 290}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004083c4_004083c4.c", "start": {"col": 3, "line": 16, "offset": 270}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 26, "line": 19, "offset": 363}, "extra": {"engine_kind": "OSS", "fingerprint": "18283d1a14376340872e106dbe6e37592621708046352b861c56701ba188da4b655519e5ee2da58a4ff8df6ef17110bf7bdf6f39ddbb495551192c0bac0f2322_0", "is_ignored": false, "lines": "  __ptr = strdup(param_2);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 17, "line": 19, "offset": 354}, "start": {"col": 11, "line": 19, "offset": 348}}, "$RET": {"abstract_content": "__ptr", "end": {"col": 8, "line": 19, "offset": 345}, "start": {"col": 3, "line": 19, "offset": 340}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004083c4_004083c4.c", "start": {"col": 3, "line": 19, "offset": 340}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 34, "line": 28, "offset": 590}, "extra": {"engine_kind": "OSS", "fingerprint": "08f7bf05460ffdc2cff7c31e5838dd2dd637ce15a30f60b7f5347d187c4d6eccd7b27de0d72e17bc6672ab80e944582b2a3a7e3219430bcb114e34e46efc1e37_0", "is_ignored": false, "lines": "        pcVar1 = strdup(*ppcVar2);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 24, "line": 28, "offset": 580}, "start": {"col": 18, "line": 28, "offset": 574}}, "$RET": {"abstract_content": "pcVar1", "end": {"col": 15, "line": 28, "offset": 571}, "start": {"col": 9, "line": 28, "offset": 565}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004083c4_004083c4.c", "start": {"col": 9, "line": 28, "offset": 565}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 36, "line": 31, "offset": 695}, "extra": {"engine_kind": "OSS", "fingerprint": "08f7bf05460ffdc2cff7c31e5838dd2dd637ce15a30f60b7f5347d187c4d6eccd7b27de0d72e17bc6672ab80e944582b2a3a7e3219430bcb114e34e46efc1e37_1", "is_ignored": false, "lines": "        pcVar1 = strdup(ppcVar2[1]);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 24, "line": 31, "offset": 683}, "start": {"col": 18, "line": 31, "offset": 677}}, "$RET": {"abstract_content": "pcVar1", "end": {"col": 15, "line": 31, "offset": 674}, "start": {"col": 9, "line": 31, "offset": 668}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004083c4_004083c4.c", "start": {"col": 9, "line": 31, "offset": 668}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 78, "line": 35, "offset": 868}, "extra": {"engine_kind": "OSS", "fingerprint": "be483db7f32111fa6a2b2d17686e013ec9d7fec600584fab9ecd147fc2e92a9ee2b4d7710e69c206b4d674b9fef912ec3676bc09e7dfd3c18cc76cd811a89be7_0", "is_ignored": false, "lines": "        iVar1 = sprintf((char *)(param_3 + iVar3),\"%c%02X\",0x25,iVar1,puVar4);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 24, "line": 35, "offset": 814}, "start": {"col": 17, "line": 35, "offset": 807}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004086c4_004086c4.c", "start": {"col": 17, "line": 35, "offset": 807}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 33, "line": 13, "offset": 234}, "extra": {"engine_kind": "OSS", "fingerprint": "a6761122b431cad9610b7bca7df038699f6b96f4b6b79f6f02609ab396048b8fe179e6bcdd6f4443d9c1a73a67bd5e27ef327f89749655c5360be2f8e61c6eda_0", "is_ignored": false, "lines": "  pvVar3 = malloc(sVar1 * 3 + 1);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 18, "line": 13, "offset": 219}, "start": {"col": 12, "line": 13, "offset": 213}}, "$RET": {"abstract_content": "pvVar3", "end": {"col": 9, "line": 13, "offset": 210}, "start": {"col": 3, "line": 13, "offset": 204}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "start": {"col": 3, "line": 13, "offset": 204}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-wraparound", "end": {"col": 33, "line": 13, "offset": 234}, "extra": {"engine_kind": "OSS", "fingerprint": "32cd2bb074fc9bd52ef49cd5dad2e008f319b6275d3f22c48e2cdd35ae7fb574b778973ea342239186576d17108518f65ef42ea9b4b087575cf36ba5cf288eb2_0", "is_ignored": false, "lines": "  pvVar3 = malloc(sVar1 * 3 + 1);", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/190", "https://cwe.mitre.org/data/definitions/128", "https://cwe.mitre.org/data/definitions/131", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 18, "line": 13, "offset": 219}, "start": {"col": 12, "line": 13, "offset": 213}}, "$X": {"abstract_content": "sVar1*3", "end": {"col": 28, "line": 13, "offset": 229}, "start": {"col": 19, "line": 13, "offset": 220}}, "$Y": {"abstract_content": "1", "end": {"col": 32, "line": 13, "offset": 233}, "start": {"col": 31, "line": 13, "offset": 232}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "start": {"col": 12, "line": 13, "offset": 213}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 33, "line": 13, "offset": 234}, "extra": {"engine_kind": "OSS", "fingerprint": "8063984035ee90c0d84e38590fd66b51a94b89ed5dda04619baa64701b06ac695bf4486adfac49e5bfa7e3087b7818d30675b9564349e0d02dfc9cdde3e26e1b_0", "is_ignored": false, "lines": "  pvVar3 = malloc(sVar1 * 3 + 1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 18, "line": 13, "offset": 219}, "start": {"col": 12, "line": 13, "offset": 213}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "start": {"col": 12, "line": 13, "offset": 213}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 33, "line": 16, "offset": 324}, "extra": {"engine_kind": "OSS", "fingerprint": "a6761122b431cad9610b7bca7df038699f6b96f4b6b79f6f02609ab396048b8fe179e6bcdd6f4443d9c1a73a67bd5e27ef327f89749655c5360be2f8e61c6eda_1", "is_ignored": false, "lines": "  pvVar3 = malloc(sVar2 * 3 + 1);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 18, "line": 16, "offset": 309}, "start": {"col": 12, "line": 16, "offset": 303}}, "$RET": {"abstract_content": "pvVar3", "end": {"col": 9, "line": 16, "offset": 300}, "start": {"col": 3, "line": 16, "offset": 294}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "start": {"col": 3, "line": 16, "offset": 294}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-wraparound", "end": {"col": 33, "line": 16, "offset": 324}, "extra": {"engine_kind": "OSS", "fingerprint": "adb8071e3cf91516ab42b41fed09841e928a6bde4a5b121fd84838840a42bfc40786723792da31cfbbb102388703f04c42ee6e8caefbfbd0c3720782cee51bc9_0", "is_ignored": false, "lines": "  pvVar3 = malloc(sVar2 * 3 + 1);", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/190", "https://cwe.mitre.org/data/definitions/128", "https://cwe.mitre.org/data/definitions/131", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 18, "line": 16, "offset": 309}, "start": {"col": 12, "line": 16, "offset": 303}}, "$X": {"abstract_content": "sVar2*3", "end": {"col": 28, "line": 16, "offset": 319}, "start": {"col": 19, "line": 16, "offset": 310}}, "$Y": {"abstract_content": "1", "end": {"col": 32, "line": 16, "offset": 323}, "start": {"col": 31, "line": 16, "offset": 322}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "start": {"col": 12, "line": 16, "offset": 303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 33, "line": 16, "offset": 324}, "extra": {"engine_kind": "OSS", "fingerprint": "8063984035ee90c0d84e38590fd66b51a94b89ed5dda04619baa64701b06ac695bf4486adfac49e5bfa7e3087b7818d30675b9564349e0d02dfc9cdde3e26e1b_1", "is_ignored": false, "lines": "  pvVar3 = malloc(sVar2 * 3 + 1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 18, "line": 16, "offset": 309}, "start": {"col": 12, "line": 16, "offset": 303}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408858_00408858.c", "start": {"col": 12, "line": 16, "offset": 303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 23, "line": 15, "offset": 249}, "extra": {"engine_kind": "OSS", "fingerprint": "0a62b1c27e0066b39bcbf1818a58c801bf82fea56698f08595fb5e635bbbb26f82d65445c01242c6ae5f0d92c72f4ab54e3940a5de15ddb5a28af26b61d058a9_0", "is_ignored": false, "lines": "    cVar1 = param_1[1];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "1", "end": {"col": 22, "line": 15, "offset": 248}, "start": {"col": 21, "line": 15, "offset": 247}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 10, "line": 15, "offset": 236}, "start": {"col": 5, "line": 15, "offset": 231}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004089fc_004089fc.c", "start": {"col": 5, "line": 15, "offset": 231}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 35, "line": 7, "offset": 106}, "extra": {"engine_kind": "OSS", "fingerprint": "55c5e416a44ed80115af0ce33dfd6781c09d95e80653175db5e00a0d7cb6eaa8671cfb5ada253526ef23b06ee94d7063e80ab18df08810eb71f654e0d2622be2_0", "is_ignored": false, "lines": "  pcVar1 = strcpy(param_2,param_1);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408eac_00408eac.c", "start": {"col": 12, "line": 7, "offset": 83}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 35, "line": 7, "offset": 106}, "extra": {"engine_kind": "OSS", "fingerprint": "95f8303ca4b25e114d3e92291200cae0905a9b5b9e614917eb959173819ce299cfb2ce800a64e1961ca898c867c3cd8645478797e6eed480795e5ca4f2f1ed24_0", "is_ignored": false, "lines": "  pcVar1 = strcpy(param_2,param_1);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 18, "line": 7, "offset": 89}, "start": {"col": 12, "line": 7, "offset": 83}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408eac_00408eac.c", "start": {"col": 12, "line": 7, "offset": 83}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 35, "line": 12, "offset": 245}, "extra": {"engine_kind": "OSS", "fingerprint": "fe2a5a5242671609f60b67056c4934232a0e909954bc8c4c8c730541c41010fc791a74df6844a85eb056b33fc70ed4955f1c16cb4ea56ee8500bfd6134ca8f98_0", "is_ignored": false, "lines": "    __src = strdup(__dest + sVar1);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 19, "line": 12, "offset": 229}, "start": {"col": 13, "line": 12, "offset": 223}}, "$RET": {"abstract_content": "__src", "end": {"col": 10, "line": 12, "offset": 220}, "start": {"col": 5, "line": 12, "offset": 215}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408f14_00408f14.c", "start": {"col": 5, "line": 12, "offset": 215}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 27, "line": 13, "offset": 273}, "extra": {"engine_kind": "OSS", "fingerprint": "a9941d3e5ccb2f929790d934b4cb13d6e4b20903e24e6ef82955663f136c617697720938ad9b9dd27a386393534e4402d4596b93d04beff16453b55cae190ace_0", "is_ignored": false, "lines": "    strcpy(__dest,param_3);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408f14_00408f14.c", "start": {"col": 5, "line": 13, "offset": 251}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 27, "line": 13, "offset": 273}, "extra": {"engine_kind": "OSS", "fingerprint": "f3ed70cbd5b60a797420da59ebae3ea233a2489fdb09d9b01585e40885df9de0dcf71f4c03c8eece3fb20c8dff4d3c8376aac0203cf6685ac796bb53b0ebf625_0", "is_ignored": false, "lines": "    strcpy(__dest,param_3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 11, "line": 13, "offset": 257}, "start": {"col": 5, "line": 13, "offset": 251}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408f14_00408f14.c", "start": {"col": 5, "line": 13, "offset": 251}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 25, "line": 14, "offset": 299}, "extra": {"engine_kind": "OSS", "fingerprint": "a9941d3e5ccb2f929790d934b4cb13d6e4b20903e24e6ef82955663f136c617697720938ad9b9dd27a386393534e4402d4596b93d04beff16453b55cae190ace_1", "is_ignored": false, "lines": "    strcat(__dest,__src);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408f14_00408f14.c", "start": {"col": 5, "line": 14, "offset": 279}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 25, "line": 14, "offset": 299}, "extra": {"engine_kind": "OSS", "fingerprint": "3eada09126ccfd60c383fdfc444dfec32d761f3462dac148d0255faca741c8de90eb055c763bda3d3f215804998062305db55145a2bfa622c6e21036e67ba6be_0", "is_ignored": false, "lines": "    strcat(__dest,__src);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcat", "end": {"col": 11, "line": 14, "offset": 285}, "start": {"col": 5, "line": 14, "offset": 279}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00408f14_00408f14.c", "start": {"col": 5, "line": 14, "offset": 279}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 33, "line": 12, "offset": 220}, "extra": {"engine_kind": "OSS", "fingerprint": "272dc2243e0386ba3eb31a02a53e2aafcdffe6f25be355bcb1f8da3d9c13ce990044618e5241df0564f85cd58d3c9b06e41c77152fee82daa88127cc8c365fc6_0", "is_ignored": false, "lines": "  __stream = fopen(param_1,\"rt\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 19, "line": 12, "offset": 206}, "start": {"col": 14, "line": 12, "offset": 201}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00409394_00409394.c", "start": {"col": 14, "line": 12, "offset": 201}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 18, "offset": 377}, "extra": {"engine_kind": "OSS", "fingerprint": "ed10ad2b00e19153a1a03b83d3594c7649cdff0d1dbaafeaf980bf71f7d98caf986899a60d4d5fc829f962fb90ee04cff466435ec8c777f70de702f0fadf0efd_0", "is_ignored": false, "lines": "          pcVar4 = fgets(&DAT_0041c9f0,0x200,__stream);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$1": {"abstract_content": "s", "end": {"col": 5, "line": 2, "offset": 5}, "start": {"col": 4, "line": 2, "offset": 4}}, "$FUN": {"abstract_content": "fgets", "end": {"col": 25, "line": 18, "offset": 347}, "start": {"col": 20, "line": 18, "offset": 342}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_00409394_00409394.c", "start": {"col": 20, "line": 18, "offset": 342}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 32, "offset": 585}, "extra": {"engine_kind": "OSS", "fingerprint": "cf49bd998d64ec829f24b9bad7e42667b5f85b6cf9f9cc3e81026dcf41a11b62d787313e95d7fae01340401142dd6ada961ad730a31ee41f248061509afaacff_0", "is_ignored": false, "lines": "  memset(auStack_5e7,0,0x5b3);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 32, "offset": 578}, "start": {"col": 22, "line": 32, "offset": 577}}, "$DST": {"abstract_content": "auStack_5e7", "end": {"col": 21, "line": 32, "offset": 576}, "start": {"col": 10, "line": 32, "offset": 565}}, "$LEN": {"abstract_content": "0x5b3", "end": {"col": 29, "line": 32, "offset": 584}, "start": {"col": 24, "line": 32, "offset": 579}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004095f0_004095f0.c", "start": {"col": 3, "line": 32, "offset": 558}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 52, "line": 56, "offset": 1401}, "extra": {"engine_kind": "OSS", "fingerprint": "bcbd85515a504b67b479faac6aa4daa13ae67c1ef635f32ad9429ecb6343923fdb58a699ec910c2fa10ac93af1cc03867f434fbf707ecdc407458a3b74704542_0", "is_ignored": false, "lines": "            sprintf(&local_5e8,\n                    \"POST /HNAP1/ HTTP/1.1\\r\\nHost: %s:%d\\r\\nContent-Type: text/xml; charset=utf-8\\r\\nContent-Length: %d\\r\\nSOAPAction: \\\"http://%s/HNAP1/PushDCHEvent\\\"\\r\\n\\r\\n\"\n                    ,param_2,param_3,sVar4,param_2);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"POST /HNAP1/ HTTP/1.1\\r\\nHost: %s:%d\\r\\nContent-Type: text/xml; charset=utf-8\\r\\nContent-Length: %d\\r\\nSOAPAction: \\\"http://%s/HNAP1/PushDCHEvent\\\"\\r\\n\\r\\n\"", "end": {"col": 158, "line": 1, "offset": 157}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "&local_5e8", "end": {"col": 31, "line": 54, "offset": 1170}, "start": {"col": 21, "line": 54, "offset": 1160}}, "$FMT": {"abstract_content": "\"POST /HNAP1/ HTTP/1.1\\r\\nHost: %s:%d\\r\\nContent-Type: text/xml; charset=utf-8\\r\\nContent-Length: %d\\r\\nSOAPAction: \\\"http://%s/HNAP1/PushDCHEvent\\\"\\r\\n\\r\\n\"", "end": {"col": 178, "line": 55, "offset": 1349}, "start": {"col": 21, "line": 55, "offset": 1192}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004095f0_004095f0.c", "start": {"col": 13, "line": 54, "offset": 1152}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 56, "offset": 1401}, "extra": {"engine_kind": "OSS", "fingerprint": "66eb78ff7044ce7f8ce073d6f91fccc4d0b332a57074dd0824d3967c5521a5116222f0238323b1af1d28749190cd6208525809c842f12279a8077b7264252635_0", "is_ignored": false, "lines": "            sprintf(&local_5e8,\n                    \"POST /HNAP1/ HTTP/1.1\\r\\nHost: %s:%d\\r\\nContent-Type: text/xml; charset=utf-8\\r\\nContent-Length: %d\\r\\nSOAPAction: \\\"http://%s/HNAP1/PushDCHEvent\\\"\\r\\n\\r\\n\"\n                    ,param_2,param_3,sVar4,param_2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 20, "line": 54, "offset": 1159}, "start": {"col": 13, "line": 54, "offset": 1152}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004095f0_004095f0.c", "start": {"col": 13, "line": 54, "offset": 1152}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 28, "line": 68, "offset": 1757}, "extra": {"engine_kind": "OSS", "fingerprint": "d00e641d0fab83f2f66213a8b1aea7de16d36d3a33b2ad44a8e2b461154a9e2bb9d2caac2ffd5198b4c7ff2b07ce74a15485017be14a8f1295ebc8e4899cad81_0", "is_ignored": false, "lines": "              sVar5 = 0x5b4;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x5b4", "end": {"col": 28, "line": 68, "offset": 1757}, "start": {"col": 23, "line": 68, "offset": 1752}}, "$UNSIGNED": {"abstract_content": "sVar5", "end": {"col": 20, "line": 68, "offset": 1749}, "start": {"col": 15, "line": 68, "offset": 1744}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004095f0_004095f0.c", "start": {"col": 15, "line": 68, "offset": 1744}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 30, "offset": 820}, "extra": {"engine_kind": "OSS", "fingerprint": "92945a6c9d776f750d06db4527f672210f99cfc1138ada9b2104a53c3724a91c17ee2830ef0941b84b2a815a603c4e0fecc3047c6f02e8bae461014948649392_0", "is_ignored": false, "lines": "        sVar3 = recv(param_1,__buf,1,0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "recv", "end": {"col": 21, "line": 30, "offset": 801}, "start": {"col": 17, "line": 30, "offset": 797}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004098b8_004098b8.c", "start": {"col": 17, "line": 30, "offset": 797}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 40, "line": 30, "offset": 820}, "extra": {"engine_kind": "OSS", "fingerprint": "9fec0b39b089c920fa157e35cb960e0eee8a8b13b62b3aca3055872b575c252dc1f8c8ebbcbcc2cd5288324de36dc80dc9e8bbea20642c82827a2ed56aade64d_0", "is_ignored": false, "lines": "        sVar3 = recv(param_1,__buf,1,0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$BUF": {"abstract_content": "__buf", "end": {"col": 35, "line": 30, "offset": 815}, "start": {"col": 30, "line": 30, "offset": 810}}, "$FL": {"abstract_content": "0", "end": {"col": 39, "line": 30, "offset": 819}, "start": {"col": 38, "line": 30, "offset": 818}}, "$LEN": {"abstract_content": "1", "end": {"col": 37, "line": 30, "offset": 817}, "start": {"col": 36, "line": 30, "offset": 816}}, "$SD": {"abstract_content": "param_1", "end": {"col": 29, "line": 30, "offset": 809}, "start": {"col": 22, "line": 30, "offset": 802}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/FUN_004098b8_004098b8.c", "start": {"col": 17, "line": 30, "offset": 797}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 33, "offset": 678}, "extra": {"engine_kind": "OSS", "fingerprint": "bd26bce987930a4d3553734ec6c05d9c7aa0347eb7c3b74bd44e967062d461920a36f5ebb94604e3c62fdf23dce362f3ffb4176eac753f6926875765617473b3_0", "is_ignored": false, "lines": "    unlink(\"/tmp/.hnap_push_event.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 11, "line": 33, "offset": 649}, "start": {"col": 5, "line": 33, "offset": 643}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 5, "line": 33, "offset": 643}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 34, "offset": 729}, "extra": {"engine_kind": "OSS", "fingerprint": "b60aab01d1916f4ba42ee239ea68813bd01c34d32bdf0d707769fcdadb503c9b83cf3217f5d73533ac1a5e166ec827c3d2e63d3a2d6dc922e48ac343b6fa6e98_0", "is_ignored": false, "lines": "    __s = fopen(\"/tmp/.hnap_push_event.xml\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 16, "line": 34, "offset": 695}, "start": {"col": 11, "line": 34, "offset": 690}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 11, "line": 34, "offset": 690}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 44, "line": 59, "offset": 1427}, "extra": {"engine_kind": "OSS", "fingerprint": "16e45e546b7a7c8952aa5295bd7ecbcd26431a86ede8826b7018e7a09dc49aec6ecc8e9885f8e014df9af1e030acc7e66ffa2a5e5c6976aca55197b415cea418_0", "is_ignored": false, "lines": "            memset(acStack_2002c,0,0x20000);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 35, "line": 59, "offset": 1418}, "start": {"col": 34, "line": 59, "offset": 1417}}, "$DST": {"abstract_content": "acStack_2002c", "end": {"col": 33, "line": 59, "offset": 1416}, "start": {"col": 20, "line": 59, "offset": 1403}}, "$LEN": {"abstract_content": "0x20000", "end": {"col": 43, "line": 59, "offset": 1426}, "start": {"col": 36, "line": 59, "offset": 1419}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 13, "line": 59, "offset": 1396}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 86, "line": 64, "offset": 1829}, "extra": {"engine_kind": "OSS", "fingerprint": "b7dd4293a0e3a247ac5c861ebb0f51229ad0421f11f57f55f0dba58491aab8e7cada4e74410db172b3dc3f19f53423fe82dc035230e727cc76a5d665b25b6faf_0", "is_ignored": false, "lines": "            sprintf(acStack_2002c,\n                    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"\n                    ,\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n                    \"xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\",\n                    \"xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\",iVar9);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"", "end": {"col": 110, "line": 1, "offset": 109}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "acStack_2002c", "end": {"col": 34, "line": 60, "offset": 1462}, "start": {"col": 21, "line": 60, "offset": 1449}}, "$FMT": {"abstract_content": "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"", "end": {"col": 130, "line": 61, "offset": 1593}, "start": {"col": 21, "line": 61, "offset": 1484}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 13, "line": 60, "offset": 1441}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 86, "line": 64, "offset": 1829}, "extra": {"engine_kind": "OSS", "fingerprint": "4d67cc51a972a7e7a8638b8e59e3c30949c3a1de41e69c09c4e8bf99c2ca416054c23a9ab76dd3355432e16a46d8230f4102e0a46b2947ff48c8f330abd95958_0", "is_ignored": false, "lines": "            sprintf(acStack_2002c,\n                    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><soap:Envelope %s %s %s><soap:Body>%s</soap:Body></soap:Envelope>\"\n                    ,\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n                    \"xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"\",\n                    \"xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\",iVar9);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 20, "line": 60, "offset": 1448}, "start": {"col": 13, "line": 60, "offset": 1441}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 13, "line": 60, "offset": 1441}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 68, "offset": 1992}, "extra": {"engine_kind": "OSS", "fingerprint": "d660a09e791834c8098cd971b56d9261f0e1c9ccbcf2e0af62318821656d1e9fa11eb54ea3b5d19560d7084fc49697256f2d8cbac78e795de855af9b06492aa6_0", "is_ignored": false, "lines": "            sStack_2066c = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 29, "line": 68, "offset": 1992}, "start": {"col": 28, "line": 68, "offset": 1991}}, "$UNSIGNED": {"abstract_content": "sStack_2066c", "end": {"col": 25, "line": 68, "offset": 1988}, "start": {"col": 13, "line": 68, "offset": 1976}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 13, "line": 68, "offset": 1976}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 61, "line": 70, "offset": 2090}, "extra": {"engine_kind": "OSS", "fingerprint": "505fd3c8b41fca4b7bfca203fb9052da8ac6709068a02b30e1b3b90d4b4fd9fc08e8dbe97def6a7a7d85bd741e61b33372b4b5a6fb7b2ef52d9c0400db22f156_0", "is_ignored": false, "lines": "            memset((void *)((int)&uStack_205e0 + 1),0,0x5b3);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 54, "line": 70, "offset": 2083}, "start": {"col": 53, "line": 70, "offset": 2082}}, "$DST": {"abstract_content": "(void*(int&uStack_205e0+1", "end": {"col": 51, "line": 70, "offset": 2080}, "start": {"col": 20, "line": 70, "offset": 2049}}, "$LEN": {"abstract_content": "0x5b3", "end": {"col": 60, "line": 70, "offset": 2089}, "start": {"col": 55, "line": 70, "offset": 2084}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 13, "line": 70, "offset": 2042}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 44, "line": 73, "offset": 2248}, "extra": {"engine_kind": "OSS", "fingerprint": "116fd088c499646f22387831156a568a44381f2f024ce67b41aa1ad21a870be1824c036de95095203be60930090e17a16d0699145ee64585948fa497572e3cbb_0", "is_ignored": false, "lines": "              memset(&uStack_205e0,0,0x5b4);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 37, "line": 73, "offset": 2241}, "start": {"col": 36, "line": 73, "offset": 2240}}, "$DST": {"abstract_content": "&uStack_205e0", "end": {"col": 35, "line": 73, "offset": 2239}, "start": {"col": 22, "line": 73, "offset": 2226}}, "$LEN": {"abstract_content": "0x5b4", "end": {"col": 43, "line": 73, "offset": 2247}, "start": {"col": 38, "line": 73, "offset": 2242}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 15, "line": 73, "offset": 2219}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 57, "line": 76, "offset": 2408}, "extra": {"engine_kind": "OSS", "fingerprint": "fd83922a96d31175a2e9b33cfee52679b8f758aa3c2f29e4429bda64a1169731033fd44dbd5c742ad2efdf1f28f18124c9ff4ac11efae73e8c788426d710fe1c_0", "is_ignored": false, "lines": "                sscanf(acStack_205d8,\"%d\",&iStack_20670);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 23, "line": 76, "offset": 2374}, "start": {"col": 17, "line": 76, "offset": 2368}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 17, "line": 76, "offset": 2368}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc", "end": {"col": 57, "line": 76, "offset": 2408}, "extra": {"engine_kind": "OSS", "fingerprint": "9cbe644bda9351a77eb367ab7c7739f300d3ca6b3928c66cf1df99eb983ac97f679b8dbe32501e283f438d27d5a49721413f3d94a573756f02ee3ba6d58025fb_0", "is_ignored": false, "lines": "                sscanf(acStack_205d8,\"%d\",&iStack_20670);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 23, "line": 76, "offset": 2374}, "start": {"col": 17, "line": 76, "offset": 2368}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 17, "line": 76, "offset": 2368}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 61, "line": 80, "offset": 2636}, "extra": {"engine_kind": "OSS", "fingerprint": "fd83922a96d31175a2e9b33cfee52679b8f758aa3c2f29e4429bda64a1169731033fd44dbd5c742ad2efdf1f28f18124c9ff4ac11efae73e8c788426d710fe1c_1", "is_ignored": false, "lines": "                    sscanf(pcVar1 + 0x10,\"%d\",&sStack_2066c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 27, "line": 80, "offset": 2602}, "start": {"col": 21, "line": 80, "offset": 2596}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 21, "line": 80, "offset": 2596}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-scanf-etc", "end": {"col": 61, "line": 80, "offset": 2636}, "extra": {"engine_kind": "OSS", "fingerprint": "9cbe644bda9351a77eb367ab7c7739f300d3ca6b3928c66cf1df99eb983ac97f679b8dbe32501e283f438d27d5a49721413f3d94a573756f02ee3ba6d58025fb_1", "is_ignored": false, "lines": "                    sscanf(pcVar1 + 0x10,\"%d\",&sStack_2066c);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://codeql.github.com/codeql-query-help/cpp/cpp-missing-check-scanf/"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 27, "line": 80, "offset": 2602}, "start": {"col": 21, "line": 80, "offset": 2596}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 21, "line": 80, "offset": 2596}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 82, "offset": 2724}, "extra": {"engine_kind": "OSS", "fingerprint": "9ae8f7cc7c4272c9991e4414acb10944cc5600b504ec7b801995e1f8de4a205b852be56bccc9bb364d3ae107789f999c77c8182f20ddaa7d5c65678b97d5c2ab_0", "is_ignored": false, "lines": "                      sStack_2066c = 3;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "3", "end": {"col": 39, "line": 82, "offset": 2724}, "start": {"col": 38, "line": 82, "offset": 2723}}, "$UNSIGNED": {"abstract_content": "sStack_2066c", "end": {"col": 35, "line": 82, "offset": 2720}, "start": {"col": 23, "line": 82, "offset": 2708}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 23, "line": 82, "offset": 2708}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 41, "line": 84, "offset": 2788}, "extra": {"engine_kind": "OSS", "fingerprint": "615b0a5c076cafdae693c86bb4d25655402d4c73302724148ceb198979b5eba9a84303a6c70d71a9f73b560050c178eac570a198d1a2cdf0c3bb755bff2892c0_0", "is_ignored": false, "lines": "                    sVar2 = sStack_2066c;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "sStack_2066c", "end": {"col": 41, "line": 84, "offset": 2788}, "start": {"col": 29, "line": 84, "offset": 2776}}, "$UNSIGNED": {"abstract_content": "sVar2", "end": {"col": 26, "line": 84, "offset": 2773}, "start": {"col": 21, "line": 84, "offset": 2768}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 21, "line": 84, "offset": 2768}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 94, "offset": 3304}, "extra": {"engine_kind": "OSS", "fingerprint": "116fd088c499646f22387831156a568a44381f2f024ce67b41aa1ad21a870be1824c036de95095203be60930090e17a16d0699145ee64585948fa497572e3cbb_1", "is_ignored": false, "lines": "                    memset(&uStack_205e0,0,0x5b4);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 43, "line": 94, "offset": 3297}, "start": {"col": 42, "line": 94, "offset": 3296}}, "$DST": {"abstract_content": "&uStack_205e0", "end": {"col": 41, "line": 94, "offset": 3295}, "start": {"col": 28, "line": 94, "offset": 3282}}, "$LEN": {"abstract_content": "0x5b4", "end": {"col": 49, "line": 94, "offset": 3303}, "start": {"col": 44, "line": 94, "offset": 3298}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 21, "line": 94, "offset": 3275}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 98, "line": 102, "offset": 3764}, "extra": {"engine_kind": "OSS", "fingerprint": "6a53da53778d1f28986a0670e815d0a1595d3d96c270edef7e11838e01d5f5fe116260cc1d5cc072eeb09de058b68664735bc952a258a594f287539cf525daa5_0", "is_ignored": false, "lines": "                          iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),sVar2,0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar7", "end": {"col": 32, "line": 102, "offset": 3698}, "start": {"col": 27, "line": 102, "offset": 3693}}, "$UNSIGNED": {"abstract_content": "sVar2", "end": {"col": 95, "line": 102, "offset": 3761}, "start": {"col": 90, "line": 102, "offset": 3756}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 27, "line": 102, "offset": 3693}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 98, "line": 102, "offset": 3764}, "extra": {"engine_kind": "OSS", "fingerprint": "c0c58425a4326a39c17178f1eebd1933ce96206291ca32a1f13f0ee418e06af3b8d17a627b7b04f62e48bb3aaf15b70b27366772e88c4571c96252ac128688f0_0", "is_ignored": false, "lines": "                          iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),sVar2,0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "recv", "end": {"col": 39, "line": 102, "offset": 3705}, "start": {"col": 35, "line": 102, "offset": 3701}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 35, "line": 102, "offset": 3701}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 98, "line": 105, "offset": 3920}, "extra": {"engine_kind": "OSS", "fingerprint": "c0c58425a4326a39c17178f1eebd1933ce96206291ca32a1f13f0ee418e06af3b8d17a627b7b04f62e48bb3aaf15b70b27366772e88c4571c96252ac128688f0_1", "is_ignored": false, "lines": "                          iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),0x5b4,0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "recv", "end": {"col": 39, "line": 105, "offset": 3861}, "start": {"col": 35, "line": 105, "offset": 3857}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 35, "line": 105, "offset": 3857}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 98, "line": 105, "offset": 3920}, "extra": {"engine_kind": "OSS", "fingerprint": "8f47e3e07c02075aa927ceaaddff6c5692240d164f64269bb54cd8228bcfdbfd20d4c0cacc4b9fbf52873526e0e10e37670153989dc1179291c4df7eae81896a_0", "is_ignored": false, "lines": "                          iVar7 = recv(uStack_20674,(void *)((int)&uStack_205e0 + iVar5),0x5b4,0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$BUF": {"abstract_content": "(void*(int&uStack_205e0+iVar5", "end": {"col": 88, "line": 105, "offset": 3910}, "start": {"col": 53, "line": 105, "offset": 3875}}, "$FL": {"abstract_content": "0", "end": {"col": 97, "line": 105, "offset": 3919}, "start": {"col": 96, "line": 105, "offset": 3918}}, "$LEN": {"abstract_content": "0x5b4", "end": {"col": 95, "line": 105, "offset": 3917}, "start": {"col": 90, "line": 105, "offset": 3912}}, "$SD": {"abstract_content": "uStack_20674", "end": {"col": 52, "line": 105, "offset": 3874}, "start": {"col": 40, "line": 105, "offset": 3862}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 35, "line": 105, "offset": 3857}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 46, "line": 107, "offset": 3993}, "extra": {"engine_kind": "OSS", "fingerprint": "6a53da53778d1f28986a0670e815d0a1595d3d96c270edef7e11838e01d5f5fe116260cc1d5cc072eeb09de058b68664735bc952a258a594f287539cf525daa5_1", "is_ignored": false, "lines": "                        sVar2 = sVar2 - iVar7;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar7", "end": {"col": 46, "line": 107, "offset": 3993}, "start": {"col": 41, "line": 107, "offset": 3988}}, "$UNSIGNED": {"abstract_content": "sVar2", "end": {"col": 30, "line": 107, "offset": 3977}, "start": {"col": 25, "line": 107, "offset": 3972}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 25, "line": 107, "offset": 3972}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 130, "offset": 4563}, "extra": {"engine_kind": "OSS", "fingerprint": "bd26bce987930a4d3553734ec6c05d9c7aa0347eb7c3b74bd44e967062d461920a36f5ebb94604e3c62fdf23dce362f3ffb4176eac753f6926875765617473b3_1", "is_ignored": false, "lines": "    unlink(\"/tmp/.hnap_push_event.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 11, "line": 130, "offset": 4534}, "start": {"col": 5, "line": 130, "offset": 4528}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/PushDCHEventHandle_00409de8.c", "start": {"col": 5, "line": 130, "offset": 4528}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 12, "offset": 174}, "extra": {"engine_kind": "OSS", "fingerprint": "0bc12eb9e066217273a3695e1706442a88516fed4f963b39bdd74d02ed5d3c1122ddd6fa1699e88995eb837de80ca21bfbc95d0919bb857784f6d4e00bf0f725_0", "is_ignored": false, "lines": "  unlink(\"/tmp/.hnap_set_policy.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 12, "offset": 145}, "start": {"col": 3, "line": 12, "offset": 139}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetDCHPolicyHandle_0040a4e0.c", "start": {"col": 3, "line": 12, "offset": 139}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 13, "offset": 226}, "extra": {"engine_kind": "OSS", "fingerprint": "e03289fc49a0bb979dc70e0ea0595e4c222e4c223436ea5327d9c4a3ab778533a83d4fc03676c6a2bdd23bfcdbdf5d1232b4ab8a6ae38f270b7ca1cfbf65e0b3_0", "is_ignored": false, "lines": "  pFVar1 = fopen(\"/tmp/.hnap_set_policy.xml\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 17, "line": 13, "offset": 192}, "start": {"col": 12, "line": 13, "offset": 187}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetDCHPolicyHandle_0040a4e0.c", "start": {"col": 12, "line": 13, "offset": 187}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 36, "offset": 833}, "extra": {"engine_kind": "OSS", "fingerprint": "0bc12eb9e066217273a3695e1706442a88516fed4f963b39bdd74d02ed5d3c1122ddd6fa1699e88995eb837de80ca21bfbc95d0919bb857784f6d4e00bf0f725_1", "is_ignored": false, "lines": "          unlink(\"/mnt/flash/config/hnap_policy.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 17, "line": 36, "offset": 796}, "start": {"col": 11, "line": 36, "offset": 790}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetDCHPolicyHandle_0040a4e0.c", "start": {"col": 11, "line": 36, "offset": 790}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 67, "line": 37, "offset": 901}, "extra": {"engine_kind": "OSS", "fingerprint": "e03289fc49a0bb979dc70e0ea0595e4c222e4c223436ea5327d9c4a3ab778533a83d4fc03676c6a2bdd23bfcdbdf5d1232b4ab8a6ae38f270b7ca1cfbf65e0b3_1", "is_ignored": false, "lines": "          pFVar1 = fopen(\"/mnt/flash/config/hnap_policy.xml\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 25, "line": 37, "offset": 859}, "start": {"col": 20, "line": 37, "offset": 854}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetDCHPolicyHandle_0040a4e0.c", "start": {"col": 20, "line": 37, "offset": 854}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 52, "offset": 1209}, "extra": {"engine_kind": "OSS", "fingerprint": "0bc12eb9e066217273a3695e1706442a88516fed4f963b39bdd74d02ed5d3c1122ddd6fa1699e88995eb837de80ca21bfbc95d0919bb857784f6d4e00bf0f725_2", "is_ignored": false, "lines": "  unlink(\"/tmp/.hnap_set_policy.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 52, "offset": 1180}, "start": {"col": 3, "line": 52, "offset": 1174}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetDCHPolicyHandle_0040a4e0.c", "start": {"col": 3, "line": 52, "offset": 1174}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 12, "offset": 183}, "extra": {"engine_kind": "OSS", "fingerprint": "76f1d8fd95a4f3966b1687b4957a2f349e146e04895d3f1dcbbf9681cc80b6763b6c9d84c75551d27d0ff881cb4ad587d4937d37e23d8710f6d879a74f483231_0", "is_ignored": false, "lines": "  unlink(\"/tmp/.hnap_set_notifier.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 12, "offset": 152}, "start": {"col": 3, "line": 12, "offset": 146}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetNotifierSettingsHandle_0040a2d0.c", "start": {"col": 3, "line": 12, "offset": 146}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 53, "line": 13, "offset": 237}, "extra": {"engine_kind": "OSS", "fingerprint": "accdee6743e5cd373b7be7e12a73926522b81fbda8aa6d7224299da26e1de7b05ee48f0fe970e2d6d7f79220e0e99428afb1debde6193efc53042960305d6df9_0", "is_ignored": false, "lines": "  pFVar1 = fopen(\"/tmp/.hnap_set_notifier.xml\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 17, "line": 13, "offset": 201}, "start": {"col": 12, "line": 13, "offset": 196}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetNotifierSettingsHandle_0040a2d0.c", "start": {"col": 12, "line": 13, "offset": 196}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 56, "line": 36, "offset": 855}, "extra": {"engine_kind": "OSS", "fingerprint": "76f1d8fd95a4f3966b1687b4957a2f349e146e04895d3f1dcbbf9681cc80b6763b6c9d84c75551d27d0ff881cb4ad587d4937d37e23d8710f6d879a74f483231_1", "is_ignored": false, "lines": "          unlink(\"/mnt/flash/config/hnap_notifier.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 17, "line": 36, "offset": 816}, "start": {"col": 11, "line": 36, "offset": 810}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetNotifierSettingsHandle_0040a2d0.c", "start": {"col": 11, "line": 36, "offset": 810}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 69, "line": 37, "offset": 925}, "extra": {"engine_kind": "OSS", "fingerprint": "accdee6743e5cd373b7be7e12a73926522b81fbda8aa6d7224299da26e1de7b05ee48f0fe970e2d6d7f79220e0e99428afb1debde6193efc53042960305d6df9_1", "is_ignored": false, "lines": "          pFVar1 = fopen(\"/mnt/flash/config/hnap_notifier.xml\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 25, "line": 37, "offset": 881}, "start": {"col": 20, "line": 37, "offset": 876}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetNotifierSettingsHandle_0040a2d0.c", "start": {"col": 20, "line": 37, "offset": 876}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 52, "offset": 1235}, "extra": {"engine_kind": "OSS", "fingerprint": "76f1d8fd95a4f3966b1687b4957a2f349e146e04895d3f1dcbbf9681cc80b6763b6c9d84c75551d27d0ff881cb4ad587d4937d37e23d8710f6d879a74f483231_2", "is_ignored": false, "lines": "  unlink(\"/tmp/.hnap_set_notifier.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 52, "offset": 1204}, "start": {"col": 3, "line": 52, "offset": 1198}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/SetNotifierSettingsHandle_0040a2d0.c", "start": {"col": 3, "line": 52, "offset": 1198}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 13, "offset": 194}, "extra": {"engine_kind": "OSS", "fingerprint": "fcafa705e107e20d3044f3d0727e586f0ae36a4c52df1e7cff2168a2c6ec12c89b64016dfba73b1023f649a4eb2cbaf7a55e9f67d425018b9cc34c28891dcd15_0", "is_ignored": false, "lines": "  unlink(\"/tmp/.hnap_set_policy_check.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 13, "offset": 159}, "start": {"col": 3, "line": 13, "offset": 153}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/checkSetPolicyType_0040a6f0.c", "start": {"col": 3, "line": 13, "offset": 153}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 14, "offset": 249}, "extra": {"engine_kind": "OSS", "fingerprint": "ddace8ea87b79d839a676832c52bcd38cb8f8a0ec350c9d32130768583d540017bda979212bc6a5c51aab9f1e539e7ff84716279187f521194798614a06de098_0", "is_ignored": false, "lines": "  __s = fopen(\"/tmp/.hnap_set_policy_check.xml\",\"wb\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 14, "line": 14, "offset": 209}, "start": {"col": 9, "line": 14, "offset": 204}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/checkSetPolicyType_0040a6f0.c", "start": {"col": 9, "line": 14, "offset": 204}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 40, "offset": 864}, "extra": {"engine_kind": "OSS", "fingerprint": "fcafa705e107e20d3044f3d0727e586f0ae36a4c52df1e7cff2168a2c6ec12c89b64016dfba73b1023f649a4eb2cbaf7a55e9f67d425018b9cc34c28891dcd15_1", "is_ignored": false, "lines": "  unlink(\"/tmp/.hnap_set_policy_check.xml\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "unlink", "end": {"col": 9, "line": 40, "offset": 829}, "start": {"col": 3, "line": 40, "offset": 823}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/checkSetPolicyType_0040a6f0.c", "start": {"col": 3, "line": 40, "offset": 823}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 30, "line": 21, "offset": 500}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_0", "is_ignored": false, "lines": "      pcVar4 = strdup(pcVar4);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 22, "line": 21, "offset": 492}, "start": {"col": 16, "line": 21, "offset": 486}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 13, "line": 21, "offset": 483}, "start": {"col": 7, "line": 21, "offset": 477}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 7, "line": 21, "offset": 477}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 47, "line": 23, "offset": 573}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_1", "is_ignored": false, "lines": "      pcVar4 = strdup(*(char **)(param_2 + 8));", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 22, "line": 23, "offset": 548}, "start": {"col": 16, "line": 23, "offset": 542}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 13, "line": 23, "offset": 539}, "start": {"col": 7, "line": 23, "offset": 533}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 7, "line": 23, "offset": 533}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 28, "line": 27, "offset": 709}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_2", "is_ignored": false, "lines": "        pcVar4 = strdup(\"\");", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 24, "line": 27, "offset": 705}, "start": {"col": 18, "line": 27, "offset": 699}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 15, "line": 27, "offset": 696}, "start": {"col": 9, "line": 27, "offset": 690}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 9, "line": 27, "offset": 690}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 30, "line": 39, "offset": 1009}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_3", "is_ignored": false, "lines": "      pcVar4 = strdup(pcVar4);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 22, "line": 39, "offset": 1001}, "start": {"col": 16, "line": 39, "offset": 995}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 13, "line": 39, "offset": 992}, "start": {"col": 7, "line": 39, "offset": 986}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 7, "line": 39, "offset": 986}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 47, "line": 41, "offset": 1082}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_4", "is_ignored": false, "lines": "      pcVar4 = strdup(*(char **)(param_2 + 8));", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 22, "line": 41, "offset": 1057}, "start": {"col": 16, "line": 41, "offset": 1051}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 13, "line": 41, "offset": 1048}, "start": {"col": 7, "line": 41, "offset": 1042}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 7, "line": 41, "offset": 1042}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 49, "line": 43, "offset": 1159}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_5", "is_ignored": false, "lines": "      pcVar4 = strdup(*(char **)(param_2 + 0xc));", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 22, "line": 43, "offset": 1132}, "start": {"col": 16, "line": 43, "offset": 1126}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 13, "line": 43, "offset": 1123}, "start": {"col": 7, "line": 43, "offset": 1117}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 7, "line": 43, "offset": 1117}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 30, "line": 54, "offset": 1451}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb343365545e771367f5799ff2c591cb8933954d42d5825b97640a68ba4bfac43e2daf2127d75a490d442e0e793565f78e91958736a9e14aca5de137ffd3afd_6", "is_ignored": false, "lines": "      pcVar4 = strdup(pcVar4);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strdup", "end": {"col": 22, "line": 54, "offset": 1443}, "start": {"col": 16, "line": 54, "offset": 1437}}, "$RET": {"abstract_content": "pcVar4", "end": {"col": 13, "line": 54, "offset": 1434}, "start": {"col": 7, "line": 54, "offset": 1428}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/main_00407cd4.c", "start": {"col": 7, "line": 54, "offset": 1428}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 27, "line": 7, "offset": 84}, "extra": {"engine_kind": "OSS", "fingerprint": "58d468c1819cc4c7eb6d2f9c37d138491b0ba1dd6fac6153d78dc872847d37ae99de6d570ece400c9afde2069bb5b95eca4ba124beb84ecab5b4d8cd29b5f332_0", "is_ignored": false, "lines": "  pvVar1 = calloc(1,0x404);", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 18, "line": 7, "offset": 75}, "start": {"col": 12, "line": 7, "offset": 69}}, "$RET": {"abstract_content": "pvVar1", "end": {"col": 9, "line": 7, "offset": 66}, "start": {"col": 3, "line": 7, "offset": 60}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/qryInit_00408500.c", "start": {"col": 3, "line": 7, "offset": 60}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 27, "line": 7, "offset": 84}, "extra": {"engine_kind": "OSS", "fingerprint": "57ba5fabd400f0fd4ec98fa603775be30e4762c6d303fd86922f7565f7f344dc28206c61877a662ee3151f48d080e84ed87fe9d3fca354f71dc1490676fcd09a_0", "is_ignored": false, "lines": "  pvVar1 = calloc(1,0x404);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 18, "line": 7, "offset": 75}, "start": {"col": 12, "line": 7, "offset": 69}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/qryInit_00408500.c", "start": {"col": 12, "line": 7, "offset": 69}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 27, "line": 7, "offset": 84}, "extra": {"engine_kind": "OSS", "fingerprint": "2b2e3a10eeec9b4d945e4789508e8029dd9f296e2c83c163c7ad5e1211cff1098bf4b26b5c1dbbe78fb3575389069292d1b418ed9c21da1596d5d40431416824_0", "is_ignored": false, "lines": "  pvVar1 = calloc(1,0x404);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 20, "line": 7, "offset": 77}, "start": {"col": 19, "line": 7, "offset": 76}}, "$LEN": {"abstract_content": "0x404", "end": {"col": 26, "line": 7, "offset": 83}, "start": {"col": 21, "line": 7, "offset": 78}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mdb/qryInit_00408500.c", "start": {"col": 12, "line": 7, "offset": 69}}], "skipped_rules": [], "version": "1.89.0"}
