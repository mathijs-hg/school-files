{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["/tmp/haruspex_msger/FUN_00400920_00400920.c", "/tmp/haruspex_msger/FUN_004009f4_004009f4.c", "/tmp/haruspex_msger/FUN_00400a60_00400a60.c", "/tmp/haruspex_msger/FUN_00401690_00401690.c", "/tmp/haruspex_msger/_fini_00401830.c", "/tmp/haruspex_msger/_ftext_004008c0.c", "/tmp/haruspex_msger/_init_00400848.c", "/tmp/haruspex_msger/main_00401150.c"]}, "results": [{"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat", "end": {"col": 65, "line": 87, "offset": 2351}, "extra": {"engine_kind": "OSS", "fingerprint": "108298a00a06a09525ef1c68849712cb4131716c7108df36fad495ec54a44142fc537e2100d21f88a1ae4fce8bd090bd73942c0e43456693e634b9bcee5b0150_0", "is_ignored": false, "lines": "            strcpy((char *)local_12c,*(char **)(param_2 + 0x14));", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_msger/main_00401150.c", "start": {"col": 13, "line": 87, "offset": 2299}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 65, "line": 87, "offset": 2351}, "extra": {"engine_kind": "OSS", "fingerprint": "27c25b150583a33e5e74b4420d0608c657ddc30650a2ea474cf4099a18028b91e7d42190d5c796b9db86e7f447cadb4938cd1245989d2bd1c62d1bedb09c85ac_0", "is_ignored": false, "lines": "            strcpy((char *)local_12c,*(char **)(param_2 + 0x14));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strcpy", "end": {"col": 19, "line": 87, "offset": 2305}, "start": {"col": 13, "line": 87, "offset": 2299}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_msger/main_00401150.c", "start": {"col": 13, "line": 87, "offset": 2299}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 55, "line": 88, "offset": 2407}, "extra": {"engine_kind": "OSS", "fingerprint": "5ef0a6e29f41ab4823c5748facafc3b3c7b63b0200ba9a08f8c2823457db712df5f9e37fa4739585ad71fffbaf42082251de6d3244fb44586f611cfe8ff9e1a5_0", "is_ignored": false, "lines": "            sVar5 = strlen(*(char **)(param_2 + 0x14));", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "param_2", "end": {"col": 46, "line": 88, "offset": 2398}, "start": {"col": 39, "line": 88, "offset": 2391}}, "$UNSIGNED": {"abstract_content": "sVar5", "end": {"col": 18, "line": 88, "offset": 2370}, "start": {"col": 13, "line": 88, "offset": 2365}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_msger/main_00401150.c", "start": {"col": 13, "line": 88, "offset": 2365}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 89, "offset": 2438}, "extra": {"engine_kind": "OSS", "fingerprint": "6e40ef998a5c734aa546a27d2b33edd8b4b5a7acb1cb48da797ea4b6a30e7cdf55d89f596ecd8476eb7304e1332f84b3ad5c687e5cca0ac86e51864ff5a6cf34_0", "is_ignored": false, "lines": "            iVar9 = sVar5 + 1;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar9", "end": {"col": 18, "line": 89, "offset": 2426}, "start": {"col": 13, "line": 89, "offset": 2421}}, "$UNSIGNED": {"abstract_content": "sVar5", "end": {"col": 26, "line": 89, "offset": 2434}, "start": {"col": 21, "line": 89, "offset": 2429}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_msger/main_00401150.c", "start": {"col": 13, "line": 89, "offset": 2421}}], "skipped_rules": [], "version": "1.89.0"}
