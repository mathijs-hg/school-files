{"errors": [{"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c:36:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "spans": [{"end": {"col": 14, "line": 36, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 13, "line": 36, "offset": 0}}, {"end": {"col": 96, "line": 101, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 95, "line": 101, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 14, "line": 36, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 13, "line": 36, "offset": 0}}, {"end": {"col": 96, "line": 101, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 95, "line": 101, "offset": 0}}]]}, {"code": 2, "level": "warn", "message": "Timeout when running external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-sizeof on /tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c:\n ", "path": "/tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c", "rule_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-sizeof", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy on /tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c:\n ", "path": "/tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c", "rule_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running external.semgrep-rules-0xdea.c.raptor-unchecked-ret-setuid-seteuid on /tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c:\n ", "path": "/tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c", "rule_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-setuid-seteuid", "type": "Timeout"}, {"code": 2, "level": "warn", "message": "Timeout when running external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc on /tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c:\n ", "path": "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "rule_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "type": "Timeout"}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c:35:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "spans": [{"end": {"col": 77, "line": 35, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "start": {"col": 76, "line": 35, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 77, "line": 35, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "start": {"col": 76, "line": 35, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c:120:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c", "spans": [{"end": {"col": 75, "line": 120, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c", "start": {"col": 74, "line": 120, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 75, "line": 120, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c", "start": {"col": 74, "line": 120, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c:107:\n `,` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c", "spans": [{"end": {"col": 44, "line": 107, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c", "start": {"col": 43, "line": 107, "offset": 0}}, {"end": {"col": 80, "line": 353, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c", "start": {"col": 79, "line": 353, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 44, "line": 107, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c", "start": {"col": 43, "line": 107, "offset": 0}}, {"end": {"col": 80, "line": 353, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c", "start": {"col": 79, "line": 353, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c:51:\n `,` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "spans": [{"end": {"col": 23, "line": 51, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "start": {"col": 22, "line": 51, "offset": 0}}, {"end": {"col": 82, "line": 85, "offset": 84}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "start": {"col": 70, "line": 84, "offset": 0}}, {"end": {"col": 10, "line": 277, "offset": 7944}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "start": {"col": 1, "line": 111, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 23, "line": 51, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "start": {"col": 22, "line": 51, "offset": 0}}, {"end": {"col": 82, "line": 85, "offset": 84}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "start": {"col": 70, "line": 84, "offset": 0}}, {"end": {"col": 10, "line": 277, "offset": 7944}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "start": {"col": 1, "line": 111, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/putRData_00420100.c:146:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "spans": [{"end": {"col": 100, "line": 146, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "start": {"col": 99, "line": 146, "offset": 0}}, {"end": {"col": 88, "line": 206, "offset": 94}, "file": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "start": {"col": 93, "line": 205, "offset": 0}}, {"end": {"col": 83, "line": 224, "offset": 181}, "file": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "start": {"col": 98, "line": 222, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 100, "line": 146, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "start": {"col": 99, "line": 146, "offset": 0}}, {"end": {"col": 88, "line": 206, "offset": 94}, "path": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "start": {"col": 93, "line": 205, "offset": 0}}, {"end": {"col": 83, "line": 224, "offset": 181}, "path": "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "start": {"col": 98, "line": 222, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c:116:\n `)))` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "spans": [{"end": {"col": 90, "line": 116, "offset": 3}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 87, "line": 116, "offset": 0}}, {"end": {"col": 28, "line": 124, "offset": 33}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 12, "line": 123, "offset": 0}}, {"end": {"col": 98, "line": 152, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 97, "line": 152, "offset": 0}}, {"end": {"col": 66, "line": 177, "offset": 2}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 64, "line": 177, "offset": 0}}, {"end": {"col": 24, "line": 252, "offset": 19}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 5, "line": 252, "offset": 0}}, {"end": {"col": 23, "line": 254, "offset": 47}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 253, "offset": 0}}, {"end": {"col": 10, "line": 265, "offset": 303}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 9, "line": 255, "offset": 0}}, {"end": {"col": 30, "line": 268, "offset": 68}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 267, "offset": 0}}, {"end": {"col": 43, "line": 292, "offset": 992}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 13, "line": 269, "offset": 0}}, {"end": {"col": 52, "line": 296, "offset": 241}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 15, "line": 293, "offset": 0}}, {"end": {"col": 21, "line": 303, "offset": 22}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 69, "line": 302, "offset": 0}}, {"end": {"col": 70, "line": 306, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 69, "line": 306, "offset": 0}}, {"end": {"col": 69, "line": 308, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 68, "line": 308, "offset": 0}}, {"end": {"col": 71, "line": 313, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 70, "line": 313, "offset": 0}}, {"end": {"col": 73, "line": 318, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 72, "line": 318, "offset": 0}}, {"end": {"col": 28, "line": 320, "offset": 29}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 69, "line": 319, "offset": 0}}, {"end": {"col": 66, "line": 320, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 65, "line": 320, "offset": 0}}, {"end": {"col": 63, "line": 323, "offset": 94}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 322, "offset": 0}}, {"end": {"col": 89, "line": 323, "offset": 10}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 79, "line": 323, "offset": 0}}, {"end": {"col": 60, "line": 326, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 59, "line": 326, "offset": 0}}, {"end": {"col": 43, "line": 330, "offset": 160}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 328, "offset": 0}}, {"end": {"col": 53, "line": 330, "offset": 2}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 51, "line": 330, "offset": 0}}, {"end": {"col": 65, "line": 333, "offset": 101}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 21, "line": 332, "offset": 0}}, {"end": {"col": 91, "line": 333, "offset": 10}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 81, "line": 333, "offset": 0}}, {"end": {"col": 24, "line": 335, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 23, "line": 335, "offset": 0}}, {"end": {"col": 39, "line": 340, "offset": 154}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 338, "offset": 0}}, {"end": {"col": 79, "line": 340, "offset": 2}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 77, "line": 340, "offset": 0}}, {"end": {"col": 40, "line": 346, "offset": 210}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 342, "offset": 0}}, {"end": {"col": 49, "line": 351, "offset": 163}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 23, "line": 349, "offset": 0}}, {"end": {"col": 33, "line": 352, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 32, "line": 352, "offset": 0}}, {"end": {"col": 18, "line": 356, "offset": 19}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 355, "offset": 0}}, {"end": {"col": 14, "line": 359, "offset": 15}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 15, "line": 358, "offset": 0}}, {"end": {"col": 10, "line": 426, "offset": 11}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 425, "offset": 0}}, {"end": {"col": 8, "line": 434, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 434, "offset": 0}}, {"end": {"col": 6, "line": 436, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 5, "line": 436, "offset": 0}}, {"end": {"col": 41, "line": 446, "offset": 43}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 99, "line": 445, "offset": 0}}, {"end": {"col": 44, "line": 488, "offset": 46}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 70, "line": 487, "offset": 0}}, {"end": {"col": 4, "line": 510, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 3, "line": 510, "offset": 0}}, {"end": {"col": 74, "line": 524, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 73, "line": 524, "offset": 0}}, {"end": {"col": 2, "line": 592, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 1, "line": 592, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 90, "line": 116, "offset": 3}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 87, "line": 116, "offset": 0}}, {"end": {"col": 28, "line": 124, "offset": 33}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 12, "line": 123, "offset": 0}}, {"end": {"col": 98, "line": 152, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 97, "line": 152, "offset": 0}}, {"end": {"col": 66, "line": 177, "offset": 2}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 64, "line": 177, "offset": 0}}, {"end": {"col": 24, "line": 252, "offset": 19}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 5, "line": 252, "offset": 0}}, {"end": {"col": 23, "line": 254, "offset": 47}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 253, "offset": 0}}, {"end": {"col": 10, "line": 265, "offset": 303}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 9, "line": 255, "offset": 0}}, {"end": {"col": 30, "line": 268, "offset": 68}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 267, "offset": 0}}, {"end": {"col": 43, "line": 292, "offset": 992}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 13, "line": 269, "offset": 0}}, {"end": {"col": 52, "line": 296, "offset": 241}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 15, "line": 293, "offset": 0}}, {"end": {"col": 21, "line": 303, "offset": 22}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 69, "line": 302, "offset": 0}}, {"end": {"col": 70, "line": 306, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 69, "line": 306, "offset": 0}}, {"end": {"col": 69, "line": 308, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 68, "line": 308, "offset": 0}}, {"end": {"col": 71, "line": 313, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 70, "line": 313, "offset": 0}}, {"end": {"col": 73, "line": 318, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 72, "line": 318, "offset": 0}}, {"end": {"col": 28, "line": 320, "offset": 29}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 69, "line": 319, "offset": 0}}, {"end": {"col": 66, "line": 320, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 65, "line": 320, "offset": 0}}, {"end": {"col": 63, "line": 323, "offset": 94}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 322, "offset": 0}}, {"end": {"col": 89, "line": 323, "offset": 10}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 79, "line": 323, "offset": 0}}, {"end": {"col": 60, "line": 326, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 59, "line": 326, "offset": 0}}, {"end": {"col": 43, "line": 330, "offset": 160}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 328, "offset": 0}}, {"end": {"col": 53, "line": 330, "offset": 2}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 51, "line": 330, "offset": 0}}, {"end": {"col": 65, "line": 333, "offset": 101}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 21, "line": 332, "offset": 0}}, {"end": {"col": 91, "line": 333, "offset": 10}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 81, "line": 333, "offset": 0}}, {"end": {"col": 24, "line": 335, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 23, "line": 335, "offset": 0}}, {"end": {"col": 39, "line": 340, "offset": 154}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 338, "offset": 0}}, {"end": {"col": 79, "line": 340, "offset": 2}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 77, "line": 340, "offset": 0}}, {"end": {"col": 40, "line": 346, "offset": 210}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 342, "offset": 0}}, {"end": {"col": 49, "line": 351, "offset": 163}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 23, "line": 349, "offset": 0}}, {"end": {"col": 33, "line": 352, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 32, "line": 352, "offset": 0}}, {"end": {"col": 18, "line": 356, "offset": 19}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 19, "line": 355, "offset": 0}}, {"end": {"col": 14, "line": 359, "offset": 15}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 15, "line": 358, "offset": 0}}, {"end": {"col": 10, "line": 426, "offset": 11}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 425, "offset": 0}}, {"end": {"col": 8, "line": 434, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 434, "offset": 0}}, {"end": {"col": 6, "line": 436, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 5, "line": 436, "offset": 0}}, {"end": {"col": 41, "line": 446, "offset": 43}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 99, "line": 445, "offset": 0}}, {"end": {"col": 44, "line": 488, "offset": 46}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 70, "line": 487, "offset": 0}}, {"end": {"col": 4, "line": 510, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 3, "line": 510, "offset": 0}}, {"end": {"col": 74, "line": 524, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 73, "line": 524, "offset": 0}}, {"end": {"col": 2, "line": 592, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 1, "line": 592, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c:34:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "spans": [{"end": {"col": 62, "line": 34, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "start": {"col": 61, "line": 34, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 62, "line": 34, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "start": {"col": 61, "line": 34, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c:32:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "spans": [{"end": {"col": 94, "line": 32, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "start": {"col": 93, "line": 32, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 94, "line": 32, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "start": {"col": 93, "line": 32, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c:175:\n `)` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "spans": [{"end": {"col": 62, "line": 175, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 61, "line": 175, "offset": 0}}, {"end": {"col": 62, "line": 185, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 61, "line": 185, "offset": 0}}, {"end": {"col": 24, "line": 282, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 23, "line": 282, "offset": 0}}, {"end": {"col": 94, "line": 378, "offset": 2}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 92, "line": 378, "offset": 0}}, {"end": {"col": 81, "line": 442, "offset": 83}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 83, "line": 441, "offset": 0}}, {"end": {"col": 83, "line": 450, "offset": 85}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 85, "line": 449, "offset": 0}}, {"end": {"col": 95, "line": 554, "offset": 1}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 94, "line": 554, "offset": 0}}, {"end": {"col": 59, "line": 575, "offset": 61}, "file": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 68, "line": 574, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 62, "line": 175, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 61, "line": 175, "offset": 0}}, {"end": {"col": 62, "line": 185, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 61, "line": 185, "offset": 0}}, {"end": {"col": 24, "line": 282, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 23, "line": 282, "offset": 0}}, {"end": {"col": 94, "line": 378, "offset": 2}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 92, "line": 378, "offset": 0}}, {"end": {"col": 81, "line": 442, "offset": 83}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 83, "line": 441, "offset": 0}}, {"end": {"col": 83, "line": 450, "offset": 85}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 85, "line": 449, "offset": 0}}, {"end": {"col": 95, "line": 554, "offset": 1}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 94, "line": 554, "offset": 0}}, {"end": {"col": 59, "line": 575, "offset": 61}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 68, "line": 574, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line /tmp/haruspex_mDNSClientPosix/FUN_0043e94c_0043e94c.c:4:\n `void FUN_0043e94c(int param_1)\n\n{\n  undefined uVar1;\n  ushort uVar2;\n  bool bVar3;\n  undefined4 *puVar4;\n  undefined4 *puVar5;\n  byte bVar14;\n  int iVar6;\n  char *pcVar7;\n  int iVar8;\n  uint uVar9;\n  undefined *puVar10;\n  char *pcVar11;\n  undefined2 uVar13;\n  char *pcVar12;\n  undefined4 *puVar15;\n  undefined4 uVar16;\n  byte *pbVar17;\n  undefined4 uVar18;\n  undefined4 *puVar19;\n  undefined6 *puVar20;\n  int iVar21;\n  int iVar22;\n  int iVar23;\n  undefined1 *in_stack_fffff850;\n  undefined4 local_798;\n  undefined4 local_794;\n  undefined4 local_790;\n  undefined4 local_78c;\n  undefined4 local_788;\n  undefined4 local_784;\n  undefined4 local_780;\n  undefined4 local_77c;\n  undefined4 local_778;\n  undefined4 local_774;\n  undefined auStack_770 [4];\n  undefined auStack_76c [4];\n  ushort local_768;\n  undefined4 local_764;\n  undefined2 local_760;\n  undefined local_5f8 [260];\n  undefined auStack_4f4 [264];\n  undefined auStack_3ec [4];\n  undefined auStack_3e8 [4];\n  undefined2 local_3e4;\n  undefined4 local_3e0;\n  undefined2 local_3dc;\n  undefined2 local_3da;\n  int local_3c8;\n  int local_68;\n  int local_64;\n  int local_60;\n  undefined *local_5c;\n  int local_58;\n  undefined *local_54;\n  undefined *local_50;\n  int local_4c;\n  char *local_48;\n  int local_44;\n  undefined *local_40;\n  undefined *local_3c;\n  char *local_38;\n  char *local_34;\n  undefined4 *local_30;\n  \n  puVar4 = (undefined4 *)GetFirstActiveInterface(*(undefined4 *)(param_1 + 0x2174));\n  *(int *)(param_1 + 0x254) = *(int *)(param_1 + 0x234) + 0x78000000;\n  if (*(char *)(param_1 + 0x275) == '\\x01') {\n    uVar16 = *(undefined4 *)(param_1 + 0x2174);\n    while (puVar5 = (undefined4 *)GetFirstActiveInterface(uVar16), puVar5 != (undefined4 *)0x0) {\n      if ((puVar5[0x2a3] != 0) &&\n         (puVar5[0x2a4] == mDNSPlatformOneSecond * 10 + *(int *)(param_1 + 0x234))) {\n        puVar5[0x2a4] = puVar5[0x2a4] + 1;\n      }\n      uVar16 = *puVar5;\n    }\n    for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n        puVar5 = (undefined4 *)*puVar5) {\n      if ((((puVar5[7] != 0) || (*(char *)((int)puVar5 + 0x4a) != '\\0')) ||\n          (iVar21 = IsLocalDomain(puVar5[8]), iVar21 != 0)) &&\n         ((*(short *)((int)puVar5 + 0xf2) != 0 &&\n          (-1 < (-puVar5[0x30] - puVar5[0x2f]) + *(int *)(param_1 + 0x234))))) {\n        uVar16 = *(undefined4 *)(param_1 + 0x2174);\n        while (puVar15 = (undefined4 *)GetFirstActiveInterface(uVar16), puVar15 != (undefined4 *)0x0\n              ) {\n          uVar9 = mDNSPlatformInterfaceIndexfromInterfaceID(param_1,puVar15[0x548],1);\n          if (((0x3f < uVar9) || ((1 << (uVar9 & 0x1f) & puVar5[(uVar9 >> 5) + 0x3d]) != 0)) &&\n             ((puVar5[7] == 0 || (puVar5[7] == puVar15[0x548])))) {\n            if (mDNS_LoggingEnabled != 0) {\n              local_38 = (char *)puVar5[0x3e];\n              local_34 = (char *)puVar5[0x3d];\n              local_30 = (undefined4 *)(uint)*(ushort *)((int)puVar5 + 0xf2);\n              uVar16 = GetRRDisplayString_rdb(puVar5 + 1,puVar5[9] + 4,param_1 + 0x2f);\n              LogMsgWithLevel(2,\"RetrySPSRegistrations: 0x%x 0x%x (updateid %d) %s\",local_38,\n                              local_34,local_30,uVar16);\n            }\n            FUN_00434f7c(param_1,puVar15,(uint)*(ushort *)((int)puVar5 + 0xf2) << 0x10);\n          }\n          uVar16 = *puVar15;\n        }\n      }\n    }\n    uVar16 = *(undefined4 *)(param_1 + 0x2174);\n    while (puVar5 = (undefined4 *)GetFirstActiveInterface(uVar16), puVar5 != (undefined4 *)0x0) {\n      iVar21 = puVar5[0x2a3];\n      if (((iVar21 != 0) &&\n          (puVar5[0x2a4] == mDNSPlatformOneSecond * 10 + *(int *)(param_1 + 0x234))) && (iVar21 < 8)\n         ) {\n        puVar5[0x2a3] = iVar21 + 1;\n      }\n      uVar16 = *puVar5;\n    }\n  }\n  local_64 = param_1 + 0x2f;\n  for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n      puVar5 = (undefined4 *)*puVar5) {\n    if (*(char *)((int)puVar5 + 0x8b) != '\\0') {\n      local_790 = 0;\n      local_78c = 0;\n      local_788 = 0;\n      local_798 = 4;\n      local_780 = 0;\n      local_77c = 0;\n      local_778 = 0;\n      local_774 = 0;\n      local_784 = 6;\n      local_794 = puVar5[0x27];\n      memcpy(&local_780,puVar5 + 0x28,0x10);\n      if (puVar5[0x27] != 0) {\n        FUN_0042e884(param_1,&local_798,puVar5[0x24]);\n      }\n      if (((puVar5[0x29] != 0) || (puVar5[0x28] != 0)) ||\n         ((puVar5[0x2a] != 0 || (puVar5[0x2b] != 0)))) {\n        FUN_0042e884(param_1,&local_784,puVar5[0x24]);\n      }\n      if (*(char *)((int)puVar5 + 0x8b) != '\\0') {\n        uVar16 = GetRRDisplayString_rdb(puVar5 + 1,puVar5[9] + 4,local_64);\n        LogMsgWithLevel(0,\"SendResponses: ERROR: rr->ImmedUnicast still set: %s\",uVar16);\n        *(undefined *)((int)puVar5 + 0x8b) = 0;\n      }\n    }\n  }\n  iVar21 = 0;\n  for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n      puVar5 = (undefined4 *)*puVar5) {\n    while ((iVar22 = puVar5[0x37], iVar22 != 0 && (-1 < *(int *)(param_1 + 0x234) - iVar22))) {\n      iVar23 = puVar5[0x36];\n      puVar5[0x36] = iVar23 + 1U;\n      if (iVar23 + 1U < 10) {\n        iVar22 = mDNSPlatformOneSecond * 6 + iVar22;\n        if (iVar22 == 0) {\n          iVar22 = 1;\n        }\n        puVar5[0x37] = iVar22;\n      }\n      else {\n        puVar5[0x37] = 0;\n      }\n    }\n    uVar9 = (uint)*(byte *)((int)puVar5 + 0x87);\n    if ((uVar9 != 0) && (-1 < (-puVar5[0x30] - puVar5[0x2f]) + *(int *)(param_1 + 0x234))) {\n      if (*(byte *)(puVar5 + 1) == 1) {\n        if (*(int *)((int)puVar5 + 0x4e) == 0) {\n          puVar5[0x24] = 0xffffffff;\n        }\n        else {\n          if (mDNS_LoggingEnabled != 0) {\n            uVar16 = GetRRDisplayString_rdb(puVar5 + 1,puVar5[9] + 4,local_64);\n            LogMsgWithLevel(2,\"SendResponses: Sending wakeup %2d for %.6a %s\",uVar9 - 3,\n                            puVar5 + 0x15,uVar16);\n          }\n          FUN_00429ce4(param_1,puVar5[7],puVar5 + 0x15,(int)puVar5 + 0x5a);\n          puVar15 = puVar5;\n          do {\n            if ((((*(char *)(puVar15 + 1) == '\\x01') && (*(char *)((int)puVar15 + 0x87) != '\\0')) &&\n                ((puVar15[7] == puVar5[7] &&\n                 ((puVar15[0x15] == puVar5[0x15] &&\n                  (*(short *)(puVar15 + 0x16) == *(short *)(puVar5 + 0x16))))))) &&\n               ((*(short *)((int)puVar15 + 0x4e) != 0 ||\n                ((*(short *)(puVar15 + 0x14) != 0 || (*(short *)((int)puVar15 + 0x52) != 0)))))) {\n              if ((puVar15[0x18] == 6) && (*(char *)((int)puVar15 + 0x87) == '\\x12')) {\n                if (mDNS_LoggingEnabled != 0) {\n                  uVar16 = GetRRDisplayString_rdb(puVar15 + 1,puVar15[9] + 4,local_64);\n                  LogMsgWithLevel(2,\n                                  \"NDP Announcement %2d Releasing traffic for H-MAC %.6a I-MAC %.6a %s\"\n                                  ,0xf,(int)puVar15 + 0x4e,puVar15 + 0x15,uVar16);\n                }\n                in_stack_fffff850 = AllHosts_v6;\n                FUN_0042989c(param_1,0x88,0x20,puVar15,puVar15 + 0x19,puVar15 + 0x15,AllHosts_v6,\n                             &AllHosts_v6_Eth);\n              }\n              bVar14 = *(char *)((int)puVar15 + 0x87) - 1;\n              puVar15[0x30] = *(undefined4 *)(param_1 + 0x234);\n              *(byte *)((int)puVar15 + 0x87) = bVar14;\n              if (bVar14 < 4) {\n                memcpy((void *)((int)puVar15 + 0x4e),&zeroEthAddr,6);\n              }\n            }\n            puVar15 = (undefined4 *)*puVar15;\n          } while (puVar15 != (undefined4 *)0x0);\n        }\n      }\n      else if (((((*(byte *)(puVar5 + 1) & 0x3c) != 0) &&\n                ((puVar5[0xc] == 0 || ((*(byte *)(puVar5[0xc] + 4) & 0x3c) != 0)))) &&\n               ((puVar5[0xd] == 0 || ((*(byte *)(puVar5[0xd] + 4) & 0x3c) != 0)))) &&\n              ((puVar5[0xe] == 0 || ((*(byte *)(puVar5[0xe] + 4) & 0x3c) != 0)))) {\n        if (puVar5[0x18] == 0) {\n          if (iVar21 < (int)puVar5[0x2f]) {\n            iVar21 = puVar5[0x2f];\n          }\n          puVar5[0x24] = 0xffffffff;\n          if (puVar5[0x38] != 0) {\n            puVar5[0x38] = 0;\n          }\n        }\n        else if (((*(short *)((int)puVar5 + 0x4e) != 0) || (*(short *)(puVar5 + 0x14) != 0)) ||\n                (*(short *)((int)puVar5 + 0x52) != 0)) {\n          uVar9 = uVar9 - 1 & 0xff;\n          *(char *)((int)puVar5 + 0x87) = (char)uVar9;\n          puVar5[0x2f] = puVar5[0x2f] << 1;\n          puVar5[0x30] = *(undefined4 *)(param_1 + 0x234);\n          if (puVar5[0x18] == 4) {\n            if (mDNS_LoggingEnabled != 0) {\n              uVar16 = GetRRDisplayString_rdb(puVar5 + 1,puVar5[9] + 4,local_64);\n              LogMsgWithLevel(2,\n                              \"ARP Announcement %2d Capturing traffic for H-MAC %.6a I-MAC %.6a %s\",\n                              uVar9,(int)puVar5 + 0x4e,puVar5 + 0x15,uVar16);\n            }\n            in_stack_fffff850 = (undefined1 *)&onesEthAddr;\n            FUN_004296e0(param_1,1,puVar5,puVar5 + 0x19,&zeroEthAddr,puVar5 + 0x19,&onesEthAddr);\n          }\n          else if (puVar5[0x18] == 6) {\n            if (mDNS_LoggingEnabled != 0) {\n              uVar16 = GetRRDisplayString_rdb(puVar5 + 1,puVar5[9] + 4,local_64);\n              LogMsgWithLevel(2,\n                              \"NDP Announcement %2d Capturing traffic for H-MAC %.6a I-MAC %.6a %s\",\n                              uVar9,(int)puVar5 + 0x4e,puVar5 + 0x15,uVar16);\n            }\n            in_stack_fffff850 = AllHosts_v6;\n            FUN_0042989c(param_1,0x88,0x20,puVar5,puVar5 + 0x19,0,AllHosts_v6,&AllHosts_v6_Eth);\n          }\n        }\n      }\n    }\n  }\n  for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n      puVar5 = (undefined4 *)*puVar5) {\n    if (((puVar5[7] != 0) && (puVar5[0x24] != 0)) ||\n       ((((iVar22 = puVar5[0x2f], iVar22 <= iVar21 &&\n          (((((*(char *)((int)puVar5 + 0x87) != '\\0' &&\n              (-1 < ((iVar22 / 2 - iVar22) + *(int *)(param_1 + 0x234)) - puVar5[0x30])) &&\n             (puVar5[0x18] == 0)) && ((*(byte *)(puVar5 + 1) & 0x3c) != 0)) &&\n           ((puVar5[0xc] == 0 || ((*(byte *)(puVar5[0xc] + 4) & 0x3c) != 0)))))) &&\n         ((puVar5[0xd] == 0 || ((*(byte *)(puVar5[0xd] + 4) & 0x3c) != 0)))) &&\n        ((puVar5[0xe] == 0 || ((*(byte *)(puVar5[0xe] + 4) & 0x3c) != 0)))))) {\n      puVar5[0x24] = 0xffffffff;\n    }\n  }\n  for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n      puVar5 = (undefined4 *)*puVar5) {\n    if (puVar5[0x24] != 0) {\n      if (*(short *)((int)puVar5 + 6) == 0x21) {\n        for (puVar15 = *(undefined4 **)(param_1 + 0x2160); puVar15 != (undefined4 *)0x0;\n            puVar15 = (undefined4 *)*puVar15) {\n          if (((((((*(short *)((int)puVar15 + 6) == 1) || (*(short *)((int)puVar15 + 6) == 0x1c)) &&\n                 ((*(byte *)(puVar15 + 1) & 0x3c) != 0)) &&\n                (((puVar15[0xc] == 0 || ((*(byte *)(puVar15[0xc] + 4) & 0x3c) != 0)) &&\n                 ((puVar15[0xd] == 0 || ((*(byte *)(puVar15[0xd] + 4) & 0x3c) != 0)))))) &&\n               ((puVar15[0xe] == 0 || ((*(byte *)(puVar15[0xe] + 4) & 0x3c) != 0)))) &&\n              (-1 < (int)(puVar5[0x31] - puVar15[0x31]))) &&\n             (((puVar5[6] == puVar15[5] &&\n               (iVar21 = SameDomainName(puVar5[9] + 10,puVar15[8]), iVar21 != 0)) &&\n              ((puVar5[0x24] == -1 || (puVar5[0x24] == puVar15[7])))))) {\n            puVar15[0x25] = puVar15[7];\n          }\n        }\n      }\n      if ((((puVar5[0x24] != 0) && ((puVar5[1] & 0xff00ffff) == 0x800000c)) &&\n          ((*(byte *)(param_1 + 0x1de0) & 0x3c) != 0)) &&\n         (((*(int *)(param_1 + 0x1e0c) == 0 ||\n           ((*(byte *)(*(int *)(param_1 + 0x1e0c) + 4) & 0x3c) != 0)) &&\n          (((*(int *)(param_1 + 0x1e10) == 0 ||\n            ((*(byte *)(*(int *)(param_1 + 0x1e10) + 4) & 0x3c) != 0)) &&\n           (((*(int *)(param_1 + 0x1e14) == 0 ||\n             ((*(byte *)(*(int *)(param_1 + 0x1e14) + 4) & 0x3c) != 0)) &&\n            (iVar21 = SameDomainLabel(puVar5[9] + 4,*(undefined4 *)(param_1 + 0x1dfc)), iVar21 != 0)\n            ))))))) {\n        if (*(int *)(param_1 + 0x1e6c) == 0) {\n          *(undefined4 *)(param_1 + 0x1e6c) = puVar5[0x24];\n        }\n        else {\n          *(undefined4 *)(param_1 + 0x1e6c) = 0xffffffff;\n        }\n      }\n    }\n  }\n  for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n      puVar5 = (undefined4 *)*puVar5) {\n    if ((*(byte *)(puVar5 + 1) & 0x32) != 0) {\n      if (puVar5[0x24] == 0) {\n        if (puVar5[0x25] != 0) {\n          for (puVar15 = *(undefined4 **)(param_1 + 0x2160); puVar15 != (undefined4 *)0x0;\n              puVar15 = (undefined4 *)*puVar15) {\n            if ((((*(byte *)(puVar15 + 1) & 0x3c) != 0) &&\n                ((puVar15[0xc] == 0 || ((*(byte *)(puVar15[0xc] + 4) & 0x3c) != 0)))) &&\n               (((puVar15[0xd] == 0 || ((*(byte *)(puVar15[0xd] + 4) & 0x3c) != 0)) &&\n                ((((puVar15[0xe] == 0 || ((*(byte *)(puVar15[0xe] + 4) & 0x3c) != 0)) &&\n                  (puVar15[0x25] != puVar5[0x25])) &&\n                 ((*(short *)((int)puVar15 + 6) == *(short *)((int)puVar5 + 6) &&\n                  (iVar21 = FUN_00427870(puVar15,puVar5), iVar21 != 0)))))))) {\n              puVar15[0x25] = puVar5[0x25];\n            }\n          }\n        }\n      }\n      else {\n        for (puVar15 = *(undefined4 **)(param_1 + 0x2160); puVar15 != (undefined4 *)0x0;\n            puVar15 = (undefined4 *)*puVar15) {\n          if (((((*(byte *)(puVar15 + 1) & 0x3c) != 0) &&\n               ((puVar15[0xc] == 0 || ((*(byte *)(puVar15[0xc] + 4) & 0x3c) != 0)))) &&\n              ((puVar15[0xd] == 0 || ((*(byte *)(puVar15[0xd] + 4) & 0x3c) != 0)))) &&\n             ((puVar15[0xe] == 0 || ((*(byte *)(puVar15[0xe] + 4) & 0x3c) != 0)))) {\n            uVar16 = 0xffffffff;\n            if ((puVar15[0x24] != -1) &&\n               (((puVar15[0x24] != puVar5[0x24] &&\n                 (*(short *)((int)puVar15 + 6) == *(short *)((int)puVar5 + 6))) &&\n                (iVar21 = FUN_00427870(puVar15,puVar5), iVar21 != 0)))) {\n              if (puVar15[0x24] == 0) {\n                uVar16 = puVar5[0x24];\n              }\n              puVar15[0x24] = uVar16;\n            }\n          }\n        }\n      }\n    }\n  }\n  for (puVar5 = *(undefined4 **)(param_1 + 0x2160); local_48 = (char *)(param_1 + 0x5cbc),\n      puVar5 != (undefined4 *)0x0; puVar5 = (undefined4 *)*puVar5) {\n    iVar21 = puVar5[0x24];\n    if (iVar21 == -1) {\n      iVar21 = 0;\n      if ((puVar4 != (undefined4 *)0x0) && (iVar21 = puVar5[7], iVar21 == 0)) {\n        iVar21 = puVar4[0x548];\n      }\n      puVar5[0x26] = iVar21;\n      puVar5[0x25] = 0;\n      puVar5[0x31] = *(undefined4 *)(param_1 + 0x234);\n      puVar5[0x32] = puVar5[0x24];\n      if (*(char *)((int)puVar5 + 0x87) != '\\0') {\n        iVar21 = puVar5[0x2f];\n        if (-1 < ((iVar21 / 2 - puVar5[0x30]) + *(int *)(param_1 + 0x234)) - iVar21) {\n          *(char *)((int)puVar5 + 0x87) = *(char *)((int)puVar5 + 0x87) + -1;\n          if (*(char *)(puVar5 + 1) != '\\x01') {\n            puVar5[0x2f] = iVar21 << 1;\n          }\n          puVar5[0x30] = *(undefined4 *)(param_1 + 0x234);\n        }\n      }\n    }\n    else if (iVar21 != 0) {\n      puVar5[0x26] = iVar21;\n      puVar5[0x25] = 0;\n      uVar16 = *(undefined4 *)(param_1 + 0x234);\n      puVar5[0x32] = iVar21;\n      puVar5[0x31] = uVar16;\n    }\n    FUN_00426db0(param_1,puVar5);\n  }\n  local_4c = param_1 + 0x5cb6;\n  local_44 = param_1 + 0x5cb8;\n  local_58 = param_1 + 0x5cba;\n  local_50 = auStack_4f4;\n  iVar21 = param_1 + 0x5cb0;\n  iVar22 = 0;\nLAB_00440754:\n  do {\n    pcVar12 = local_48;\n    iVar23 = local_64;\n    if (puVar4 == (undefined4 *)0x0) goto LAB_00440760;\n    iVar23 = 0;\n    if (((*(int *)(param_1 + 0x27c) != 0) && (puVar4[0x553] != 0)) &&\n       ((iVar23 = 0x1d, *(int *)(param_1 + 0x14) == puVar4[0x553] &&\n        (iVar23 = 0x17, *(short *)(param_1 + 0x18) != *(short *)(puVar4 + 0x554))))) {\n      iVar23 = 0x1d;\n    }\n    local_60 = 0;\n    iVar6 = 0x14;\n    if (mDNS_McastTracingEnabled == 0) {\n      iVar6 = 0;\n    }\n    InitializeDNSMessage(iVar21,0,0x84000000);\n    local_68 = iVar21;\n    for (puVar5 = *(undefined4 **)(param_1 + 0x2160); iVar21 = local_68, puVar5 != (undefined4 *)0x0\n        ; puVar5 = (undefined4 *)*puVar5) {\n      if (puVar5[0x26] == puVar4[0x548]) {\n        if ((puVar5[7] == 0) &&\n           (iVar21 = mDNSPlatformValidRecordForInterface(puVar5,puVar4), iVar21 == 0)) {\nLAB_0043fb94:\n          uVar16 = GetNextActiveInterfaceID(puVar4);\n          puVar5[0x26] = uVar16;\n        }\n        else if (puVar5[0x26] == puVar4[0x548]) {\n          local_54 = (undefined *)puVar5[9];\n          bVar14 = *(byte *)(puVar5 + 1);\n          local_5c = (undefined *)(uint)*(ushort *)(puVar5 + 4);\n          if ((bVar14 == 1) ||\n             (((*(byte *)((int)puVar5 + 0x4b) & 1) != 0 && (*(char *)(param_1 + 0x275) != '\\0')))) {\n            bVar3 = false;\n          }\n          else {\n            bVar3 = true;\n            if (*(char *)(param_1 + 0x275) == '\\x02') {\n              bVar3 = *(char *)((int)puVar4 + 0x1597) == '\\0';\n            }\n          }\n          pcVar7 = pcVar12;\n          if ((puVar5[0x33] != 0) && (bVar3)) {\n            if (((((bVar14 & 0x3c) != 0) &&\n                 ((puVar5[0xc] == 0 || ((*(byte *)(puVar5[0xc] + 4) & 0x3c) != 0)))) &&\n                ((puVar5[0xd] == 0 || ((*(byte *)(puVar5[0xd] + 4) & 0x3c) != 0)))) &&\n               ((((puVar5[0xe] == 0 || ((*(byte *)(puVar5[0xe] + 4) & 0x3c) != 0)) && (bVar14 == 8))\n                && (*(char *)(puVar5 + 0x22) != '\\0')))) {\n              iVar21 = 0x5a0;\n              if ((*(short *)(param_1 + 0x5cb6) == 0) &&\n                 (iVar21 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0)) {\n                iVar21 = 0x5a0;\n              }\n              pcVar7 = (char *)PutResourceRecordTTLWithLimit\n                                         (local_68,pcVar12,local_4c,puVar5 + 1,0,\n                                          param_1 + ((iVar21 - iVar23) - iVar6) + 0x5cbc);\n              if (pcVar7 == (char *)0x0) goto LAB_0043fbb0;\n              *(undefined *)(puVar5 + 0x22) = 0;\n            }\n            SetNewRData(puVar5 + 1,puVar5[0x33],*(undefined2 *)(puVar5 + 0x34));\n          }\n          if (puVar5[0xb] != 0) {\n            iVar21 = *(ushort *)(*(int *)(puVar5[0xb] + 0xc) + 0xc) + 0xc;\n            local_60 = local_60 + iVar21;\n            iVar6 = iVar6 + iVar21;\n            iVar23 = iVar23 + iVar21;\n          }\n          local_30 = puVar5 + 1;\n          if ((*(byte *)(puVar5 + 1) & 0x32) != 0) {\n            *(ushort *)(puVar5 + 2) = *(ushort *)(puVar5 + 2) | 0x8000;\n          }\n          uVar16 = 0;\n          if (bVar3) {\n            uVar16 = puVar5[3];\n          }\n          iVar21 = 0x5a0;\n          if ((*(short *)(param_1 + 0x5cb6) == 0) &&\n             (iVar21 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0)) {\n            iVar21 = 0x5a0;\n          }\n          pcVar11 = (char *)PutResourceRecordTTLWithLimit\n                                      (local_68,pcVar7,local_4c,local_30,uVar16,\n                                       param_1 + ((iVar21 - iVar23) - iVar6) + 0x5cbc);\n          *(ushort *)(puVar5 + 2) = *(ushort *)(puVar5 + 2) & 0x7fff;\n          pcVar12 = pcVar7;\n          if (pcVar11 != (char *)0x0) {\n            *(bool *)(puVar5 + 0x22) = bVar3;\n            pcVar12 = pcVar11;\n          }\n          if ((puVar5[0x33] != 0) && (bVar3)) {\n            local_38 = pcVar11;\n            SetNewRData(local_30,local_54,local_5c);\n            pcVar11 = local_38;\n          }\n          if ((((iVar22 == 0) && (bVar3)) && ((*(byte *)(puVar5 + 1) & 0x30) != 0)) &&\n             (puVar5[0x23] == 0)) {\n            puVar5[0x23] = 0xffffffff;\n          }\n          if (pcVar11 != (char *)0x0) {\n            if (puVar5[0xb] != 0) {\n              *(undefined4 *)(puVar5[0xb] + 0x10) = puVar4[0x548];\n            }\n            if ((puVar5[0x24] == -1) && (puVar5[7] == 0)) goto LAB_0043fb94;\n            puVar5[0x26] = 0;\n          }\n        }\n      }\nLAB_0043fbb0:\n    }\n    local_68 = iVar6 - local_60;\n    iVar23 = iVar23 - local_60;\n    pcVar7 = pcVar12;\n    for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n        puVar5 = (undefined4 *)*puVar5) {\n      iVar6 = puVar5[0xb];\n      pcVar11 = pcVar7;\n      if ((iVar6 != 0) && (*(int *)(iVar6 + 0x10) == puVar4[0x548])) {\n        iVar8 = 0x5a0;\n        if ((*(short *)(param_1 + 0x5cb6) == 0) && (iVar8 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0)\n           ) {\n          iVar8 = 0x5a0;\n        }\n        pcVar12 = (char *)PutResourceRecordTTLWithLimit\n                                    (iVar21,pcVar12,local_44,*(int *)(iVar6 + 0xc),\n                                     *(undefined4 *)(*(int *)(iVar6 + 0xc) + 8),\n                                     param_1 + ((iVar8 - iVar23) - local_68) + 0x5cbc);\n        pcVar11 = pcVar12;\n        if (pcVar12 == (char *)0x0) {\n          uVar16 = GetRRDisplayString_rdb(puVar5 + 1,puVar5[9] + 4,local_64);\n          iVar6 = 0x5a0;\n          if ((*(short *)(param_1 + 0x5cb6) == 0) &&\n             (iVar6 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0)) {\n            iVar6 = 0x5a0;\n          }\n          LogMsgWithLevel(0,\n                          \"SendResponses: Cannot add NSEC3 %s, OwnerRecordSpace %d, TraceRecordSpace %d, limit %p\"\n                          ,uVar16,iVar23,local_68,param_1 + ((iVar6 - iVar23) - local_68) + 0x5cbc);\n          pcVar11 = pcVar7;\n        }\n        *(undefined4 *)(puVar5[0xb] + 0x10) = 0;\n      }\n      pcVar7 = pcVar11;\n    }\n    pcVar12 = pcVar7;\n    for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n        puVar5 = (undefined4 *)*puVar5) {\n      if (((((puVar5[0x25] == puVar4[0x548]) && ((*(byte *)(puVar5 + 1) & 0x3c) != 0)) &&\n           ((puVar5[0xc] == 0 || ((*(byte *)(puVar5[0xc] + 4) & 0x3c) != 0)))) &&\n          ((puVar5[0xd] == 0 || ((*(byte *)(puVar5[0xd] + 4) & 0x3c) != 0)))) &&\n         ((puVar5[0xe] == 0 || ((*(byte *)(puVar5[0xe] + 4) & 0x3c) != 0)))) {\n        if (*(short *)(param_1 + 0x5cb6) == 0) {\n          if ((*(byte *)(puVar5 + 1) & 0x32) == 0) {\n            puVar5[0x25] = 0;\n          }\n          else {\n            for (puVar15 = *(undefined4 **)(param_1 + 0x2160); puVar15 != (undefined4 *)0x0;\n                puVar15 = (undefined4 *)*puVar15) {\n              if ((((puVar15[0x31] == *(int *)(param_1 + 0x234)) && (puVar15[0x32] == puVar4[0x548])\n                   ) && (*(short *)((int)puVar15 + 6) == *(short *)((int)puVar5 + 6))) &&\n                 (local_30 = puVar15, iVar6 = FUN_00427870(puVar15,puVar5), puVar15 = local_30,\n                 iVar6 != 0)) goto LAB_0043fdec;\n            }\n            puVar5[0x25] = 0;\n          }\n        }\n        else {\nLAB_0043fdec:\n          if (pcVar12 != (char *)0x0) {\n            if (((iVar22 == 0) && ((*(byte *)(puVar5 + 1) & 0x30) != 0)) && (puVar5[0x23] == 0)) {\n              puVar5[0x23] = 0xffffffff;\n            }\n            if ((*(byte *)(puVar5 + 1) & 0x32) != 0) {\n              *(ushort *)(puVar5 + 2) = *(ushort *)(puVar5 + 2) | 0x8000;\n            }\n            iVar6 = 0x5a0;\n            if ((*(short *)(param_1 + 0x5cb6) == 0) &&\n               (iVar6 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0)) {\n              iVar6 = 0x5a0;\n            }\n            pcVar12 = (char *)PutResourceRecordTTLWithLimit\n                                        (iVar21,pcVar12,local_58,puVar5 + 1,puVar5[3],\n                                         param_1 + ((iVar6 - iVar23) - local_68) + 0x5cbc);\n            *(ushort *)(puVar5 + 2) = *(ushort *)(puVar5 + 2) & 0x7fff;\n            if (pcVar12 != (char *)0x0) {\n              puVar5[0x25] = 0;\n              *(undefined *)(puVar5 + 0x22) = 1;\n              puVar5[0x31] = *(undefined4 *)(param_1 + 0x234);\n              puVar5[0x32] = puVar4[0x548];\n              pcVar7 = pcVar12;\n            }\n          }\n        }\n      }\n    }\n    local_5c = auStack_4f4;\n    local_40 = auStack_76c;\n    local_3c = local_5f8;\n    local_54 = auStack_770;\n    for (puVar5 = *(undefined4 **)(param_1 + 0x2160); puVar5 != (undefined4 *)0x0;\n        puVar5 = (undefined4 *)*puVar5) {\n      if ((puVar5[0x23] == -1) || (puVar5[0x23] == puVar4[0x548])) {\n        in_stack_fffff850 = (undefined1 *)0x0;\n        mDNS_SetupResourceRecord(local_54,0,0,0x2f,puVar5[3],2,0,0,0);\n        local_768 = local_768 | 0x8000;\n        uVar9 = DomainNameLengthLimit(puVar5[8],puVar5[8] + 0x100);\n        if (uVar9 < 0x101) {\n          mDNSPlatformMemCopy(local_3c,(void *)puVar5[8],uVar9);\n        }\n        else {\n          local_5f8[0] = 0;\n        }\n        local_60 = DomainNameLengthLimit(puVar5[8],puVar5[8] + 0x100);\n        uVar9 = local_60 + 0x22U & 0xffff;\n        local_760 = (undefined2)uVar9;\n        if (uVar9 < 0x109) {\n          mDNSPlatformMemZero(local_5c);\n          uVar9 = DomainNameLengthLimit(puVar5[8],puVar5[8] + 0x100);\n          if (uVar9 < 0x101) {\n            mDNSPlatformMemCopy(local_50,(void *)puVar5[8],uVar9);\n          }\n          else {\n            *local_50 = 0;\n          }\n          puVar10 = local_5c + local_60;\n          *puVar10 = 0;\n          puVar10[1] = 0x20;\n          puVar15 = (undefined4 *)(puVar10 + 2);\n          for (puVar19 = *(undefined4 **)(param_1 + 0x2160); puVar19 != (undefined4 *)0x0;\n              puVar19 = (undefined4 *)*puVar19) {\n            if (((((*(byte *)(puVar19 + 1) & 0x3c) != 0) &&\n                 ((puVar19[0xc] == 0 || ((*(byte *)(puVar19[0xc] + 4) & 0x3c) != 0)))) &&\n                ((puVar19[0xd] == 0 || ((*(byte *)(puVar19[0xd] + 4) & 0x3c) != 0)))) &&\n               (((puVar19[0xe] == 0 || ((*(byte *)(puVar19[0xe] + 4) & 0x3c) != 0)) &&\n                (local_30 = puVar15, iVar6 = FUN_00427870(puVar19,puVar5), puVar15 = local_30,\n                iVar6 != 0)))) {\n              uVar2 = *(ushort *)((int)puVar19 + 6);\n              if (0xfe < uVar2) {\n                uVar9 = GetRRDisplayString_rdb(puVar19 + 1,puVar19[9] + 4,local_64);\n                pcVar11 = \"SendResponses: Can\\'t create NSEC for record %s\";\n                pcVar12 = pcVar7;\n                goto LAB_004401b4;\n              }\n              pbVar17 = (byte *)((int)local_30 + (uint)(uVar2 >> 3));\n              *pbVar17 = *pbVar17 | (byte)(0x80 >> (uVar2 & 7));\n            }\n          }\n          iVar6 = 0x5a0;\n          if ((*(short *)(param_1 + 0x5cb6) == 0) &&\n             (iVar6 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0)) {\n            iVar6 = 0x5a0;\n          }\n          pcVar11 = (char *)PutResourceRecordTTLWithLimit\n                                      (iVar21,pcVar7,local_58,local_40,local_764,\n                                       param_1 + ((iVar6 - iVar23) - local_68) + 0x5cbc);\n          pcVar12 = pcVar11;\n        }\n        else {\n          pcVar11 = \"SendResponses: not enough space (%d)  in authrecord for nsec\";\nLAB_004401b4:\n          LogMsgWithLevel(0,pcVar11,uVar9);\n          pcVar11 = pcVar7;\n        }\n        if ((pcVar12 != (char *)0x0) ||\n           (pcVar12 = (char *)0x0, pcVar11 = pcVar7, puVar5[0x23] == -1)) {\n          puVar5[0x23] = 0;\n          puVar15 = (undefined4 *)*puVar5;\n          while (pcVar7 = pcVar11, puVar15 != (undefined4 *)0x0) {\n            local_30 = puVar15;\n            iVar6 = FUN_00427870(puVar15,puVar5);\n            if ((iVar6 != 0) && ((local_30[0x23] == -1 || (local_30[0x23] == puVar4[0x548])))) {\n              local_30[0x23] = 0;\n            }\n            puVar15 = (undefined4 *)*local_30;\n          }\n        }\n      }\n    }\n    if ((*(short *)(param_1 + 0x5cb6) == 0) && (*(short *)(param_1 + 0x5cba) == 0)) {\n      iVar22 = 0;\n      puVar4 = (undefined4 *)GetFirstActiveInterface(*puVar4);\n      goto LAB_00440754;\n    }\n    if ((local_68 != 0) || (iVar23 != 0)) {\n      in_stack_fffff850 = (undefined1 *)0x0;\n      mDNS_SetupResourceRecord(auStack_3ec,0,0,0x29,0x1194,0x20,0,0,0);\n      iVar6 = local_3c8;\n      local_3e4 = 0x5a0;\n      local_3da = 0x18;\n      local_3dc = 0x18;\n      if (iVar23 == 0) {\n        if (local_68 != 0) {\n          *(char *)(local_3c8 + 8) = (char)*(undefined4 *)(param_1 + 0x2184);\n          *(undefined2 *)(local_3c8 + 6) = 5;\n          *(undefined4 *)(local_3c8 + 0xc) = 0x5f6e16;\n          *(undefined2 *)(local_3c8 + 4) = 0xfde9;\n        }\n      }\n      else if (local_68 == 0) {\n        *(undefined *)(local_3c8 + 8) = 0;\n        *(undefined *)(local_3c8 + 9) = *(undefined *)(param_1 + 0x276);\n        *(undefined2 *)(local_3c8 + 10) = *(undefined2 *)(param_1 + 0x14);\n        *(undefined2 *)(local_3c8 + 0xc) = *(undefined2 *)(param_1 + 0x16);\n        *(undefined2 *)(local_3c8 + 0xe) = *(undefined2 *)(param_1 + 0x18);\n        *(undefined4 *)(local_3c8 + 0x10) = puVar4[0x553];\n        *(undefined2 *)(local_3c8 + 0x14) = *(undefined2 *)(puVar4 + 0x554);\n        memcpy((void *)(local_3c8 + 0x16),&zeroEthAddr,6);\n        *(undefined2 *)(iVar6 + 4) = 4;\n        uVar13 = 0xe;\n        if ((*(int *)(param_1 + 0x14) == puVar4[0x553]) &&\n           (uVar13 = 8, *(short *)(param_1 + 0x18) != *(short *)(puVar4 + 0x554))) {\n          uVar13 = 0xe;\n        }\n        *(undefined2 *)(iVar6 + 6) = uVar13;\n      }\n      else {\n        local_3da = 0x30;\n        local_3dc = 0x30;\n        *(undefined *)(local_3c8 + 8) = 0;\n        *(undefined *)(local_3c8 + 9) = *(undefined *)(param_1 + 0x276);\n        *(undefined2 *)(local_3c8 + 10) = *(undefined2 *)(param_1 + 0x14);\n        *(undefined2 *)(local_3c8 + 0xc) = *(undefined2 *)(param_1 + 0x16);\n        *(undefined2 *)(local_3c8 + 0xe) = *(undefined2 *)(param_1 + 0x18);\n        *(undefined4 *)(local_3c8 + 0x10) = puVar4[0x553];\n        *(undefined2 *)(local_3c8 + 0x14) = *(undefined2 *)(puVar4 + 0x554);\n        memcpy((void *)(local_3c8 + 0x16),&zeroEthAddr,6);\n        *(undefined2 *)(iVar6 + 4) = 4;\n        uVar13 = 0xe;\n        if ((*(int *)(param_1 + 0x14) == puVar4[0x553]) &&\n           (uVar13 = 8, *(short *)(param_1 + 0x18) != *(short *)(puVar4 + 0x554))) {\n          uVar13 = 0xe;\n        }\n        *(undefined2 *)(iVar6 + 6) = uVar13;\n        *(char *)(local_3c8 + 0x20) = (char)*(undefined4 *)(param_1 + 0x2184);\n        *(undefined2 *)(local_3c8 + 0x1e) = 5;\n        *(undefined4 *)(local_3c8 + 0x24) = 0x5f6e16;\n        *(undefined2 *)(local_3c8 + 0x1c) = 0xfde9;\n      }\n      iVar6 = 0x5a0;\n      if ((*(short *)(param_1 + 0x5cb6) == 0) && (iVar6 = 0x22ec, *(int *)(param_1 + 0x5cb8) != 0))\n      {\n        iVar6 = 0x5a0;\n      }\n      pcVar12 = (char *)PutResourceRecordTTLWithLimit\n                                  (iVar21,pcVar7,local_58,auStack_3e8,local_3e0,\n                                   param_1 + iVar6 + 0x5cbc);\n      if (pcVar12 == (char *)0x0) {\n        puVar5 = (undefined4 *)(uint)*(ushort *)(param_1 + 0x5cb6);\n        puVar20 = (undefined6 *)(uint)*(ushort *)(param_1 + 0x5cb8);\n        uVar2 = *(ushort *)(param_1 + 0x5cba);\n        if ((undefined *)((int)puVar20 + (int)puVar5) + uVar2 == (undefined *)0x1) {\n          if (mDNS_LoggingEnabled == 0) goto LAB_00440638;\n          local_38 = \"\";\n          if (iVar23 != 0) {\n            local_38 = \"OWNER\";\n          }\n          local_34 = \"\";\n          if (local_68 != 0) {\n            local_34 = \"TRACER\";\n          }\n          uVar13 = *(undefined2 *)(param_1 + 0x5cb4);\n          local_30 = puVar5;\n          uVar16 = GetRRDisplayString_rdb(auStack_3e8,local_3c8 + 4,local_64);\n          uVar18 = 3;\n          pcVar12 = \"SendResponses: No space in packet for %s %s OPT record (%d/%d/%d/%d) %s\";\n        }\n        else {\n          local_38 = \"\";\n          if (iVar23 != 0) {\n            local_38 = \"OWNER\";\n          }\n          local_34 = \"\";\n          if (local_68 != 0) {\n            local_34 = \"TRACER\";\n          }\n          uVar13 = *(undefined2 *)(param_1 + 0x5cb4);\n          local_30 = puVar5;\n          uVar16 = GetRRDisplayString_rdb(auStack_3e8,local_3c8 + 4,local_64);\n          uVar18 = 0;\n          pcVar12 = \n          \"SendResponses: How did we fail to have space for %s %s OPT record (%d/%d/%d/%d) %s\";\n        }\n        LogMsgWithLevel(uVar18,pcVar12,local_38,local_34,uVar13,local_30,puVar20,(uint)uVar2,uVar16)\n        ;\n        in_stack_fffff850 = (undefined1 *)puVar20;\n      }\n      else {\n        pcVar7 = pcVar12;\n        if (mDNS_LoggingEnabled != 0) {\n          pcVar12 = \"\";\n          if (iVar23 != 0) {\n            pcVar12 = \"OWNER\";\n          }\n          local_34 = \"\";\n          if (local_68 != 0) {\n            local_34 = \"TRACER\";\n          }\n          uVar16 = GetRRDisplayString_rdb(auStack_3e8,local_3c8 + 4,local_64);\n          LogMsgWithLevel(3,\"SendResponses put %s %s: %s %s\",pcVar12,local_34,(int)puVar4 + 0x1552,\n                          uVar16);\n        }\n      }\n    }\nLAB_00440638:\n    if (*(char *)((int)puVar4 + 5) != '\\0') {\n      in_stack_fffff850 = (undefined1 *)((uint)in_stack_fffff850 & 0xffff | 0x14e90000);\n      mDNSSendDNSMessage(param_1,iVar21,pcVar7,puVar4[0x548],0,AllDNSLinkGroup_v4,in_stack_fffff850,\n                         0,0,0);\n    }\n    if (*(char *)((int)puVar4 + 6) != '\\0') {\n      in_stack_fffff850 = (undefined1 *)((uint)in_stack_fffff850 & 0xffff | 0x14e90000);\n      mDNSSendDNSMessage(param_1,iVar21,pcVar7,puVar4[0x548],0,AllDNSLinkGroup_v6,in_stack_fffff850,\n                         0,0,0);\n    }\n    iVar23 = local_64;\n    if (*(int *)(param_1 + 0x244) == 0) {\n      iVar6 = (mDNSPlatformOneSecond + 9) / 10 + *(int *)(param_1 + 0x234);\n      if (iVar6 == 0) {\n        iVar6 = 1;\n      }\n      *(int *)(param_1 + 0x244) = iVar6;\n    }\n    iVar22 = iVar22 + 1;\n    if (999 < iVar22) {\n      LogMsgWithLevel(0,\"SendResponses exceeded loop limit %d: giving up\",iVar22);\nLAB_00440760:\n      iVar21 = *(int *)(param_1 + 0x216c);\n      if (iVar21 != 0) {\n        uVar16 = GetRRDisplayString_rdb(iVar21 + 4,*(int *)(iVar21 + 0x24) + 4,iVar23);\n        LogMsgWithLevel(0,\"SendResponses ERROR m->CurrentRecord already set %s\",uVar16);\n      }\n      *(undefined4 *)(param_1 + 0x216c) = *(undefined4 *)(param_1 + 0x2160);\n      while (puVar4 = *(undefined4 **)(param_1 + 0x216c), puVar4 != (undefined4 *)0x0) {\n        *(undefined4 *)(param_1 + 0x216c) = *puVar4;\n        if ((undefined4 *)puVar4[0x26] != (undefined4 *)0x0) {\n          if ((1 < puVar4[0x1f] - 4) && (mDNS_LoggingEnabled != 0)) {\n            local_34 = (char *)puVar4[7];\n            uVar1 = *(undefined *)(puVar4 + 1);\n            local_30 = (undefined4 *)puVar4[0x26];\n            uVar16 = GetRRDisplayString_rdb(puVar4 + 1,puVar4[9] + 4,iVar23);\n            LogMsgWithLevel(3,\"SendResponses: No active interface %d to send: %d %02X %s\",local_30,\n                            local_34,uVar1,uVar16);\n          }\n          puVar4[0x26] = 0;\n        }\n        if ((puVar4[0x24] != 0) || (*(char *)(puVar4 + 1) == '\\x01')) {\n          if (puVar4[0x33] != 0) {\n            FUN_0042cb70(param_1,puVar4);\n          }\n          if ((*(char *)(puVar4 + 1) == '\\x01') && (*(char *)((int)puVar4 + 0x87) == '\\0')) {\n            if (((puVar4[7] != 0) || (*(char *)((int)puVar4 + 0x4a) != '\\0')) ||\n               (iVar21 = IsLocalDomain(puVar4[8],puVar4), iVar21 != 0)) {\n              CompleteDeregistration(param_1,puVar4);\n            }\n          }\n          else {\n            puVar4[0x27] = 0;\n            puVar4[0x24] = 0;\n            *(undefined *)((int)puVar4 + 0x8b) = 0;\n            memcpy(puVar4 + 0x28,zerov6Addr,0x10);\n          }\n        }\n      }\n      return;\n    }\n  } while( true );\n}` was unexpected", "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e94c_0043e94c.c", "spans": [{"end": {"col": 2, "line": 846, "offset": 35314}, "file": "/tmp/haruspex_mDNSClientPosix/FUN_0043e94c_0043e94c.c", "start": {"col": 1, "line": 4, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 2, "line": 846, "offset": 35314}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e94c_0043e94c.c", "start": {"col": 1, "line": 4, "offset": 0}}]]}], "interfile_languages_used": [], "paths": {"scanned": ["/tmp/haruspex_mDNSClientPosix/ActivateUnicastRegistration_0042c818.c", "/tmp/haruspex_mDNSClientPosix/AddNSECSForCacheRecord_0040406c.c", "/tmp/haruspex_mDNSClientPosix/AddToTail_00407d20.c", "/tmp/haruspex_mDNSClientPosix/AlgAdd_00425024.c", "/tmp/haruspex_mDNSClientPosix/AlgCreate_0042542c.c", "/tmp/haruspex_mDNSClientPosix/AlgDestroy_0042534c.c", "/tmp/haruspex_mDNSClientPosix/AlgEncode_00424eac.c", "/tmp/haruspex_mDNSClientPosix/AlgFinal_00424df0.c", "/tmp/haruspex_mDNSClientPosix/AlgLength_004250dc.c", "/tmp/haruspex_mDNSClientPosix/AllocateAnonInfo_00425aa4.c", "/tmp/haruspex_mDNSClientPosix/AnonInfoAnswersQuestion_00425620.c", "/tmp/haruspex_mDNSClientPosix/AnyTypeRecordAnswersQuestion_0042173c.c", "/tmp/haruspex_mDNSClientPosix/AppendDNSNameString_0041de94.c", "/tmp/haruspex_mDNSClientPosix/AppendDomainLabel_0041a730.c", "/tmp/haruspex_mDNSClientPosix/AppendDomainName_0041a7e0.c", "/tmp/haruspex_mDNSClientPosix/AppendLiteralLabelString_0041a680.c", "/tmp/haruspex_mDNSClientPosix/BumpDNSSECStats_00404074.c", "/tmp/haruspex_mDNSClientPosix/CacheGroupForName_00427934.c", "/tmp/haruspex_mDNSClientPosix/CancelGetZoneData_0042c310.c", "/tmp/haruspex_mDNSClientPosix/CheckNATMappings_0040f218.c", "/tmp/haruspex_mDNSClientPosix/CompleteDeregistration_0043e784.c", "/tmp/haruspex_mDNSClientPosix/ConstructServiceName_0041da98.c", "/tmp/haruspex_mDNSClientPosix/ConvertDomainLabelToCString_withescape_0041a8d4.c", "/tmp/haruspex_mDNSClientPosix/ConvertDomainNameToCString_withescape_0041a9a4.c", "/tmp/haruspex_mDNSClientPosix/CopyAnonInfoForCR_00425a58.c", "/tmp/haruspex_mDNSClientPosix/CountLabels_0041a630.c", "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "/tmp/haruspex_mDNSClientPosix/DNSDigest_ConstructHMACKeyfromBase64_0040af78.c", "/tmp/haruspex_mDNSClientPosix/DNSDigest_SignMessage_0040aaec.c", "/tmp/haruspex_mDNSClientPosix/DNSProxySetAttributes_0040407c.c", "/tmp/haruspex_mDNSClientPosix/DNSServerChangeForQuestion_00426924.c", "/tmp/haruspex_mDNSClientPosix/DNSTypeName_0041caa8.c", "/tmp/haruspex_mDNSClientPosix/DeconstructServiceName_0041ab84.c", "/tmp/haruspex_mDNSClientPosix/DisposeTCPConn_00413a88.c", "/tmp/haruspex_mDNSClientPosix/DomainEnumQuery_00429e8c.c", "/tmp/haruspex_mDNSClientPosix/DomainNameHashValue_0041b474.c", "/tmp/haruspex_mDNSClientPosix/DomainNameLengthLimit_0041a530.c", "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "/tmp/haruspex_mDNSClientPosix/ExampleClientEventLoop_0044b604.c", "/tmp/haruspex_mDNSClientPosix/FUN_00403e94_00403e94.c", "/tmp/haruspex_mDNSClientPosix/FUN_00403f00_00403f00.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040423c_0040423c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040451c_0040451c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00404b54_00404b54.c", "/tmp/haruspex_mDNSClientPosix/FUN_00404e6c_00404e6c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00404f88_00404f88.c", "/tmp/haruspex_mDNSClientPosix/FUN_004050ac_004050ac.c", "/tmp/haruspex_mDNSClientPosix/FUN_004052b4_004052b4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00405bfc_00405bfc.c", "/tmp/haruspex_mDNSClientPosix/FUN_00405fc4_00405fc4.c", "/tmp/haruspex_mDNSClientPosix/FUN_004061d0_004061d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00406210_00406210.c", "/tmp/haruspex_mDNSClientPosix/FUN_00406380_00406380.c", "/tmp/haruspex_mDNSClientPosix/FUN_00406464_00406464.c", "/tmp/haruspex_mDNSClientPosix/FUN_00407108_00407108.c", "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00407c70_00407c70.c", "/tmp/haruspex_mDNSClientPosix/FUN_004081e4_004081e4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00409040_00409040.c", "/tmp/haruspex_mDNSClientPosix/FUN_00409210_00409210.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040a2d0_0040a2d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040a6f8_0040a6f8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040b388_0040b388.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040b678_0040b678.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040b8e8_0040b8e8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040b9e8_0040b9e8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040bb70_0040bb70.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040bdc0_0040bdc0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040be38_0040be38.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040bf3c_0040bf3c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040cbc8_0040cbc8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040ccb8_0040ccb8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040cda8_0040cda8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040d0ec_0040d0ec.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040d540_0040d540.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040d9ac_0040d9ac.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040da24_0040da24.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040db4c_0040db4c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040ddc4_0040ddc4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e004_0040e004.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e070_0040e070.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e3f4_0040e3f4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e534_0040e534.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e578_0040e578.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e7b0_0040e7b0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e818_0040e818.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040e998_0040e998.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040eb84_0040eb84.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040ee4c_0040ee4c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040efd0_0040efd0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040fb40_0040fb40.c", "/tmp/haruspex_mDNSClientPosix/FUN_0040ff8c_0040ff8c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00410730_00410730.c", "/tmp/haruspex_mDNSClientPosix/FUN_00410980_00410980.c", "/tmp/haruspex_mDNSClientPosix/FUN_00410c7c_00410c7c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041213c_0041213c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004123b4_004123b4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00412fa0_00412fa0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041347c_0041347c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00413aec_00413aec.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041447c_0041447c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00414710_00414710.c", "/tmp/haruspex_mDNSClientPosix/FUN_004149bc_004149bc.c", "/tmp/haruspex_mDNSClientPosix/FUN_00414df8_00414df8.c", "/tmp/haruspex_mDNSClientPosix/FUN_004176b0_004176b0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041a18c_0041a18c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041a57c_0041a57c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041ad10_0041ad10.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041adbc_0041adbc.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041aee4_0041aee4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041afb4_0041afb4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041b364_0041b364.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041b6d0_0041b6d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041b774_0041b774.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041b884_0041b884.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041b8e0_0041b8e0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041ca04_0041ca04.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041ccd4_0041ccd4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041cd94_0041cd94.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041cf50_0041cf50.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041d1e8_0041d1e8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041d9e0_0041d9e0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041e054_0041e054.c", "/tmp/haruspex_mDNSClientPosix/FUN_0041e5b0_0041e5b0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00420e4c_00420e4c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004214bc_004214bc.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042159c_0042159c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00422460_00422460.c", "/tmp/haruspex_mDNSClientPosix/FUN_004230d8_004230d8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00423a3c_00423a3c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004247f0_004247f0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042494c_0042494c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00424f64_00424f64.c", "/tmp/haruspex_mDNSClientPosix/FUN_00425194_00425194.c", "/tmp/haruspex_mDNSClientPosix/FUN_00425220_00425220.c", "/tmp/haruspex_mDNSClientPosix/FUN_004252c0_004252c0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00426100_00426100.c", "/tmp/haruspex_mDNSClientPosix/FUN_004262ac_004262ac.c", "/tmp/haruspex_mDNSClientPosix/FUN_00426418_00426418.c", "/tmp/haruspex_mDNSClientPosix/FUN_004266e8_004266e8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042678c_0042678c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00426808_00426808.c", "/tmp/haruspex_mDNSClientPosix/FUN_004269b8_004269b8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00426b00_00426b00.c", "/tmp/haruspex_mDNSClientPosix/FUN_00426c2c_00426c2c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00426db0_00426db0.c", "/tmp/haruspex_mDNSClientPosix/FUN_004270a8_004270a8.c", "/tmp/haruspex_mDNSClientPosix/FUN_004273d0_004273d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042757c_0042757c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427638_00427638.c", "/tmp/haruspex_mDNSClientPosix/FUN_004276dc_004276dc.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427778_00427778.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427870_00427870.c", "/tmp/haruspex_mDNSClientPosix/FUN_004279b4_004279b4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427bd8_00427bd8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427c58_00427c58.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427d38_00427d38.c", "/tmp/haruspex_mDNSClientPosix/FUN_00427d54_00427d54.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042801c_0042801c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00428184_00428184.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042820c_0042820c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004286b4_004286b4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00428828_00428828.c", "/tmp/haruspex_mDNSClientPosix/FUN_00428af8_00428af8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00428c90_00428c90.c", "/tmp/haruspex_mDNSClientPosix/FUN_00428fe8_00428fe8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00429190_00429190.c", "/tmp/haruspex_mDNSClientPosix/FUN_004292f4_004292f4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00429428_00429428.c", "/tmp/haruspex_mDNSClientPosix/FUN_00429630_00429630.c", "/tmp/haruspex_mDNSClientPosix/FUN_004296e0_004296e0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00429ce4_00429ce4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042a238_0042a238.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042a73c_0042a73c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042a844_0042a844.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042a978_0042a978.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042ac48_0042ac48.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042b05c_0042b05c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042b250_0042b250.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042b424_0042b424.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042be2c_0042be2c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042c0f0_0042c0f0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042c3ac_0042c3ac.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042c628_0042c628.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042c704_0042c704.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042cb28_0042cb28.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042cb70_0042cb70.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042cc08_0042cc08.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042cf4c_0042cf4c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042d2bc_0042d2bc.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042d400_0042d400.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042d4d0_0042d4d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042d7b4_0042d7b4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042d894_0042d894.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042db60_0042db60.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042dc1c_0042dc1c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042dd04_0042dd04.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042df20_0042df20.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042e080_0042e080.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042e568_0042e568.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042e884_0042e884.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042ee98_0042ee98.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042f3ac_0042f3ac.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0042f8fc_0042f8fc.c", "/tmp/haruspex_mDNSClientPosix/FUN_00431a38_00431a38.c", "/tmp/haruspex_mDNSClientPosix/FUN_00431d88_00431d88.c", "/tmp/haruspex_mDNSClientPosix/FUN_004320a0_004320a0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00432360_00432360.c", "/tmp/haruspex_mDNSClientPosix/FUN_004326d4_004326d4.c", "/tmp/haruspex_mDNSClientPosix/FUN_004337ec_004337ec.c", "/tmp/haruspex_mDNSClientPosix/FUN_004339a4_004339a4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00434158_00434158.c", "/tmp/haruspex_mDNSClientPosix/FUN_004344b8_004344b8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00434f7c_00434f7c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004350d4_004350d4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043541c_0043541c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004355d0_004355d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00435b04_00435b04.c", "/tmp/haruspex_mDNSClientPosix/FUN_00435ef0_00435ef0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "/tmp/haruspex_mDNSClientPosix/FUN_00437240_00437240.c", "/tmp/haruspex_mDNSClientPosix/FUN_00437804_00437804.c", "/tmp/haruspex_mDNSClientPosix/FUN_004378f4_004378f4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00437a18_00437a18.c", "/tmp/haruspex_mDNSClientPosix/FUN_004382b0_004382b0.c", "/tmp/haruspex_mDNSClientPosix/FUN_004384b0_004384b0.c", "/tmp/haruspex_mDNSClientPosix/FUN_004389bc_004389bc.c", "/tmp/haruspex_mDNSClientPosix/FUN_00439904_00439904.c", "/tmp/haruspex_mDNSClientPosix/FUN_004399d4_004399d4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00439fcc_00439fcc.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043a12c_0043a12c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043a2d8_0043a2d8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043c28c_0043c28c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043c45c_0043c45c.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043c5a8_0043c5a8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043c740_0043c740.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043c870_0043c870.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043cad4_0043cad4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043e0f8_0043e0f8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043e188_0043e188.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043e3a4_0043e3a4.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043e5f8_0043e5f8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043e850_0043e850.c", "/tmp/haruspex_mDNSClientPosix/FUN_0043e94c_0043e94c.c", "/tmp/haruspex_mDNSClientPosix/FUN_00440968_00440968.c", "/tmp/haruspex_mDNSClientPosix/FUN_00440a40_00440a40.c", "/tmp/haruspex_mDNSClientPosix/FUN_004410b8_004410b8.c", "/tmp/haruspex_mDNSClientPosix/FUN_00441c60_00441c60.c", "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "/tmp/haruspex_mDNSClientPosix/FUN_00447324_00447324.c", "/tmp/haruspex_mDNSClientPosix/FUN_004474d0_004474d0.c", "/tmp/haruspex_mDNSClientPosix/FUN_004477f0_004477f0.c", "/tmp/haruspex_mDNSClientPosix/FUN_00447a20_00447a20.c", "/tmp/haruspex_mDNSClientPosix/FUN_00448200_00448200.c", "/tmp/haruspex_mDNSClientPosix/FUN_00448324_00448324.c", "/tmp/haruspex_mDNSClientPosix/FUN_00448500_00448500.c", "/tmp/haruspex_mDNSClientPosix/FUN_00448dac_00448dac.c", "/tmp/haruspex_mDNSClientPosix/FUN_00448f3c_00448f3c.c", "/tmp/haruspex_mDNSClientPosix/FUN_004490c4_004490c4.c", "/tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c", "/tmp/haruspex_mDNSClientPosix/FUN_0044be14_0044be14.c", "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "/tmp/haruspex_mDNSClientPosix/FUN_0044c2a0_0044c2a0.c", "/tmp/haruspex_mDNSClientPosix/FreeAnonInfo_004259ec.c", "/tmp/haruspex_mDNSClientPosix/GetAuthInfoForName_internal_0040d724.c", "/tmp/haruspex_mDNSClientPosix/GetAuthInfoForQuestion_0040d974.c", "/tmp/haruspex_mDNSClientPosix/GetFirstActiveInterface_0041a010.c", "/tmp/haruspex_mDNSClientPosix/GetLLQOptData_004239a4.c", "/tmp/haruspex_mDNSClientPosix/GetLargeResourceRecord_004235e0.c", "/tmp/haruspex_mDNSClientPosix/GetNextActiveInterfaceID_0041a038.c", "/tmp/haruspex_mDNSClientPosix/GetPktLease_004238f8.c", "/tmp/haruspex_mDNSClientPosix/GetRDLength_0041d4a0.c", "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "/tmp/haruspex_mDNSClientPosix/GetServerForQuestion_00428450.c", "/tmp/haruspex_mDNSClientPosix/GetServiceTarget_00412c0c.c", "/tmp/haruspex_mDNSClientPosix/GrantCacheExtensions_00428e78.c", "/tmp/haruspex_mDNSClientPosix/IdenticalAnonInfo_00425570.c", "/tmp/haruspex_mDNSClientPosix/IncrementLabelSuffix_004223e0.c", "/tmp/haruspex_mDNSClientPosix/InitLinkedList_00407d10.c", "/tmp/haruspex_mDNSClientPosix/InitializeAnonInfoForCR_00425eb8.c", "/tmp/haruspex_mDNSClientPosix/InitializeAnonInfoForQuestion_00425fac.c", "/tmp/haruspex_mDNSClientPosix/InitializeDNSMessage_0041b310.c", "/tmp/haruspex_mDNSClientPosix/IsGetZoneDataQuestion_0040b370.c", "/tmp/haruspex_mDNSClientPosix/IsLocalDomain_0041a410.c", "/tmp/haruspex_mDNSClientPosix/LocalOnlyRecordAnswersQuestion_00421870.c", "/tmp/haruspex_mDNSClientPosix/LocateAdditionals_0041ba10.c", "/tmp/haruspex_mDNSClientPosix/LocateAnswers_0041b91c.c", "/tmp/haruspex_mDNSClientPosix/LocateAuthorities_0041b994.c", "/tmp/haruspex_mDNSClientPosix/LocateOptRR_0041ba84.c", "/tmp/haruspex_mDNSClientPosix/LogMsgWithLevel_00407ce4.c", "/tmp/haruspex_mDNSClientPosix/MakeDomainLabelFromLiteralString_0041a890.c", "/tmp/haruspex_mDNSClientPosix/MakeDomainNameFromDNSNameString_0041e048.c", "/tmp/haruspex_mDNSClientPosix/MakeNegativeCacheRecord_00426f68.c", "/tmp/haruspex_mDNSClientPosix/NSEC3HashName_00422108.c", "/tmp/haruspex_mDNSClientPosix/NSEC3Parse_0041a114.c", "/tmp/haruspex_mDNSClientPosix/PenalizeDNSServer_0040fbb8.c", "/tmp/haruspex_mDNSClientPosix/PutResourceRecordTTLWithLimit_00420b70.c", "/tmp/haruspex_mDNSClientPosix/RDataHashValue_0041b504.c", "/tmp/haruspex_mDNSClientPosix/RRAssertsExistence_0041d420.c", "/tmp/haruspex_mDNSClientPosix/RRAssertsNonexistence_0041d898.c", "/tmp/haruspex_mDNSClientPosix/ReInitAnonInfo_00426094.c", "/tmp/haruspex_mDNSClientPosix/RecordRegistrationGotZoneData_004157d8.c", "/tmp/haruspex_mDNSClientPosix/RecreateNATMappings_0040eefc.c", "/tmp/haruspex_mDNSClientPosix/ReleaseCacheRecord_0042e1b0.c", "/tmp/haruspex_mDNSClientPosix/RemoveFromList_00407d7c.c", "/tmp/haruspex_mDNSClientPosix/ResourceRecordAnswersQuestion_00421b88.c", "/tmp/haruspex_mDNSClientPosix/ResourceRecordAnswersUnicastResponse_0041d8cc.c", "/tmp/haruspex_mDNSClientPosix/SameDomainLabel_0041a2f0.c", "/tmp/haruspex_mDNSClientPosix/SameDomainNameCS_00421ed4.c", "/tmp/haruspex_mDNSClientPosix/SameDomainName_0041a37c.c", "/tmp/haruspex_mDNSClientPosix/SameNameRecordAnswersQuestion_004219c0.c", "/tmp/haruspex_mDNSClientPosix/SameRDataBody_00421be8.c", "/tmp/haruspex_mDNSClientPosix/ScheduleNextCacheCheckTime_004263dc.c", "/tmp/haruspex_mDNSClientPosix/SetAnonData_00425890.c", "/tmp/haruspex_mDNSClientPosix/SetNewRData_0041d7b0.c", "/tmp/haruspex_mDNSClientPosix/SetNextQueryTime_00426cf8.c", "/tmp/haruspex_mDNSClientPosix/SetValidDNSServers_00429f84.c", "/tmp/haruspex_mDNSClientPosix/SkipLeadingLabels_0041a654.c", "/tmp/haruspex_mDNSClientPosix/SleepRecordRegistrations_0041568c.c", "/tmp/haruspex_mDNSClientPosix/StartGetZoneData_00412858.c", "/tmp/haruspex_mDNSClientPosix/UpdateAllSRVRecords_00413964.c", "/tmp/haruspex_mDNSClientPosix/ValidateRData_0041b134.c", "/tmp/haruspex_mDNSClientPosix/VerifySignature_00404064.c", "/tmp/haruspex_mDNSClientPosix/_fini_0044c760.c", "/tmp/haruspex_mDNSClientPosix/_ftext_00403d60.c", "/tmp/haruspex_mDNSClientPosix/_init_00403ce0.c", "/tmp/haruspex_mDNSClientPosix/free_ifi_info_00407048.c", "/tmp/haruspex_mDNSClientPosix/getQuestion_00420e9c.c", "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "/tmp/haruspex_mDNSClientPosix/mDNSAddrIPv4FromMappedIPv6_00419fcc.c", "/tmp/haruspex_mDNSClientPosix/mDNSAddrIsDNSMulticast_0041a260.c", "/tmp/haruspex_mDNSClientPosix/mDNSAddrMapIPv4toIPv6_00419f94.c", "/tmp/haruspex_mDNSClientPosix/mDNSCoreInitComplete_00427484.c", "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "/tmp/haruspex_mDNSClientPosix/mDNSCoreRestartAddressQueries_0043739c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformClearSPSMACAddr_004040e8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformClose_004051ac.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformDynDNSHostNameStatusChanged_0040404c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformFormatTime_004040b4.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformGetDNSRoutePolicy_00404100.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformGetPID_00404118.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformGetPrimaryInterface_00404040.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformGetRemoteMacAddr_004040d8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInit_00406620.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInterfaceIndexfromInterfaceID_00404354.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInterfaceIsD2D_004040f8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformLock_00404054.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformMemSame_00404f1c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformMemZero_00404dd0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformPeekUDP_00403fa0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformRandomSeed_00404d9c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformRawTime_00404d40.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformReadTCP_00403fd8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformRetrieveTCPInfo_004040d0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSendKeepalive_004040c8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSendRawPacket_00404004.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSendUDP_00406a28.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSendWakeupPacket_0040409c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSetAllowSleep_00404028.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSetDNSConfig_00404038.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSetLocalAddressCacheEntry_0040400c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSetuDNSSocktOpt_00404110.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSourceAddrForDest_00424bf4.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformStoreSPSMACAddr_004040e0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformTCPCloseConnection_00403fd0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformTCPConnect_00403fc0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformTCPGetFD_00403fb8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformTCPSocket_00403fa8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformTimeInit_00404094.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformUDPClose_00403ff4.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformUDPSocket_00403fe8.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformUTC_00404d28.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformUnlock_0040405c.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformUpdateProxyList_00403ffc.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformValidQuestionForInterface_004040ac.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformValidRecordForInterface_004040a4.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformWriteLogMsg_00424690.c", "/tmp/haruspex_mDNSClientPosix/mDNSPlatformWriteTCP_00403fe0.c", "/tmp/haruspex_mDNSClientPosix/mDNSPosixGetFDSet_00404974.c", "/tmp/haruspex_mDNSClientPosix/mDNSPosixProcessFDSet_00404774.c", "/tmp/haruspex_mDNSClientPosix/mDNSRandom_00422310.c", "/tmp/haruspex_mDNSClientPosix/mDNSSameAddress_0041a1c0.c", "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "/tmp/haruspex_mDNSClientPosix/mDNS_AddDNSServer_004102d0.c", "/tmp/haruspex_mDNSClientPosix/mDNS_AddDynDNSHostName_00410f8c.c", "/tmp/haruspex_mDNSClientPosix/mDNS_DeregisterInterface_00439a74.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_0043c52c.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_internal_00438e74.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Execute_00441d1c.c", "/tmp/haruspex_mDNSClientPosix/mDNS_FinalExit_0042e37c.c", "/tmp/haruspex_mDNSClientPosix/mDNS_GetDomains_00433fc4.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Lock__0041e440.c", "/tmp/haruspex_mDNSClientPosix/mDNS_NewMessageID_00428b8c.c", "/tmp/haruspex_mDNSClientPosix/mDNS_PurgeCacheResourceRecord_00428f48.c", "/tmp/haruspex_mDNSClientPosix/mDNS_RegisterInterface_00447b30.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Register_00448188.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Register_internal_004463c4.c", "/tmp/haruspex_mDNSClientPosix/mDNS_RemoveDynDNSHostName_00411950.c", "/tmp/haruspex_mDNSClientPosix/mDNS_SetFQDN_00447890.c", "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "/tmp/haruspex_mDNSClientPosix/mDNS_SetSecretForDomain_00419c04.c", "/tmp/haruspex_mDNSClientPosix/mDNS_SetupQuestion_00421fb0.c", "/tmp/haruspex_mDNSClientPosix/mDNS_SetupResourceRecord_00420f90.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StartBrowse_00433a98.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StartExit_004492bc.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StartNATOperation_internal_0040b6b4.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StartQuery_00433f4c.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StartQuery_internal_004329b8.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StopNATOperation_internal_0040f8e0.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StopQuery_0042c298.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StopQuery_internal_0042b718.c", "/tmp/haruspex_mDNSClientPosix/mDNS_StopResolveService_0042c034.c", "/tmp/haruspex_mDNSClientPosix/mDNS_TimeNow_00431984.c", "/tmp/haruspex_mDNSClientPosix/mDNS_Unlock__0041e218.c", "/tmp/haruspex_mDNSClientPosix/mDNS_snprintf_0041bb78.c", "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "/tmp/haruspex_mDNSClientPosix/mDNSv4AddrIsRFC1918_00419f40.c", "/tmp/haruspex_mDNSClientPosix/main_0044b7d0.c", "/tmp/haruspex_mDNSClientPosix/putDNSSECOption_0042130c.c", "/tmp/haruspex_mDNSClientPosix/putDeleteRRSetWithLimit_0041cff8.c", "/tmp/haruspex_mDNSClientPosix/putDeletionRecordWithLimit_00420e00.c", "/tmp/haruspex_mDNSClientPosix/putHINFO_004211c0.c", "/tmp/haruspex_mDNSClientPosix/putQuestion_0041d144.c", "/tmp/haruspex_mDNSClientPosix/putRData_00420100.c", "/tmp/haruspex_mDNSClientPosix/putUpdateLeaseWithLimit_004213d4.c", "/tmp/haruspex_mDNSClientPosix/putZone_0041d0b0.c", "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "/tmp/haruspex_mDNSClientPosix/sendLLQRefresh_004160a4.c", "/tmp/haruspex_mDNSClientPosix/setTimer_0044b780.c", "/tmp/haruspex_mDNSClientPosix/startLLQHandshake_004171ac.c", "/tmp/haruspex_mDNSClientPosix/swap16_0041a108.c", "/tmp/haruspex_mDNSClientPosix/swap32_0041a0dc.c", "/tmp/haruspex_mDNSClientPosix/uDNS_DeregisterRecord_004151b4.c", "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveMsg_004165bc.c", "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveNATPacket_00411148.c", "/tmp/haruspex_mDNSClientPosix/uDNS_SetupWABQueries_0040c1e4.c", "/tmp/haruspex_mDNSClientPosix/uDNS_Tasks_00418390.c", "/tmp/haruspex_mDNSClientPosix/uDNS_UpdateRecord_0040dbe8.c", "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c"]}, "results": [{"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 33, "line": 13, "offset": 218}, "extra": {"engine_kind": "OSS", "fingerprint": "3e1869bfdbe9bd48280f1917da5565d21c2f8d414d16dfb23ff5cedfb28a8817b86f5570d092159ae588a4586a1a5b005871656cbb92a42a1fb87dd9b29f92aa_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 29, "line": 13, "offset": 214}, "start": {"col": 22, "line": 13, "offset": 207}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 13, "offset": 193}, "start": {"col": 3, "line": 13, "offset": 188}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/ActivateUnicastRegistration_0042c818.c", "start": {"col": 3, "line": 13, "offset": 188}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 43, "offset": 1185}, "extra": {"engine_kind": "OSS", "fingerprint": "f62056924de8be407431ba876813399bb7cb9a84172586990f0f2bd0493ddbdb06bb759319f7f22025f264a78b610f4d93a8da5482076e9813bbc8e95fc9011d_0", "is_ignored": false, "lines": "        memcpy(pvVar2,param_4,0x2c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 43, "offset": 1164}, "start": {"col": 9, "line": 43, "offset": 1158}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AllocateAnonInfo_00425aa4.c", "start": {"col": 9, "line": 43, "offset": 1158}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 43, "offset": 1185}, "extra": {"engine_kind": "OSS", "fingerprint": "78dfa211f6b6d5f3233b2c505378cad48b4e9df5d39cf11f5f764e50eb82ca9ad41643c49c1198959ac8cda7dd92a726ff8b492df42e57bf07c24dab3a6603be_0", "is_ignored": false, "lines": "        memcpy(pvVar2,param_4,0x2c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "pvVar2", "end": {"col": 22, "line": 43, "offset": 1171}, "propagated_value": {"svalue_abstract_content": "mDNSPlatformMemAllocate(iVar3+0x138)", "svalue_end": {"col": 54, "line": 41, "offset": 1113}, "svalue_start": {"col": 16, "line": 41, "offset": 1075}}, "start": {"col": 16, "line": 43, "offset": 1165}}, "$LEN": {"abstract_content": "0x2c", "end": {"col": 35, "line": 43, "offset": 1184}, "start": {"col": 31, "line": 43, "offset": 1180}}, "$SRC": {"abstract_content": "param_4", "end": {"col": 30, "line": 43, "offset": 1179}, "start": {"col": 23, "line": 43, "offset": 1172}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AllocateAnonInfo_00425aa4.c", "start": {"col": 9, "line": 43, "offset": 1158}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 56, "line": 48, "offset": 979}, "extra": {"engine_kind": "OSS", "fingerprint": "8e248f325e748dee621927f3b9e53ca6923d4701ac6ee4986130889b4af1ae08372cdf1af141193913a28bfb8680f25fab5fdb5b129658bbcfe97c7a3b58978c_0", "is_ignored": false, "lines": "      iVar2 = mDNSPlatformMemCmp(__s1,__s2,(size_t)__n);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar2", "end": {"col": 12, "line": 48, "offset": 935}, "start": {"col": 7, "line": 48, "offset": 930}}, "$UNSIGNED": {"abstract_content": "(size_t __n", "end": {"col": 55, "line": 48, "offset": 978}, "start": {"col": 44, "line": 48, "offset": 967}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AnonInfoAnswersQuestion_00425620.c", "start": {"col": 7, "line": 48, "offset": 930}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 16, "line": 20, "offset": 517}, "extra": {"engine_kind": "OSS", "fingerprint": "9a052017e5ecf9f29497397a277f109232de8791b3666df785af3124ff2fb851b19ef6e078a05113d72339617fc2f35549e60b01ebfc2c6ede64d56effe6131b_0", "is_ignored": false, "lines": "      sVar4 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 16, "line": 20, "offset": 517}, "start": {"col": 15, "line": 20, "offset": 516}}, "$NARROW": {"abstract_content": "sVar4", "end": {"col": 12, "line": 20, "offset": 513}, "start": {"col": 7, "line": 20, "offset": 508}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AnyTypeRecordAnswersQuestion_0042173c.c", "start": {"col": 7, "line": 20, "offset": 508}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 60, "line": 22, "offset": 621}, "extra": {"engine_kind": "OSS", "fingerprint": "43a5075556a24e28458aee5e83d0b03cfd3b55d3cbfb0a5f135f3b79869dac92d41e2f867040de364809c3d1f216c903b894975547098b73c77a8241618e2af4_0", "is_ignored": false, "lines": "        sVar4 = *(short *)(*(int *)(param_1 + 0x24) + 0x13e);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 44, "line": 22, "offset": 605}, "start": {"col": 37, "line": 22, "offset": 598}}, "$NARROW": {"abstract_content": "sVar4", "end": {"col": 14, "line": 22, "offset": 575}, "start": {"col": 9, "line": 22, "offset": 570}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AnyTypeRecordAnswersQuestion_0042173c.c", "start": {"col": 9, "line": 22, "offset": 570}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 16, "line": 24, "offset": 647}, "extra": {"engine_kind": "OSS", "fingerprint": "9f1bc4f33d71af87e0feac14dfd47082f9db09567009264a25f392c05acecb915d7a5a6641d561e69b9ca3a0f3e590ad615b22fc11dd7fbe5d6815b249c7c298_0", "is_ignored": false, "lines": "      sVar1 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 16, "line": 24, "offset": 647}, "start": {"col": 15, "line": 24, "offset": 646}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 24, "offset": 643}, "start": {"col": 7, "line": 24, "offset": 638}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AnyTypeRecordAnswersQuestion_0042173c.c", "start": {"col": 7, "line": 24, "offset": 638}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 60, "line": 26, "offset": 751}, "extra": {"engine_kind": "OSS", "fingerprint": "57b4c9f5989291815afab3ea53ef14e94145fad30072d85a92b69c4996224694a45ed66aa3fe7199137d4542b4d5aa32262a01981a65d6e52bdfa7f319a9cb41_0", "is_ignored": false, "lines": "        sVar1 = *(short *)(*(int *)(param_2 + 0xdc) + 0x13e);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 44, "line": 26, "offset": 735}, "start": {"col": 37, "line": 26, "offset": 728}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 14, "line": 26, "offset": 705}, "start": {"col": 9, "line": 26, "offset": 700}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/AnyTypeRecordAnswersQuestion_0042173c.c", "start": {"col": 9, "line": 26, "offset": 700}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 13, "offset": 419}, "extra": {"engine_kind": "OSS", "fingerprint": "7eb7cda4e1321b2968edc2cc2437d26380be8f054324dfd13cb1426d37a4e16dc19fa4f34f1ec735a33d52b25d993d165168377fd7df8571230efc1637d4d0db_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 13, "offset": 378}, "start": {"col": 3, "line": 13, "offset": 372}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CompleteDeregistration_0043e784.c", "start": {"col": 3, "line": 13, "offset": 372}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 13, "offset": 419}, "extra": {"engine_kind": "OSS", "fingerprint": "a44c79817cef67180718fa886a1b4ca9fab2cd615251ab7ca53c9b2abbffba586fff4129d83c30765551622fbd6fc0faa6246b2cf3a21d01dc9141f5f6c9c2cf_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x4e", "end": {"col": 33, "line": 13, "offset": 402}, "start": {"col": 10, "line": 13, "offset": 379}}, "$LEN": {"abstract_content": "6", "end": {"col": 49, "line": 13, "offset": 418}, "start": {"col": 48, "line": 13, "offset": 417}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 47, "line": 13, "offset": 416}, "start": {"col": 35, "line": 13, "offset": 404}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CompleteDeregistration_0043e784.c", "start": {"col": 3, "line": 13, "offset": 372}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 38, "line": 28, "offset": 639}, "extra": {"engine_kind": "OSS", "fingerprint": "e3fa888482e4b4c9974940138e37cf188358b950ccae4abd48438739667d44777ec091460a7e51707a27d29e4082d64ff9b04e12a1330ad4b216b7d4b9c95943_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_1 + 0x7fae);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 29, "line": 28, "offset": 630}, "start": {"col": 22, "line": 28, "offset": 623}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 28, "offset": 609}, "start": {"col": 3, "line": 28, "offset": 604}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 3, "line": 28, "offset": 604}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 49, "line": 103, "offset": 3555}, "extra": {"engine_kind": "OSS", "fingerprint": "570bc025d9024843fed57480d7881e3ee31d080350c336c75f1a057422b93a297ae7595978e94c8807c5754219d95c0aced48752218fa3df06f84f3314ef15ca_0", "is_ignored": false, "lines": "  memcpy(puVar5,(void *)(param_1 + 0x7fa8),0xb8);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 103, "offset": 3515}, "start": {"col": 3, "line": 103, "offset": 3509}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 3, "line": 103, "offset": 3509}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 103, "offset": 3555}, "extra": {"engine_kind": "OSS", "fingerprint": "ec81e68a28f595c36ddfda5d25c93e7f1af09e91dc4478d17b6b9e5022589bc610ccc5396b9a10308f50db573329fcb86bfd9b69f25c2e116d11a20782999fd9_0", "is_ignored": false, "lines": "  memcpy(puVar5,(void *)(param_1 + 0x7fa8),0xb8);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar5", "end": {"col": 16, "line": 103, "offset": 3522}, "start": {"col": 10, "line": 103, "offset": 3516}}, "$LEN": {"abstract_content": "0xb8", "end": {"col": 48, "line": 103, "offset": 3554}, "start": {"col": 44, "line": 103, "offset": 3550}}, "$SRC": {"abstract_content": "(void*param_1+0x7fa8", "end": {"col": 42, "line": 103, "offset": 3548}, "start": {"col": 17, "line": 103, "offset": 3523}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 3, "line": 103, "offset": 3509}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 39, "line": 136, "offset": 4589}, "extra": {"engine_kind": "OSS", "fingerprint": "570bc025d9024843fed57480d7881e3ee31d080350c336c75f1a057422b93a297ae7595978e94c8807c5754219d95c0aced48752218fa3df06f84f3314ef15ca_1", "is_ignored": false, "lines": "    memcpy(puVar5 + 0x17,param_6,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 136, "offset": 4561}, "start": {"col": 5, "line": 136, "offset": 4555}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 5, "line": 136, "offset": 4555}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 136, "offset": 4589}, "extra": {"engine_kind": "OSS", "fingerprint": "a498afd2238f2f49457faaf06f5403deff8d47cb22b5ba43b35ce321490f97897cb41bd77df4b53795fbea1e36de80a000f792c0cae7b111970862e294cc3f1f_0", "is_ignored": false, "lines": "    memcpy(puVar5 + 0x17,param_6,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar5+0x17", "end": {"col": 25, "line": 136, "offset": 4575}, "start": {"col": 12, "line": 136, "offset": 4562}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 38, "line": 136, "offset": 4588}, "start": {"col": 34, "line": 136, "offset": 4584}}, "$SRC": {"abstract_content": "param_6", "end": {"col": 33, "line": 136, "offset": 4583}, "start": {"col": 26, "line": 136, "offset": 4576}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 5, "line": 136, "offset": 4555}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 39, "line": 140, "offset": 4749}, "extra": {"engine_kind": "OSS", "fingerprint": "a82f6c1f79f5decae1485ab5968dbc5bfbb965456c1c213e7826c5d6f03460e17390f1df46606624cd7ff857b18fce7efbb3f7cda1432f1d07303b7a601aebfc_0", "is_ignored": false, "lines": "    sVar1 = *(short *)((int)puVar5 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar5", "end": {"col": 35, "line": 140, "offset": 4745}, "start": {"col": 24, "line": 140, "offset": 4734}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 10, "line": 140, "offset": 4720}, "start": {"col": 5, "line": 140, "offset": 4715}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 5, "line": 140, "offset": 4715}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 64, "line": 215, "offset": 8127}, "extra": {"engine_kind": "OSS", "fingerprint": "3591ce2a9beec59d5753e6f4c649a49d4a0d0c178bdafb54c2def5611b7ebf2e254d7bdc7c5ede3372ec9c0ff4887260d6d1cf59c3bb6efe8b893f0d3eed0a05_0", "is_ignored": false, "lines": "  __size = DomainNameLengthLimit(param_3[4],param_3[4] + 0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "4", "end": {"col": 43, "line": 215, "offset": 8106}, "start": {"col": 42, "line": 215, "offset": 8105}}, "$UNSIGNED": {"abstract_content": "__size", "end": {"col": 9, "line": 215, "offset": 8072}, "start": {"col": 3, "line": 215, "offset": 8066}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/CreateNewCacheEntry_00437b18.c", "start": {"col": 3, "line": 215, "offset": 8066}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 68, "line": 124, "offset": 3762}, "extra": {"engine_kind": "OSS", "fingerprint": "8230442522d6c0768c80eee197834eec1e57aff674c647430db04e7023c16074bc7b0c1b70779f2450105e95e7945f99b135b29d0d3b46e196763210058fc214_0", "is_ignored": false, "lines": "  local_3b0 = ((short)(void *)(iVar5 + 4) - local_39c._2_2_) + 0x1c;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "iVar5", "end": {"col": 37, "line": 124, "offset": 3731}, "propagated_value": {"svalue_abstract_content": "local_39c+iVar4", "svalue_end": {"col": 28, "line": 77, "offset": 2040}, "svalue_start": {"col": 11, "line": 77, "offset": 2023}}, "start": {"col": 32, "line": 124, "offset": 3726}}, "$NARROW": {"abstract_content": "local_3b0", "end": {"col": 12, "line": 124, "offset": 3706}, "start": {"col": 3, "line": 124, "offset": 3697}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DNSDigest_SignMessage_0040aaec.c", "start": {"col": 3, "line": 124, "offset": 3697}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 45, "line": 90, "offset": 1619}, "extra": {"engine_kind": "OSS", "fingerprint": "d7930f4bb327010780d44cc1348c0176d674a9452e16acda8ba8e05460ff9c36da191bddb05db235d69119e115a31a4b34144a08b3edb3221a7951a2849c1e93_0", "is_ignored": false, "lines": "  mDNS_snprintf(&DAT_0046e7e8,0x10,\"TYPE%d\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 16, "line": 90, "offset": 1590}, "start": {"col": 3, "line": 90, "offset": 1577}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DNSTypeName_0041caa8.c", "start": {"col": 3, "line": 90, "offset": 1577}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 11, "offset": 165}, "extra": {"engine_kind": "OSS", "fingerprint": "86b6c095c823fe5ccbbdd8c78423beebf3dd52a1cf59b4528b6235c674058e4d0ef8ff45af057dc1daec6793230f0cf5a68c894d6e78adddcf05587ddfff6308_0", "is_ignored": false, "lines": "  memcpy(__dest,&PTR_DAT_0046e060,0x18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 11, "offset": 134}, "start": {"col": 3, "line": 11, "offset": 128}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DomainEnumQuery_00429e8c.c", "start": {"col": 3, "line": 11, "offset": 128}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 40, "line": 11, "offset": 165}, "extra": {"engine_kind": "OSS", "fingerprint": "e3a093f66bec6a336c76098a1168756ff5fb59be4079e9c2bd5e8a14425bebf5fcaf1a60517c87729cd48e71030072b49d3e0fd5bb9a6bada03b2cfc182425c3_0", "is_ignored": false, "lines": "  memcpy(__dest,&PTR_DAT_0046e060,0x18);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest", "end": {"col": 16, "line": 11, "offset": 141}, "propagated_value": {"svalue_abstract_content": "local_28", "svalue_end": {"col": 20, "line": 10, "offset": 124}, "svalue_start": {"col": 12, "line": 10, "offset": 116}}, "start": {"col": 10, "line": 11, "offset": 135}}, "$LEN": {"abstract_content": "0x18", "end": {"col": 39, "line": 11, "offset": 164}, "start": {"col": 35, "line": 11, "offset": 160}}, "$SRC": {"abstract_content": "&PTR_DAT_0046e060", "end": {"col": 34, "line": 11, "offset": 159}, "start": {"col": 17, "line": 11, "offset": 142}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DomainEnumQuery_00429e8c.c", "start": {"col": 3, "line": 11, "offset": 128}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 35, "offset": 818}, "extra": {"engine_kind": "OSS", "fingerprint": "5ce5f3eb903d7bc66aad9547fb1076ba0eb04d86a9c4efbf8e5bb63eeb8009d2c51f80e8dd5b6947146e0eefb4ce0a9ff4542fb41e953278620310eb2b615e1f_0", "is_ignored": false, "lines": "  memset(local_300 + 1,0,0x3f);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 35, "offset": 812}, "start": {"col": 24, "line": 35, "offset": 811}}, "$DST": {"abstract_content": "local_300+1", "end": {"col": 23, "line": 35, "offset": 810}, "start": {"col": 10, "line": 35, "offset": 797}}, "$LEN": {"abstract_content": "0x3f", "end": {"col": 30, "line": 35, "offset": 817}, "start": {"col": 26, "line": 35, "offset": 813}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "start": {"col": 3, "line": 35, "offset": 790}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 43, "offset": 996}, "extra": {"engine_kind": "OSS", "fingerprint": "8a86454bef20f21beb2a6a068f56cf2532e0a456a919880b11ebe3d430371cf72baef934daa31ee900fb82b232d908e6c7af7093746a11eac3487ba151af4a5c_0", "is_ignored": false, "lines": "    iVar3 = mDNS_snprintf(auStack_380,0x40,pcVar11);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 43, "offset": 970}, "start": {"col": 13, "line": 43, "offset": 957}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "start": {"col": 13, "line": 43, "offset": 957}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 78, "line": 53, "offset": 1223}, "extra": {"engine_kind": "OSS", "fingerprint": "8a86454bef20f21beb2a6a068f56cf2532e0a456a919880b11ebe3d430371cf72baef934daa31ee900fb82b232d908e6c7af7093746a11eac3487ba151af4a5c_1", "is_ignored": false, "lines": "    iVar3 = mDNS_snprintf(auStack_380,0x40,\"ERROR %d %sing\",local_30,pcVar11);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 53, "offset": 1171}, "start": {"col": 13, "line": 53, "offset": 1158}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "start": {"col": 13, "line": 53, "offset": 1158}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 66, "line": 58, "offset": 1368}, "extra": {"engine_kind": "OSS", "fingerprint": "8a86454bef20f21beb2a6a068f56cf2532e0a456a919880b11ebe3d430371cf72baef934daa31ee900fb82b232d908e6c7af7093746a11eac3487ba151af4a5c_2", "is_ignored": false, "lines": "    iVar3 = mDNS_snprintf(auStack_340,0x40,&DAT_0045409c,param_5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 58, "offset": 1328}, "start": {"col": 13, "line": 58, "offset": 1315}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "start": {"col": 13, "line": 58, "offset": 1315}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 61, "offset": 1434}, "extra": {"engine_kind": "OSS", "fingerprint": "8a86454bef20f21beb2a6a068f56cf2532e0a456a919880b11ebe3d430371cf72baef934daa31ee900fb82b232d908e6c7af7093746a11eac3487ba151af4a5c_3", "is_ignored": false, "lines": "    iVar3 = mDNS_snprintf(auStack_340,0x40,\"port \");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 61, "offset": 1408}, "start": {"col": 13, "line": 61, "offset": 1395}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "start": {"col": 13, "line": 61, "offset": 1395}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 77, "line": 65, "offset": 1590}, "extra": {"engine_kind": "OSS", "fingerprint": "8a86454bef20f21beb2a6a068f56cf2532e0a456a919880b11ebe3d430371cf72baef934daa31ee900fb82b232d908e6c7af7093746a11eac3487ba151af4a5c_4", "is_ignored": false, "lines": "    iVar3 = mDNS_snprintf(local_300,0x40,\" to %#a:%d\",param_7,param_8._0_2_);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 65, "offset": 1539}, "start": {"col": 13, "line": 65, "offset": 1526}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/DumpPacket_00423ba4.c", "start": {"col": 13, "line": 65, "offset": 1526}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-signal", "end": {"col": 42, "line": 13, "offset": 232}, "extra": {"engine_kind": "OSS", "fingerprint": "202ee7a28984804704ef5e0444fad28aca59e27c4f5bdca4f31ee93cc73a8272d21c2dd46ace18138dd4be37812d1de9cc319fd1e1c288bdb6d324d3eef01100_0", "is_ignored": false, "lines": "  signal(2,(__sighandler_t)&LAB_0044b5f0);", "message": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/364", "https://cwe.mitre.org/data/definitions/479", "https://cwe.mitre.org/data/definitions/828"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/ExampleClientEventLoop_0044b604.c", "start": {"col": 3, "line": 13, "offset": 193}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-signal", "end": {"col": 44, "line": 14, "offset": 277}, "extra": {"engine_kind": "OSS", "fingerprint": "202ee7a28984804704ef5e0444fad28aca59e27c4f5bdca4f31ee93cc73a8272d21c2dd46ace18138dd4be37812d1de9cc319fd1e1c288bdb6d324d3eef01100_1", "is_ignored": false, "lines": "  signal(0xf,(__sighandler_t)&LAB_0044b5f0);", "message": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/364", "https://cwe.mitre.org/data/definitions/479", "https://cwe.mitre.org/data/definitions/828"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/ExampleClientEventLoop_0044b604.c", "start": {"col": 3, "line": 14, "offset": 236}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-signal", "end": {"col": 44, "line": 15, "offset": 322}, "extra": {"engine_kind": "OSS", "fingerprint": "202ee7a28984804704ef5e0444fad28aca59e27c4f5bdca4f31ee93cc73a8272d21c2dd46ace18138dd4be37812d1de9cc319fd1e1c288bdb6d324d3eef01100_2", "is_ignored": false, "lines": "  signal(0xe,(__sighandler_t)&LAB_0044b5f0);", "message": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/364", "https://cwe.mitre.org/data/definitions/479", "https://cwe.mitre.org/data/definitions/828"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/ExampleClientEventLoop_0044b604.c", "start": {"col": 3, "line": 15, "offset": 281}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 19, "offset": 379}, "extra": {"engine_kind": "OSS", "fingerprint": "8c1cd04a4531c06dc6438c6aa0b90969d4f1e38f60ceb4d19ab59852a9d78028724ff66d71c4ce5ddfd0cf73ceb2ad6994e8ebcce0c7d0089645bf7abec297b1_0", "is_ignored": false, "lines": "    memcpy(param_2 + 1,param_1 + 4,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 19, "offset": 349}, "start": {"col": 5, "line": 19, "offset": 343}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00403f00_00403f00.c", "start": {"col": 5, "line": 19, "offset": 343}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 41, "line": 19, "offset": 379}, "extra": {"engine_kind": "OSS", "fingerprint": "7546fc6b8b02647602801ce606b8b6870b5d8763d016c66170cbdf0bc25f6910e9e09bab38e66946d47dc9a0decefce5b6c0f133d87f90d30a7be5dbd44b4c82_0", "is_ignored": false, "lines": "    memcpy(param_2 + 1,param_1 + 4,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_2+1", "end": {"col": 23, "line": 19, "offset": 361}, "start": {"col": 12, "line": 19, "offset": 350}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 40, "line": 19, "offset": 378}, "start": {"col": 36, "line": 19, "offset": 374}}, "$SRC": {"abstract_content": "param_1+4", "end": {"col": 35, "line": 19, "offset": 373}, "start": {"col": 24, "line": 19, "offset": 362}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00403f00_00403f00.c", "start": {"col": 5, "line": 19, "offset": 343}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 35, "line": 14, "offset": 265}, "extra": {"engine_kind": "OSS", "fingerprint": "31b12ec461c2ecfcb893be86bdfadce1938ffb99b83b98e7354cf0b0d4f4e529c1d2da63918da4a58d062b0ac843e0165f2327b8ecd96a8c47297f62ef6a5881_0", "is_ignored": false, "lines": "      piVar2 = (int *)malloc(0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 29, "line": 14, "offset": 259}, "start": {"col": 23, "line": 14, "offset": 253}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040423c_0040423c.c", "start": {"col": 23, "line": 14, "offset": 253}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 35, "line": 14, "offset": 265}, "extra": {"engine_kind": "OSS", "fingerprint": "6563c4a216ab54d7b378c683ebfee07e702671d192bdcd0b185de21148fe49b221e070e9c9fc55b41f8aed1c470ef2300b0f00ef568d26310ab9efd404d8ee55_0", "is_ignored": false, "lines": "      piVar2 = (int *)malloc(0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$LEN": {"abstract_content": "0x10", "end": {"col": 34, "line": 14, "offset": 264}, "start": {"col": 30, "line": 14, "offset": 260}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040423c_0040423c.c", "start": {"col": 23, "line": 14, "offset": 253}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 12, "offset": 244}, "extra": {"engine_kind": "OSS", "fingerprint": "ce1f89cff4bc57123b71737cf82cb9ee3c088f59f258f35a15173642d1fa597468204f820661b60a9085eced00564d12c0c6cba9358fb4475d44aa02d58aca87_0", "is_ignored": false, "lines": "  memcpy(&fStack_9c,&DAT_0046e6c4,0x80);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 12, "offset": 213}, "start": {"col": 3, "line": 12, "offset": 207}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00404b54_00404b54.c", "start": {"col": 3, "line": 12, "offset": 207}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 40, "line": 12, "offset": 244}, "extra": {"engine_kind": "OSS", "fingerprint": "99f87c8ad6548ee6158b452d0fcf0d52d0fa9a73ff74818ef2f3e8c9a8b7babf900647a3f582af3dc970433ac7bf4e69053f57c9e54b8b28659ffafdddb26cf4_0", "is_ignored": false, "lines": "  memcpy(&fStack_9c,&DAT_0046e6c4,0x80);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&fStack_9c", "end": {"col": 20, "line": 12, "offset": 224}, "start": {"col": 10, "line": 12, "offset": 214}}, "$LEN": {"abstract_content": "0x80", "end": {"col": 39, "line": 12, "offset": 243}, "start": {"col": 35, "line": 12, "offset": 239}}, "$SRC": {"abstract_content": "&DAT_0046e6c4", "end": {"col": 34, "line": 12, "offset": 238}, "start": {"col": 21, "line": 12, "offset": 225}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00404b54_00404b54.c", "start": {"col": 3, "line": 12, "offset": 207}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 36, "offset": 1030}, "extra": {"engine_kind": "OSS", "fingerprint": "ce1f89cff4bc57123b71737cf82cb9ee3c088f59f258f35a15173642d1fa597468204f820661b60a9085eced00564d12c0c6cba9358fb4475d44aa02d58aca87_1", "is_ignored": false, "lines": "  memcpy(param_3,&DAT_0046e764,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 36, "offset": 1002}, "start": {"col": 3, "line": 36, "offset": 996}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00404b54_00404b54.c", "start": {"col": 3, "line": 36, "offset": 996}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 36, "offset": 1030}, "extra": {"engine_kind": "OSS", "fingerprint": "dd4d488174dfd228e1cab74bd31e3731084758c35129142b0910efe3107782dfbc6d120ddcaba46fe19e7a1e8d1d84ec6a55349d4a301f1fbf571f47d31592ce_0", "is_ignored": false, "lines": "  memcpy(param_3,&DAT_0046e764,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_3", "end": {"col": 17, "line": 36, "offset": 1010}, "start": {"col": 10, "line": 36, "offset": 1003}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 36, "line": 36, "offset": 1029}, "start": {"col": 32, "line": 36, "offset": 1025}}, "$SRC": {"abstract_content": "&DAT_0046e764", "end": {"col": 31, "line": 36, "offset": 1024}, "start": {"col": 18, "line": 36, "offset": 1011}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00404b54_00404b54.c", "start": {"col": 3, "line": 36, "offset": 996}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 65, "line": 185, "offset": 5582}, "extra": {"engine_kind": "OSS", "fingerprint": "639d64cca10de2c1984cf65c1d4c14ea48f6d9d3206b15bf6fddae94fcb51d10de415c765770239dc35c846bf8f5b78b88ab0e5c70926325bc760492ec96abcc_0", "is_ignored": false, "lines": "                  memcpy(local_48.sa_data + 6,&in6addr_any,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 25, "line": 185, "offset": 5542}, "start": {"col": 19, "line": 185, "offset": 5536}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004052b4_004052b4.c", "start": {"col": 19, "line": 185, "offset": 5536}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 65, "line": 185, "offset": 5582}, "extra": {"engine_kind": "OSS", "fingerprint": "77886a7cba65569e9bacd2762cb6f1d20fa067300c5d5c12b9912b258fbe19e3b1671424fb256c4cee3609b19c09da9473dfeb155a0a9c97bca3b350333245a7_0", "is_ignored": false, "lines": "                  memcpy(local_48.sa_data + 6,&in6addr_any,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_48.sa_data+6", "end": {"col": 46, "line": 185, "offset": 5563}, "start": {"col": 26, "line": 185, "offset": 5543}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 64, "line": 185, "offset": 5581}, "start": {"col": 60, "line": 185, "offset": 5577}}, "$SRC": {"abstract_content": "&in6addr_any", "end": {"col": 59, "line": 185, "offset": 5576}, "start": {"col": 47, "line": 185, "offset": 5564}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004052b4_004052b4.c", "start": {"col": 19, "line": 185, "offset": 5536}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 59, "line": 196, "offset": 5891}, "extra": {"engine_kind": "OSS", "fingerprint": "639d64cca10de2c1984cf65c1d4c14ea48f6d9d3206b15bf6fddae94fcb51d10de415c765770239dc35c846bf8f5b78b88ab0e5c70926325bc760492ec96abcc_1", "is_ignored": false, "lines": "            memcpy(auStack_5c,AllDNSLinkGroup_v6 + 4,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 196, "offset": 5851}, "start": {"col": 13, "line": 196, "offset": 5845}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004052b4_004052b4.c", "start": {"col": 13, "line": 196, "offset": 5845}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 59, "line": 196, "offset": 5891}, "extra": {"engine_kind": "OSS", "fingerprint": "8aca6e028e7964b06e7da5cec50b0abb65571c1597ef63b2f5e6ab7aef9f27b565a14f9d1685e42e65cf4e0b028db91f614ee995eaf9a3cd8d92f73392f275cb_0", "is_ignored": false, "lines": "            memcpy(auStack_5c,AllDNSLinkGroup_v6 + 4,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_5c", "end": {"col": 30, "line": 196, "offset": 5862}, "start": {"col": 20, "line": 196, "offset": 5852}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 58, "line": 196, "offset": 5890}, "start": {"col": 54, "line": 196, "offset": 5886}}, "$SRC": {"abstract_content": "AllDNSLinkGroup_v6+4", "end": {"col": 53, "line": 196, "offset": 5885}, "start": {"col": 31, "line": 196, "offset": 5863}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004052b4_004052b4.c", "start": {"col": 13, "line": 196, "offset": 5845}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 24, "offset": 587}, "extra": {"engine_kind": "OSS", "fingerprint": "98d4c7da42ffaef9aae549ef5c1c9f9e7eefd2a69237ceee00ed45ba79df4c0bd6e11f945210e4658b57790ec05f94a0f90fc4df055390134b06f1f5c2eeaced_0", "is_ignored": false, "lines": "  ppvVar1 = (void **)calloc(1,0x15b4);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 28, "line": 24, "offset": 577}, "start": {"col": 22, "line": 24, "offset": 571}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00405bfc_00405bfc.c", "start": {"col": 22, "line": 24, "offset": 571}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 24, "offset": 587}, "extra": {"engine_kind": "OSS", "fingerprint": "de197858b3feb0dd0481cba0d02e752a8eeb144ae35a42b9b39e62a53baa55154aaf635c64175981d10e9d982d7b058bb0341ec2dd0ae304d862d43f1fac1a58_0", "is_ignored": false, "lines": "  ppvVar1 = (void **)calloc(1,0x15b4);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 30, "line": 24, "offset": 579}, "start": {"col": 29, "line": 24, "offset": 578}}, "$LEN": {"abstract_content": "0x15b4", "end": {"col": 37, "line": 24, "offset": 586}, "start": {"col": 31, "line": 24, "offset": 580}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00405bfc_00405bfc.c", "start": {"col": 22, "line": 24, "offset": 571}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 60, "line": 34, "offset": 899}, "extra": {"engine_kind": "OSS", "fingerprint": "9d1ef22246e9e03a98d30855f641b49fb3f4144c55e5551916894ea24cacadcf479562a0da97395c197e4bb45b70f2d136c470032e70f73ed11c1d6e53257033_0", "is_ignored": false, "lines": "      strncpy((char *)((int)ppvVar1 + 0x1552),param_4,0x40);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 14, "line": 34, "offset": 853}, "start": {"col": 7, "line": 34, "offset": 846}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00405bfc_00405bfc.c", "start": {"col": 7, "line": 34, "offset": 846}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 60, "line": 34, "offset": 899}, "extra": {"engine_kind": "OSS", "fingerprint": "3bdc1017021de1c506e3521c7e5bbcaba9e8c823dec67f23d0289342baa1d9b6aa5e1f8743094038cc950ff76a427708b20c7e28141bb73236b362a164f1d1d5_0", "is_ignored": false, "lines": "      strncpy((char *)((int)ppvVar1 + 0x1552),param_4,0x40);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(char*(int ppvVar1+0x1552", "end": {"col": 45, "line": 34, "offset": 884}, "start": {"col": 15, "line": 34, "offset": 854}}, "$LEN": {"abstract_content": "0x40", "end": {"col": 59, "line": 34, "offset": 898}, "start": {"col": 55, "line": 34, "offset": 894}}, "$SRC": {"abstract_content": "param_4", "end": {"col": 54, "line": 34, "offset": 893}, "start": {"col": 47, "line": 34, "offset": 886}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00405bfc_00405bfc.c", "start": {"col": 7, "line": 34, "offset": 846}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 60, "line": 34, "offset": 899}, "extra": {"engine_kind": "OSS", "fingerprint": "1dba5e3413d21224263833722ed96f61464e6d998a6e414259cf0535f083d723f09123119b0bcd8c3341766abfbeeab4b75ef87901922116e940c4e3ec3f2f6c_0", "is_ignored": false, "lines": "      strncpy((char *)((int)ppvVar1 + 0x1552),param_4,0x40);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 14, "line": 34, "offset": 853}, "start": {"col": 7, "line": 34, "offset": 846}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00405bfc_00405bfc.c", "start": {"col": 7, "line": 34, "offset": 846}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 40, "line": 31, "offset": 655}, "extra": {"engine_kind": "OSS", "fingerprint": "512ff70bbb88eb32472f227a255bf9dfd7d7597f0c09657eddcf76b6164f4ff74fb1cb27404a7bc5db1425d42cdca0dba659259831cb9e4b7e8653ac2abee212_0", "is_ignored": false, "lines": "      sVar1 = **(short **)(iVar7 + 0x24);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "iVar7", "end": {"col": 33, "line": 31, "offset": 648}, "start": {"col": 28, "line": 31, "offset": 643}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 31, "offset": 627}, "start": {"col": 7, "line": 31, "offset": 622}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00405fc4_00405fc4.c", "start": {"col": 7, "line": 31, "offset": 622}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 18, "offset": 302}, "extra": {"engine_kind": "OSS", "fingerprint": "210e7a5e772d8d8697c660c1fe9b0c585ff3e38f09aacd67b5c5fea1fcaa20e858baa00bc976da5aa4d59ca56825e95624af2e6827665d387bf690d64da7c588_0", "is_ignored": false, "lines": "  iVar2 = read(param_1,local_1028,0x1000);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "read", "end": {"col": 15, "line": 18, "offset": 275}, "start": {"col": 11, "line": 18, "offset": 271}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00406210_00406210.c", "start": {"col": 11, "line": 18, "offset": 271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 18, "offset": 302}, "extra": {"engine_kind": "OSS", "fingerprint": "17cc6bca94f32c687d0ddfa16f6b89170bf4d970453de52945e8cd4626a200419d3c3d46b98a8be0e9a764fbe606ba79ef886cbfd4956c47b8257a8093a0176a_0", "is_ignored": false, "lines": "  iVar2 = read(param_1,local_1028,0x1000);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$BUF": {"abstract_content": "local_1028", "end": {"col": 34, "line": 18, "offset": 294}, "start": {"col": 24, "line": 18, "offset": 284}}, "$FD": {"abstract_content": "param_1", "end": {"col": 23, "line": 18, "offset": 283}, "start": {"col": 16, "line": 18, "offset": 276}}, "$LEN": {"abstract_content": "0x1000", "end": {"col": 41, "line": 18, "offset": 301}, "start": {"col": 35, "line": 18, "offset": 295}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00406210_00406210.c", "start": {"col": 11, "line": 18, "offset": 271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 34, "line": 33, "offset": 901}, "extra": {"engine_kind": "OSS", "fingerprint": "574c6b1a17c483aae62aa8d9c48699e2d47fa4eb0e11628333667810996010f96fd8009d21dfd125fa7237ff11b4a265322245ce99d6f8671c1e16552244ddd5_0", "is_ignored": false, "lines": "    sVar1 = *(short *)(piVar3 + 1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "1", "end": {"col": 34, "line": 33, "offset": 901}, "start": {"col": 33, "line": 33, "offset": 900}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 10, "line": 33, "offset": 877}, "start": {"col": 5, "line": 33, "offset": 872}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00406210_00406210.c", "start": {"col": 5, "line": 33, "offset": 872}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 20, "offset": 390}, "extra": {"engine_kind": "OSS", "fingerprint": "194b1e949f1e6928d15c1067981512f86cf539f32187a4dce30fe8431b64f6eb94c957f104751bd31417bbc9a9a0bc3c0371142e639be2f67df704636bb2b5b8_0", "is_ignored": false, "lines": "  __stream = fopen(param_2,\"r\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 19, "line": 20, "offset": 377}, "start": {"col": 14, "line": 20, "offset": 372}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00406464_00406464.c", "start": {"col": 14, "line": 20, "offset": 372}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 26, "offset": 565}, "extra": {"engine_kind": "OSS", "fingerprint": "78e833c184142d1f500faa6a398ea9e18b2ee19e5b523d13ea9567066ff338cef6fa9dc300ec65e9ba9e8707635a78e374c016c0fadf4a4d13c06195fed0ecb7_0", "is_ignored": false, "lines": "    while (pcVar2 = fgets(acStack_13c,0x100,__stream), pcVar2 != (char *)0x0) {", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$1": {"abstract_content": "s", "end": {"col": 5, "line": 2, "offset": 5}, "start": {"col": 4, "line": 2, "offset": 4}}, "$FUN": {"abstract_content": "fgets", "end": {"col": 26, "line": 26, "offset": 537}, "start": {"col": 21, "line": 26, "offset": 532}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00406464_00406464.c", "start": {"col": 21, "line": 26, "offset": 532}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 70, "line": 28, "offset": 681}, "extra": {"engine_kind": "OSS", "fingerprint": "19789cffb077d8188298d9f0160a5dbb239ac714117ed1441853d10db1e8a1fb4ac9b7194bd4fb0fad33d5ad3ec352392b956ea958af01a1e8ba8f7f04ec983e_0", "is_ignored": false, "lines": "      iVar1 = sscanf(acStack_13c,\"%10s %15s\",acStack_16c,acStack_160);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sscanf", "end": {"col": 21, "line": 28, "offset": 632}, "start": {"col": 15, "line": 28, "offset": 626}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00406464_00406464.c", "start": {"col": 15, "line": 28, "offset": 626}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 28, "line": 17, "offset": 258}, "extra": {"engine_kind": "OSS", "fingerprint": "a10f7a61079bbe0e33c340bc8394ed352acdeb06a50799aefa69306fe550e1bfc95f417dc207a774e5a0c131f8dcb2309487e153a638d48ace87f8a35fb7d10d_0", "is_ignored": false, "lines": "      sprintf(param_2,\"%x\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 14, "line": 17, "offset": 244}, "start": {"col": 7, "line": 17, "offset": 237}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00407108_00407108.c", "start": {"col": 7, "line": 17, "offset": 237}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-incorrect-use-of-sprintf-snprintf", "end": {"col": 88, "line": 20, "offset": 364}, "extra": {"engine_kind": "OSS", "fingerprint": "3528de892b235b35a906aca36a5dc813e8446b934c5e22a7e0cb82ed190ec2fc8c6b3687aaf1c84c3834d0d3d7469ea710eaa3cf9db67a9a13f6f36d5c24187f_0", "is_ignored": false, "lines": "      sprintf(param_2,\"%s:%x\",param_2,0xffff << (0x10U - iVar1 & 0x1f) & 0xffff,puVar3);", "message": "C standards specify that the results are undefined if a call to sprintf(), snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between objects that overlap (e.g., if the target string array and one of the supplied input arguments refer to the same buffer).", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://linux.die.net/man/3/sprintf"]}, "metavars": {"$DST": {"abstract_content": "param_2", "end": {"col": 22, "line": 20, "offset": 298}, "start": {"col": 15, "line": 20, "offset": 291}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00407108_00407108.c", "start": {"col": 7, "line": 20, "offset": 283}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 88, "line": 20, "offset": 364}, "extra": {"engine_kind": "OSS", "fingerprint": "4f8d256fb7a5af6e5b93b18bad7da9b3200e3f204e5c9436d36ca05c9f5a8766d8fd2b4f69b89bef88616a68c4363c13cd57a0b57e5afdc90bdf30ecf2e438fb_0", "is_ignored": false, "lines": "      sprintf(param_2,\"%s:%x\",param_2,0xffff << (0x10U - iVar1 & 0x1f) & 0xffff,puVar3);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"%s:%x\"", "end": {"col": 8, "line": 1, "offset": 7}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "param_2", "end": {"col": 22, "line": 20, "offset": 298}, "start": {"col": 15, "line": 20, "offset": 291}}, "$FMT": {"abstract_content": "\"%s:%x\"", "end": {"col": 30, "line": 20, "offset": 306}, "start": {"col": 23, "line": 20, "offset": 299}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00407108_00407108.c", "start": {"col": 7, "line": 20, "offset": 283}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 88, "line": 20, "offset": 364}, "extra": {"engine_kind": "OSS", "fingerprint": "a10f7a61079bbe0e33c340bc8394ed352acdeb06a50799aefa69306fe550e1bfc95f417dc207a774e5a0c131f8dcb2309487e153a638d48ace87f8a35fb7d10d_1", "is_ignored": false, "lines": "      sprintf(param_2,\"%s:%x\",param_2,0xffff << (0x10U - iVar1 & 0x1f) & 0xffff,puVar3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 14, "line": 20, "offset": 290}, "start": {"col": 7, "line": 20, "offset": 283}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00407108_00407108.c", "start": {"col": 7, "line": 20, "offset": 283}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 45, "line": 56, "offset": 1236}, "extra": {"engine_kind": "OSS", "fingerprint": "a0179a9b1a98cd11ac78f0ccc7b80c0d35e2bfdceaa224c2761f167c23565d1217e911ccd4010c6e211220a7822023d2df6631762a9534951b2988d156fe92a0_0", "is_ignored": false, "lines": "  __stream = fopen(\"/proc/net/if_inet6\",\"r\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 19, "line": 56, "offset": 1210}, "start": {"col": 14, "line": 56, "offset": 1205}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 14, "line": 56, "offset": 1205}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 66, "line": 92, "offset": 2314}, "extra": {"engine_kind": "OSS", "fingerprint": "b5c08a717d271b64487d02d99a4c528d95b0adf10482088a30d1a39a317310aca12e7ef365cf3236bc8d3a7049c85c2d18ec6bafc617a032563ddff688d44047_0", "is_ignored": false, "lines": "    while (iVar4 = fscanf(__stream,\"%4s%4s%4s%4s%4s%4s%4s%4s %02x %02x %02x %02x %8s\\n\",auStack_f4,\n                          auStack_ef,local_6c,local_68,local_64,local_60,local_5c,local_58,local_40,\n                          local_3c,local_38,local_34,acStack_150), iVar4 != -1) {", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fscanf", "end": {"col": 26, "line": 90, "offset": 2073}, "start": {"col": 20, "line": 90, "offset": 2067}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 20, "line": 90, "offset": 2067}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 95, "offset": 2466}, "extra": {"engine_kind": "OSS", "fingerprint": "bea799861f4de3b7ef78c73614d806914b0c2b58a72bfa640156f0f3a9d1d435463ed72dc6641ab726f0b6eece9eb64f969191b70b01f1b425382757be9c78bb_0", "is_ignored": false, "lines": "        memcpy(local_54,acStack_150,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 95, "offset": 2439}, "start": {"col": 9, "line": 95, "offset": 2433}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 95, "offset": 2433}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 95, "offset": 2466}, "extra": {"engine_kind": "OSS", "fingerprint": "17e9785baa0db52969bd33e5732d4898042076e6ac6000349529986964f97c680ab8762c2881938b0c7634e54e80c3cda0c1c022b2a01aa32c54cacf3cc4241f_0", "is_ignored": false, "lines": "        memcpy(local_54,acStack_150,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_54", "end": {"col": 24, "line": 95, "offset": 2448}, "start": {"col": 16, "line": 95, "offset": 2440}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 41, "line": 95, "offset": 2465}, "start": {"col": 37, "line": 95, "offset": 2461}}, "$SRC": {"abstract_content": "acStack_150", "end": {"col": 36, "line": 95, "offset": 2460}, "start": {"col": 25, "line": 95, "offset": 2449}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 95, "offset": 2433}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 96, "offset": 2499}, "extra": {"engine_kind": "OSS", "fingerprint": "a5e053191b0232c510b74e0ff563bccefba9d74e736d951cde83b9ed50b9c9d936040c5109850cd4e99822ac3b28d0be80ba7a9eb77da922ab7edf2390eeaebc_0", "is_ignored": false, "lines": "        __dest = calloc(1,0x38);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 24, "line": 96, "offset": 2491}, "start": {"col": 18, "line": 96, "offset": 2485}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 18, "line": 96, "offset": 2485}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 96, "offset": 2499}, "extra": {"engine_kind": "OSS", "fingerprint": "e952ccaf7468f6274bca065f2a029345c243223e022f3cc41df0a8a2346d0f881f5994c86b5f8cfc8653bd533a17813e5fcc92139ee8c8e2de7a75de14044062_0", "is_ignored": false, "lines": "        __dest = calloc(1,0x38);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 26, "line": 96, "offset": 2493}, "start": {"col": 25, "line": 96, "offset": 2492}}, "$LEN": {"abstract_content": "0x38", "end": {"col": 31, "line": 96, "offset": 2498}, "start": {"col": 27, "line": 96, "offset": 2494}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 18, "line": 96, "offset": 2485}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 44, "line": 102, "offset": 2774}, "extra": {"engine_kind": "OSS", "fingerprint": "b7fae6387365ef77232aff5b7c48b98a70b17cceea68b9538cbe99420be8845d3999ce450bd79da14ed545e3ad9eb69072441e3f7d66ca22c1fdeb3931d90569_0", "is_ignored": false, "lines": "        sprintf(__s,\"%s:%s:%s:%s:%s:%s:%s:%s\",auStack_f4,auStack_ef,local_6c,local_68,local_64,\n                local_60,local_5c,local_58);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "\"%s:%s:%s:%s:%s:%s:%s:%s\"", "end": {"col": 26, "line": 1, "offset": 25}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "__s", "end": {"col": 20, "line": 101, "offset": 2654}, "propagated_value": {"svalue_abstract_content": "local_50", "svalue_end": {"col": 23, "line": 97, "offset": 2523}, "svalue_start": {"col": 15, "line": 97, "offset": 2515}}, "start": {"col": 17, "line": 101, "offset": 2651}}, "$FMT": {"abstract_content": "\"%s:%s:%s:%s:%s:%s:%s:%s\"", "end": {"col": 46, "line": 101, "offset": 2680}, "start": {"col": 21, "line": 101, "offset": 2655}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 101, "offset": 2643}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 102, "offset": 2774}, "extra": {"engine_kind": "OSS", "fingerprint": "904501c2da133855ea284104ac30588f175467254aded269eb550b080379efda6e8f6a8df54ad6e821580f3d0997f8f86622d88d410f1de41ce5a87c707f237e_0", "is_ignored": false, "lines": "        sprintf(__s,\"%s:%s:%s:%s:%s:%s:%s:%s\",auStack_f4,auStack_ef,local_6c,local_68,local_64,\n                local_60,local_5c,local_58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 16, "line": 101, "offset": 2650}, "start": {"col": 9, "line": 101, "offset": 2643}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 101, "offset": 2643}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 103, "offset": 2807}, "extra": {"engine_kind": "OSS", "fingerprint": "2cbd5a36fff48b6f9ebd92c266fb86304927c37025b10bbecd44192343968d3a6314692c61da7aeb3c727cf73a7ec86381ac03b0936acad8712b2fda99bb3c52_0", "is_ignored": false, "lines": "        memset(local_4c,0,0x20);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 103, "offset": 2801}, "start": {"col": 25, "line": 103, "offset": 2800}}, "$DST": {"abstract_content": "local_4c", "end": {"col": 24, "line": 103, "offset": 2799}, "start": {"col": 16, "line": 103, "offset": 2791}}, "$LEN": {"abstract_content": "0x20", "end": {"col": 31, "line": 103, "offset": 2806}, "start": {"col": 27, "line": 103, "offset": 2802}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 103, "offset": 2784}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 35, "line": 108, "offset": 3021}, "extra": {"engine_kind": "OSS", "fingerprint": "a5e053191b0232c510b74e0ff563bccefba9d74e736d951cde83b9ed50b9c9d936040c5109850cd4e99822ac3b28d0be80ba7a9eb77da922ab7edf2390eeaebc_1", "is_ignored": false, "lines": "        __dest_00 = calloc(1,0x1c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 27, "line": 108, "offset": 3013}, "start": {"col": 21, "line": 108, "offset": 3007}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 21, "line": 108, "offset": 3007}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 35, "line": 108, "offset": 3021}, "extra": {"engine_kind": "OSS", "fingerprint": "78971f555a6a70429f13cc449bf0e585fefc17265c7f182ca29b65021f361945a97ca41cdc1998fb0b72f40d630a48bf939ea9b3f5c7ea4b43e407c60ba94a9c_0", "is_ignored": false, "lines": "        __dest_00 = calloc(1,0x1c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 29, "line": 108, "offset": 3015}, "start": {"col": 28, "line": 108, "offset": 3014}}, "$LEN": {"abstract_content": "0x1c", "end": {"col": 34, "line": 108, "offset": 3020}, "start": {"col": 30, "line": 108, "offset": 3016}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 21, "line": 108, "offset": 3007}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 111, "offset": 3181}, "extra": {"engine_kind": "OSS", "fingerprint": "bea799861f4de3b7ef78c73614d806914b0c2b58a72bfa640156f0f3a9d1d435463ed72dc6641ab726f0b6eece9eb64f969191b70b01f1b425382757be9c78bb_1", "is_ignored": false, "lines": "        memcpy(__dest_00,local_154->ai_addr,0x1c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 111, "offset": 3146}, "start": {"col": 9, "line": 111, "offset": 3140}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 111, "offset": 3140}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 111, "offset": 3181}, "extra": {"engine_kind": "OSS", "fingerprint": "ee5ffbeaaabbd224dba8253a58b4800b57a09e75bb4e237b7b1729ec41f38c4ccc400f0dabe739fdcc315fc32f81e8f78e6725add4fbcc87b62eaf5629550023_0", "is_ignored": false, "lines": "        memcpy(__dest_00,local_154->ai_addr,0x1c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest_00", "end": {"col": 25, "line": 111, "offset": 3156}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x1c)", "svalue_end": {"col": 35, "line": 108, "offset": 3021}, "svalue_start": {"col": 21, "line": 108, "offset": 3007}}, "start": {"col": 16, "line": 111, "offset": 3147}}, "$LEN": {"abstract_content": "0x1c", "end": {"col": 49, "line": 111, "offset": 3180}, "start": {"col": 45, "line": 111, "offset": 3176}}, "$SRC": {"abstract_content": "local_154->->ai_addr", "end": {"col": 44, "line": 111, "offset": 3175}, "start": {"col": 26, "line": 111, "offset": 3157}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 111, "offset": 3140}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 46, "line": 113, "offset": 3270}, "extra": {"engine_kind": "OSS", "fingerprint": "a5e053191b0232c510b74e0ff563bccefba9d74e736d951cde83b9ed50b9c9d936040c5109850cd4e99822ac3b28d0be80ba7a9eb77da922ab7edf2390eeaebc_2", "is_ignored": false, "lines": "        puVar2 = (undefined2 *)calloc(1,0x1c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 38, "line": 113, "offset": 3262}, "start": {"col": 32, "line": 113, "offset": 3256}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 32, "line": 113, "offset": 3256}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 46, "line": 113, "offset": 3270}, "extra": {"engine_kind": "OSS", "fingerprint": "78971f555a6a70429f13cc449bf0e585fefc17265c7f182ca29b65021f361945a97ca41cdc1998fb0b72f40d630a48bf939ea9b3f5c7ea4b43e407c60ba94a9c_1", "is_ignored": false, "lines": "        puVar2 = (undefined2 *)calloc(1,0x1c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 40, "line": 113, "offset": 3264}, "start": {"col": 39, "line": 113, "offset": 3263}}, "$LEN": {"abstract_content": "0x1c", "end": {"col": 45, "line": 113, "offset": 3269}, "start": {"col": 41, "line": 113, "offset": 3265}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 32, "line": 113, "offset": 3256}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 120, "offset": 3591}, "extra": {"engine_kind": "OSS", "fingerprint": "bea799861f4de3b7ef78c73614d806914b0c2b58a72bfa640156f0f3a9d1d435463ed72dc6641ab726f0b6eece9eb64f969191b70b01f1b425382757be9c78bb_2", "is_ignored": false, "lines": "        memcpy(__dest,acStack_150,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 120, "offset": 3566}, "start": {"col": 9, "line": 120, "offset": 3560}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 120, "offset": 3560}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 40, "line": 120, "offset": 3591}, "extra": {"engine_kind": "OSS", "fingerprint": "c2f1230bec92e98c985f8cffc5abd55e035c5dc233ce0e1d50057053f57cf8f7354827a2603d7d850be867acf72418ee77ad916138d0f6c8d6f2a886e5081f22_0", "is_ignored": false, "lines": "        memcpy(__dest,acStack_150,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest", "end": {"col": 22, "line": 120, "offset": 3573}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x38)", "svalue_end": {"col": 32, "line": 96, "offset": 2499}, "svalue_start": {"col": 18, "line": 96, "offset": 2485}}, "start": {"col": 16, "line": 120, "offset": 3567}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 39, "line": 120, "offset": 3590}, "start": {"col": 35, "line": 120, "offset": 3586}}, "$SRC": {"abstract_content": "acStack_150", "end": {"col": 34, "line": 120, "offset": 3585}, "start": {"col": 23, "line": 120, "offset": 3574}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 120, "offset": 3560}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 122, "offset": 3691}, "extra": {"engine_kind": "OSS", "fingerprint": "bea799861f4de3b7ef78c73614d806914b0c2b58a72bfa640156f0f3a9d1d435463ed72dc6641ab726f0b6eece9eb64f969191b70b01f1b425382757be9c78bb_3", "is_ignored": false, "lines": "        memcpy(local_70,acStack_150,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 122, "offset": 3664}, "start": {"col": 9, "line": 122, "offset": 3658}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 122, "offset": 3658}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 122, "offset": 3691}, "extra": {"engine_kind": "OSS", "fingerprint": "5969363a87463bd84e1a35d6343b37465352e764ef623942339b04187e11a6a6ad1972e0e3a332026a7ee52904bcbf628836879e201a7def5474b0c917ad896d_0", "is_ignored": false, "lines": "        memcpy(local_70,acStack_150,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_70", "end": {"col": 24, "line": 122, "offset": 3673}, "propagated_value": {"svalue_abstract_content": "auStack_114", "svalue_end": {"col": 31, "line": 116, "offset": 3417}, "svalue_start": {"col": 20, "line": 116, "offset": 3406}}, "start": {"col": 16, "line": 122, "offset": 3665}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 41, "line": 122, "offset": 3690}, "start": {"col": 37, "line": 122, "offset": 3686}}, "$SRC": {"abstract_content": "acStack_150", "end": {"col": 36, "line": 122, "offset": 3685}, "start": {"col": 25, "line": 122, "offset": 3674}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004071f8_004071f8.c", "start": {"col": 9, "line": 122, "offset": 3658}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 60, "line": 8, "offset": 186}, "extra": {"engine_kind": "OSS", "fingerprint": "e2be6d9c93f047e749264c2edbf4a9a8b8e317c3d892dc0d805b1e562ef86886c22e084360d584eae1609227f1719e6e92665ab71c4cf3f19c1b16d0a5facfe4_0", "is_ignored": false, "lines": "  iVar1 = mDNS_vsnprintf(auStack_210,0x200,param_2,param_3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_vsnprintf", "end": {"col": 25, "line": 8, "offset": 151}, "start": {"col": 11, "line": 8, "offset": 137}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00407c70_00407c70.c", "start": {"col": 11, "line": 8, "offset": 137}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 35, "line": 13, "offset": 295}, "extra": {"engine_kind": "OSS", "fingerprint": "2e008b96de35c1b8504cf0a0613bf2d0c92a8329965217d8fd49c7c536fb94766367f94d431dc2cab0d6fe3366d643903b792f5110d50b8519fe2aebb99d5ee9_0", "is_ignored": false, "lines": "  cVar1 = *(char *)(param_2 + 0x34);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 28, "line": 13, "offset": 288}, "start": {"col": 21, "line": 13, "offset": 281}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 8, "line": 13, "offset": 268}, "start": {"col": 3, "line": 13, "offset": 263}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040b388_0040b388.c", "start": {"col": 3, "line": 13, "offset": 263}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 36, "offset": 1301}, "extra": {"engine_kind": "OSS", "fingerprint": "6fb77462574a2eda88cf5f23537b178b4865cd59e85075cbe6e61dd9430902d9a6b33efdc2d1c9bd01ec081ed2195b34df8bec83861773d9173b95cc197647c9_0", "is_ignored": false, "lines": "      cVar1 = *(char *)(param_3 + 4);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_3", "end": {"col": 32, "line": 36, "offset": 1297}, "start": {"col": 25, "line": 36, "offset": 1290}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 12, "line": 36, "offset": 1277}, "start": {"col": 7, "line": 36, "offset": 1272}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040ddc4_0040ddc4.c", "start": {"col": 7, "line": 36, "offset": 1272}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 49, "line": 25, "offset": 722}, "extra": {"engine_kind": "OSS", "fingerprint": "035b2c68f96309cf6e3133958d337a2ca44174f7d338f83df300523a343054f6265ddd60c8ac1a4833c269330d8c4f460fe9924fdd875a055266d037c94cb442_0", "is_ignored": false, "lines": "    memcpy((void *)(local_37c + 8),param_4,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 25, "offset": 684}, "start": {"col": 5, "line": 25, "offset": 678}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040e3f4_0040e3f4.c", "start": {"col": 5, "line": 25, "offset": 678}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 25, "offset": 722}, "extra": {"engine_kind": "OSS", "fingerprint": "e0e7a1af5303331fa730aa2ebd22066247079cc9dc686ff7c24642437e569846ce86ef9254f8d465cde9020193891bc858b89317cb7e31f0191b16f20f04e32b_0", "is_ignored": false, "lines": "    memcpy((void *)(local_37c + 8),param_4,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*local_37c+8", "end": {"col": 34, "line": 25, "offset": 707}, "start": {"col": 12, "line": 25, "offset": 685}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 48, "line": 25, "offset": 721}, "start": {"col": 44, "line": 25, "offset": 717}}, "$SRC": {"abstract_content": "param_4", "end": {"col": 43, "line": 25, "offset": 716}, "start": {"col": 36, "line": 25, "offset": 709}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040e3f4_0040e3f4.c", "start": {"col": 5, "line": 25, "offset": 678}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 41, "line": 20, "offset": 481}, "extra": {"engine_kind": "OSS", "fingerprint": "da55ab5497388ebdbc35e90a66d7fbb95ce61a9633beea09ead7580cf9f02761d06c45b410f023cf9215de09057a895bfa9293cae4fbef7cf9f5b78b2e9842b9_0", "is_ignored": false, "lines": "      sVar1 = *(short *)(param_2 + 0x120);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 33, "line": 20, "offset": 473}, "start": {"col": 26, "line": 20, "offset": 466}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 20, "offset": 452}, "start": {"col": 7, "line": 20, "offset": 447}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040e578_0040e578.c", "start": {"col": 7, "line": 20, "offset": 447}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 16, "line": 21, "offset": 563}, "extra": {"engine_kind": "OSS", "fingerprint": "16572d4c773555920b80e64966e517d3b8b0e4984a7314dd1e5f06bb91383e7d042761e976ae000ca8219e5ac36bb89d0c28866fe8bc14dc659962ceecbcb154_0", "is_ignored": false, "lines": "    param_2 = 3;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "3", "end": {"col": 16, "line": 21, "offset": 563}, "start": {"col": 15, "line": 21, "offset": 562}}, "$NARROW": {"abstract_content": "param_2", "end": {"col": 12, "line": 21, "offset": 559}, "start": {"col": 5, "line": 21, "offset": 552}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040e998_0040e998.c", "start": {"col": 5, "line": 21, "offset": 552}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 18, "line": 23, "offset": 612}, "extra": {"engine_kind": "OSS", "fingerprint": "a12c02510425ae4b515b46a88cb333f17595082efa320128c4b14c8a1ad6426ff850d1ec0d8ca099ffbf61b3c1a7890af3ce6a29007cbf1b68277fdbd8a67ab2_0", "is_ignored": false, "lines": "      param_2 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 18, "line": 23, "offset": 612}, "start": {"col": 17, "line": 23, "offset": 611}}, "$NARROW": {"abstract_content": "param_2", "end": {"col": 14, "line": 23, "offset": 608}, "start": {"col": 7, "line": 23, "offset": 601}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0040e998_0040e998.c", "start": {"col": 7, "line": 23, "offset": 601}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-wraparound", "end": {"col": 55, "line": 28, "offset": 1024}, "extra": {"engine_kind": "OSS", "fingerprint": "1552cadceb4162564e82f2f77fc2c1bc5e1f239958caf7f7220c420ce04cc1d2cba3ce543a4a4a4be13357ff32ed19cc4b019e52eddec11ed2094ea1ae6253ef_0", "is_ignored": false, "lines": "          if (((uVar3 <= uVar4) && (uVar3 + 2 <= uVar4)) && (uVar3 + 4 <= uVar4)) {", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/190", "https://cwe.mitre.org/data/definitions/128", "https://cwe.mitre.org/data/definitions/131", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples", "https://dustri.org/b/playing-with-weggli.html"]}, "metavars": {"$MAX": {"abstract_content": "uVar4", "end": {"col": 31, "line": 28, "offset": 1000}, "propagated_value": {"svalue_abstract_content": "iVar5+uint*(ushort*param_1+0x7fb8+4", "svalue_end": {"col": 64, "line": 22, "offset": 690}, "svalue_start": {"col": 17, "line": 22, "offset": 643}}, "start": {"col": 26, "line": 28, "offset": 995}}, "$X": {"abstract_content": "uVar3", "end": {"col": 22, "line": 28, "offset": 991}, "propagated_value": {"svalue_abstract_content": "iVar5+0xeU+uint*(ushort*iVar5+0xc", "svalue_end": {"col": 63, "line": 27, "offset": 967}, "svalue_start": {"col": 19, "line": 27, "offset": 923}}, "start": {"col": 17, "line": 28, "offset": 986}}, "$Y": {"abstract_content": "2", "end": {"col": 46, "line": 28, "offset": 1015}, "start": {"col": 45, "line": 28, "offset": 1014}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00410730_00410730.c", "start": {"col": 17, "line": 28, "offset": 986}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 84, "line": 54, "offset": 2097}, "extra": {"engine_kind": "OSS", "fingerprint": "e26ffdfb15aaab69ba913913fb5ecf29e9bb8018ee8dda92e749ba7b3834ad4761251ec4ccbbcb6976398a6c4dff392b09d84e22d99a0154768de4fed87aa222_0", "is_ignored": false, "lines": "    memcpy((void *)(*(int *)(param_2 + 0x4f4) + 4),(void *)(param_1 + 0x21c4),0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 54, "offset": 2024}, "start": {"col": 5, "line": 54, "offset": 2018}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00410980_00410980.c", "start": {"col": 5, "line": 54, "offset": 2018}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 84, "line": 54, "offset": 2097}, "extra": {"engine_kind": "OSS", "fingerprint": "3eb8e990a4d9994363799ff6a8540f74e689faba60048cbd04aa6466f6b59f58f5e8ed7bc5cbac3cb8e0e6c2bd495d647884a61b858779547fc1bf9d20240cf2_0", "is_ignored": false, "lines": "    memcpy((void *)(*(int *)(param_2 + 0x4f4) + 4),(void *)(param_1 + 0x21c4),0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void**(int*param_2+0x4f4+4", "end": {"col": 50, "line": 54, "offset": 2063}, "start": {"col": 12, "line": 54, "offset": 2025}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 83, "line": 54, "offset": 2096}, "start": {"col": 79, "line": 54, "offset": 2092}}, "$SRC": {"abstract_content": "(void*param_1+0x21c4", "end": {"col": 77, "line": 54, "offset": 2090}, "start": {"col": 52, "line": 54, "offset": 2065}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00410980_00410980.c", "start": {"col": 5, "line": 54, "offset": 2018}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 78, "offset": 1830}, "extra": {"engine_kind": "OSS", "fingerprint": "153530e5ba7381efbbe458c206d4b5d4385b59aff7f52c0c6a6df3f556ad19fb1c564bce894229f2579c5318927a8631e44dc7c7fdd8b934ca7e6d0279bc4ba6_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x468),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 78, "offset": 1789}, "start": {"col": 3, "line": 78, "offset": 1783}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041213c_0041213c.c", "start": {"col": 3, "line": 78, "offset": 1783}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 78, "offset": 1830}, "extra": {"engine_kind": "OSS", "fingerprint": "e4fbaee23c49452dc12341639a2b8d966fa4561b7c8966b500f6d4ee6636caa5dccb8e8137ae218eed6268d70feaab5928c35fccf1b3efd4625eccf2312a115d_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x468),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x468", "end": {"col": 34, "line": 78, "offset": 1814}, "start": {"col": 10, "line": 78, "offset": 1790}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 78, "offset": 1829}, "start": {"col": 45, "line": 78, "offset": 1825}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 78, "offset": 1824}, "start": {"col": 36, "line": 78, "offset": 1816}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041213c_0041213c.c", "start": {"col": 3, "line": 78, "offset": 1783}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 42, "line": 18, "offset": 402}, "extra": {"engine_kind": "OSS", "fingerprint": "fee762a980fab3a66900b3e746369d6a810dcf80f21ff0a68161d0138bc86b968178694bf57f0abb735748b6ce4c274ba723a1addc05e9fb2f6d369bdb369cab_0", "is_ignored": false, "lines": "      (sVar1 = *(short *)(param_2 + 0x254), sVar1 != *(short *)(param_3 + 2))))) {", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 34, "line": 18, "offset": 394}, "start": {"col": 27, "line": 18, "offset": 387}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 13, "line": 18, "offset": 373}, "start": {"col": 8, "line": 18, "offset": 368}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004123b4_004123b4.c", "start": {"col": 8, "line": 18, "offset": 368}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 53, "offset": 1825}, "extra": {"engine_kind": "OSS", "fingerprint": "d869e8cad69b51f3dac54640f67c0adf1e622d79d87cb62f2b25ad7d7ddd3af6e16dca54be340fce250aa427f7e286162911ff8b202b5a6e048d2148688ef97b_0", "is_ignored": false, "lines": "      memcpy((void *)(iVar8 + 0x30c),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 53, "offset": 1786}, "start": {"col": 7, "line": 53, "offset": 1780}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004123b4_004123b4.c", "start": {"col": 7, "line": 53, "offset": 1780}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 53, "offset": 1825}, "extra": {"engine_kind": "OSS", "fingerprint": "07ea7a748226cbcb2f941dc4463ba2ca4a449b6ffa1d9218a00522e19726cccff1a8102f72af631c80fa8f75ac84d4748342641af53c13616fa8193f21a1d0c9_0", "is_ignored": false, "lines": "      memcpy((void *)(iVar8 + 0x30c),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*iVar8+0x30c", "end": {"col": 36, "line": 53, "offset": 1809}, "start": {"col": 14, "line": 53, "offset": 1787}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 51, "line": 53, "offset": 1824}, "start": {"col": 47, "line": 53, "offset": 1820}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 46, "line": 53, "offset": 1819}, "start": {"col": 38, "line": 53, "offset": 1811}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004123b4_004123b4.c", "start": {"col": 7, "line": 53, "offset": 1780}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 41, "line": 54, "offset": 2022}, "extra": {"engine_kind": "OSS", "fingerprint": "9b6f379e94ea8867997cf06e53338a9cfb2503693680e83e1bd6163f4436f9ea0466fc4abc76ef98de982414ae9c8435e7852cd129875d9308301e3369a23287_0", "is_ignored": false, "lines": "            sVar1 = *(short *)(iVar5 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "iVar5", "end": {"col": 37, "line": 54, "offset": 2018}, "start": {"col": 32, "line": 54, "offset": 2013}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 18, "line": 54, "offset": 1999}, "start": {"col": 13, "line": 54, "offset": 1994}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00412fa0_00412fa0.c", "start": {"col": 13, "line": 54, "offset": 1994}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 35, "offset": 675}, "extra": {"engine_kind": "OSS", "fingerprint": "eb79ac629cb460ea792c2a13c7f31725b005ec6c8a69aa8d3ed532f13fc936e148132ab17a7e1157e87f8f102ad4eaba5d645003ec000012cf9121ab5c689566_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_2[9] + 8);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "9", "end": {"col": 31, "line": 35, "offset": 670}, "start": {"col": 30, "line": 35, "offset": 669}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 35, "offset": 647}, "start": {"col": 3, "line": 35, "offset": 642}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041347c_0041347c.c", "start": {"col": 3, "line": 35, "offset": 642}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 97, "offset": 3056}, "extra": {"engine_kind": "OSS", "fingerprint": "db618ec364ac63509221df176a1af9ece4815914999c14f0d2a9b8c7ea2dff8b0d67d38dc554ce39b9c5a82e0eb6df4052d587714a5cf330317acefe9a5a3528_0", "is_ignored": false, "lines": "            memcpy(auStack_40,param_2 + 0x8c3,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 97, "offset": 3023}, "start": {"col": 13, "line": 97, "offset": 3017}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00413aec_00413aec.c", "start": {"col": 13, "line": 97, "offset": 3017}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 97, "offset": 3056}, "extra": {"engine_kind": "OSS", "fingerprint": "e60cf5e1dbc788ab2a4bfe99211250f5dd962379b4a5759d47167902a5b622b3fc7a42e1e0dfca813dcd3269ad3c0597a304d92c6f2a2f2229a42b833e2079eb_0", "is_ignored": false, "lines": "            memcpy(auStack_40,param_2 + 0x8c3,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_40", "end": {"col": 30, "line": 97, "offset": 3034}, "start": {"col": 20, "line": 97, "offset": 3024}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 51, "line": 97, "offset": 3055}, "start": {"col": 47, "line": 97, "offset": 3051}}, "$SRC": {"abstract_content": "param_2+0x8c3", "end": {"col": 46, "line": 97, "offset": 3050}, "start": {"col": 31, "line": 97, "offset": 3035}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00413aec_00413aec.c", "start": {"col": 13, "line": 97, "offset": 3017}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 35, "offset": 1012}, "extra": {"engine_kind": "OSS", "fingerprint": "a0d6675c9cc40a963d88499d51910dfe3eff31a669978c91483beb4f959629587d01bd04143a0c73b885e621a461239210f6e1f45564b907434f15ff28270940_0", "is_ignored": false, "lines": "      memcpy(__ptr + 0x8c3,param_5,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 35, "offset": 984}, "start": {"col": 7, "line": 35, "offset": 978}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041447c_0041447c.c", "start": {"col": 7, "line": 35, "offset": 978}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 41, "line": 35, "offset": 1012}, "extra": {"engine_kind": "OSS", "fingerprint": "26ac74e949e0b1789dfe46df530f35faadc2002d77dc429ce79b2e6aceec64749496001750c8d66ebee765b964d57ac76d1f1b6545b7461a66ff1d7d63d688ae_0", "is_ignored": false, "lines": "      memcpy(__ptr + 0x8c3,param_5,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__ptr+0x8c3", "end": {"col": 27, "line": 35, "offset": 998}, "start": {"col": 14, "line": 35, "offset": 985}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 40, "line": 35, "offset": 1011}, "start": {"col": 36, "line": 35, "offset": 1007}}, "$SRC": {"abstract_content": "param_5", "end": {"col": 35, "line": 35, "offset": 1006}, "start": {"col": 28, "line": 35, "offset": 999}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041447c_0041447c.c", "start": {"col": 7, "line": 35, "offset": 978}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 27, "line": 7, "offset": 123}, "extra": {"engine_kind": "OSS", "fingerprint": "1d916d3dcd2116a56d405896f477bf0df86fc6806c7f55a24aea868eec5ca5a2ba99a5618f42dc4453d3534fa9be39a41c37ca1542a5d8d1bfa32477c83828a6_0", "is_ignored": false, "lines": "    param_2 = param_2 + -1;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "-1", "end": {"col": 27, "line": 7, "offset": 123}, "start": {"col": 25, "line": 7, "offset": 121}}, "$NARROW": {"abstract_content": "param_2", "end": {"col": 12, "line": 7, "offset": 108}, "start": {"col": 5, "line": 7, "offset": 101}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041a18c_0041a18c.c", "start": {"col": 5, "line": 7, "offset": 101}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 46, "line": 21, "offset": 354}, "extra": {"engine_kind": "OSS", "fingerprint": "70e3cc64d31850fd9f45e9b54a2036d38b31c9d14915f98c5cbf40b1eb05e50f3b09fd04ecd149c9054cfe28063a5c20e65ec1414ec27b643960247cdfee1078_0", "is_ignored": false, "lines": "    mDNS_snprintf(&DAT_0046e7c8,0x10,\"ALG%d\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 18, "line": 21, "offset": 326}, "start": {"col": 5, "line": 21, "offset": 313}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041ca04_0041ca04.c", "start": {"col": 5, "line": 21, "offset": 313}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 33, "line": 10, "offset": 167}, "extra": {"engine_kind": "OSS", "fingerprint": "2e0a53e8d9f0ca5f9978ca4c7cb7c101806d04b9d2efee7a565a56593f20d9c665cb1ab7fba964fafc4b7f068f818e2d08f8fa32702b9a6a86e20e7f0f8eefdb_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_1 + 2);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 29, "line": 10, "offset": 163}, "start": {"col": 22, "line": 10, "offset": 156}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 10, "offset": 142}, "start": {"col": 3, "line": 10, "offset": 137}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041d1e8_0041d1e8.c", "start": {"col": 3, "line": 10, "offset": 137}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 37, "line": 11, "offset": 206}, "extra": {"engine_kind": "OSS", "fingerprint": "b76517ef740149e7a3735480a75710ce24aabdc0dc169bcf88151d60b6d5f1657497abdeddabf284019ded7e4d39c08abca0dd1d6c078bd3b9d4a857bbcdf60f_0", "is_ignored": false, "lines": "  sVar2 = *(short *)(param_2 + 0x254);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 29, "line": 11, "offset": 198}, "start": {"col": 22, "line": 11, "offset": 191}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 8, "line": 11, "offset": 177}, "start": {"col": 3, "line": 11, "offset": 172}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041d1e8_0041d1e8.c", "start": {"col": 3, "line": 11, "offset": 172}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 56, "line": 18, "offset": 432}, "extra": {"engine_kind": "OSS", "fingerprint": "2e0a53e8d9f0ca5f9978ca4c7cb7c101806d04b9d2efee7a565a56593f20d9c665cb1ab7fba964fafc4b7f068f818e2d08f8fa32702b9a6a86e20e7f0f8eefdb_1", "is_ignored": false, "lines": "        sVar1 = *(short *)(*(int *)(param_1 + 0x20) + 4);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 44, "line": 18, "offset": 420}, "start": {"col": 37, "line": 18, "offset": 413}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 14, "line": 18, "offset": 390}, "start": {"col": 9, "line": 18, "offset": 385}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041d1e8_0041d1e8.c", "start": {"col": 9, "line": 18, "offset": 385}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 77, "line": 35, "offset": 940}, "extra": {"engine_kind": "OSS", "fingerprint": "85be6852b05897af25e43ff8770c85ce82cf0f032268e6480b365511b9c2a4c3a8db45b56e208cc12dc2ddb3ded4580effcbfe15a2fd2cf00cc056fe8ca34df2_0", "is_ignored": false, "lines": "        iVar3 = mDNS_snprintf(param_3 + param_4,0x1ff - param_4,\"%s \",uVar2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 30, "line": 35, "offset": 893}, "start": {"col": 17, "line": 35, "offset": 880}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041e054_0041e054.c", "start": {"col": 17, "line": 35, "offset": 880}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 365, "offset": 13472}, "extra": {"engine_kind": "OSS", "fingerprint": "918fd12dc1d45f8b594d97947ea27989368c0b3ec3ca31ad46c4d21d6a2cdab35683a751e53f7fc052e3db7ddacd324469cbac1632386449ed97d3cb7cd1f498_0", "is_ignored": false, "lines": "                  __n = (int)puVar10 - (int)param_2;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "(int puVar10", "end": {"col": 37, "line": 365, "offset": 13457}, "start": {"col": 25, "line": 365, "offset": 13445}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 22, "line": 365, "offset": 13442}, "start": {"col": 19, "line": 365, "offset": 13439}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0041e5b0_0041e5b0.c", "start": {"col": 19, "line": 365, "offset": 13439}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 56, "line": 21, "offset": 479}, "extra": {"engine_kind": "OSS", "fingerprint": "7b6ae6be4fce42238ff922d200e2f25f9074388465b269c3351c1f5359fb52937ada87cb1e92706d5cf39d07ec619f598bbb47b302d36c1d6ccd8b148fd13d6e_0", "is_ignored": false, "lines": "      uVar3 = mDNS_snprintf(param_1,param_2,\"%s\",iVar2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 28, "line": 21, "offset": 451}, "start": {"col": 15, "line": 21, "offset": 438}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00422460_00422460.c", "start": {"col": 15, "line": 21, "offset": 438}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 48, "line": 15, "offset": 304}, "extra": {"engine_kind": "OSS", "fingerprint": "0acafc5f1a83d20868c84a68bed1a2ef581cca27aeb3a646a366f10ab519f652c0a0cebfbe0c42e882e6e2c60b7b2b044eb07aed2056df916eef9e961b428e24_0", "is_ignored": false, "lines": "      pcVar4 = fgets(acStack_430,0x412,param_3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$1": {"abstract_content": "s", "end": {"col": 5, "line": 2, "offset": 5}, "start": {"col": 4, "line": 2, "offset": 4}}, "$FUN": {"abstract_content": "fgets", "end": {"col": 21, "line": 15, "offset": 277}, "start": {"col": 16, "line": 15, "offset": 272}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004247f0_004247f0.c", "start": {"col": 16, "line": 15, "offset": 272}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 49, "line": 19, "offset": 415}, "extra": {"engine_kind": "OSS", "fingerprint": "b177078fb9227b0428784bf0c87c9ee8e626bd9e034e24371bbafd3a0abd06dce91077273de1ecf4ee276721c7705fc0921f9cf7fcd59378a3b2b36adc59a904_0", "is_ignored": false, "lines": "      iVar3 = strncmp(acStack_430,param_2,sVar1);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar3", "end": {"col": 12, "line": 19, "offset": 378}, "start": {"col": 7, "line": 19, "offset": 373}}, "$UNSIGNED": {"abstract_content": "sVar1", "end": {"col": 48, "line": 19, "offset": 414}, "propagated_value": {"svalue_abstract_content": "strlen(param_2)", "svalue_end": {"col": 26, "line": 11, "offset": 191}, "svalue_start": {"col": 11, "line": 11, "offset": 176}}, "start": {"col": 43, "line": 19, "offset": 409}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004247f0_004247f0.c", "start": {"col": 7, "line": 19, "offset": 373}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 21, "offset": 493}, "extra": {"engine_kind": "OSS", "fingerprint": "f50496a7a8abd77143c1c80ce9ad47b2aba905c04c97044a92a8114056f5a22a6f65aa801a99fc693cc0b0e1ca1a603cb0652a3a0eb6450caa84c00ae234fdbf_0", "is_ignored": false, "lines": "    strncpy(param_1,acStack_430 + sVar1 + 1,0x3f0);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 12, "line": 21, "offset": 454}, "start": {"col": 5, "line": 21, "offset": 447}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004247f0_004247f0.c", "start": {"col": 5, "line": 21, "offset": 447}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 21, "offset": 493}, "extra": {"engine_kind": "OSS", "fingerprint": "eda212ee72363c658f789aa1f81cfafbed98800749523014858aa47ab4df18ce39b68280cc0842e3fd2620b90ae545c16b4b123625fa202867dd42e629d9389b_0", "is_ignored": false, "lines": "    strncpy(param_1,acStack_430 + sVar1 + 1,0x3f0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_1", "end": {"col": 20, "line": 21, "offset": 462}, "start": {"col": 13, "line": 21, "offset": 455}}, "$LEN": {"abstract_content": "0x3f0", "end": {"col": 50, "line": 21, "offset": 492}, "start": {"col": 45, "line": 21, "offset": 487}}, "$SRC": {"abstract_content": "acStack_430+sVar1+1", "end": {"col": 44, "line": 21, "offset": 486}, "start": {"col": 21, "line": 21, "offset": 463}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004247f0_004247f0.c", "start": {"col": 5, "line": 21, "offset": 447}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 14, "offset": 290}, "extra": {"engine_kind": "OSS", "fingerprint": "ebdf72e5228c99be49c76ece92cfa0c8733a7388ea6d54b29962a8d65860759923d5a143fcabcba26d2c3a1303325130e06c5b48bcd4014bbe350a0e70baa1f3_0", "is_ignored": false, "lines": "  memset(auStack_417,0,0x3f0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 14, "offset": 283}, "start": {"col": 22, "line": 14, "offset": 282}}, "$DST": {"abstract_content": "auStack_417", "end": {"col": 21, "line": 14, "offset": 281}, "start": {"col": 10, "line": 14, "offset": 270}}, "$LEN": {"abstract_content": "0x3f0", "end": {"col": 29, "line": 14, "offset": 289}, "start": {"col": 24, "line": 14, "offset": 284}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042494c_0042494c.c", "start": {"col": 3, "line": 14, "offset": 263}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 15, "offset": 323}, "extra": {"engine_kind": "OSS", "fingerprint": "2ef10c91c3ed6705e5bab6c680564108d14203c492523788ee6d5fd695fe902ee6e4c46636762268ff8387783ff56decf3a20ba3775d8a2d9d334e551b643d1b_0", "is_ignored": false, "lines": "  __stream = fopen(param_2,\"r\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 19, "line": 15, "offset": 310}, "start": {"col": 14, "line": 15, "offset": 305}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042494c_0042494c.c", "start": {"col": 14, "line": 15, "offset": 305}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 22, "offset": 473}, "extra": {"engine_kind": "OSS", "fingerprint": "de280db574da1f137623efaa58e10ef8dc241713769494e8d4cb95bfc694a83fa53c3c710e4c46fa90b0818ac5794a1603ce9e5d148f98fee10f05448db1835a_0", "is_ignored": false, "lines": "  memcpy(local_40,param_1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 22, "offset": 450}, "start": {"col": 3, "line": 22, "offset": 444}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004262ac_004262ac.c", "start": {"col": 3, "line": 22, "offset": 444}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 22, "offset": 473}, "extra": {"engine_kind": "OSS", "fingerprint": "91729227102b3dea4939f2166caed69343a02e02342df6f1b9f57b706aae2b669aaeef6f23f25936b7e5b6e8a56deb98564ed97a49edec4a50c7dd99413a0d36_0", "is_ignored": false, "lines": "  memcpy(local_40,param_1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_40", "end": {"col": 18, "line": 22, "offset": 459}, "start": {"col": 10, "line": 22, "offset": 451}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 31, "line": 22, "offset": 472}, "start": {"col": 27, "line": 22, "offset": 468}}, "$SRC": {"abstract_content": "param_1", "end": {"col": 26, "line": 22, "offset": 467}, "start": {"col": 19, "line": 22, "offset": 460}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004262ac_004262ac.c", "start": {"col": 3, "line": 22, "offset": 444}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 34, "line": 23, "offset": 508}, "extra": {"engine_kind": "OSS", "fingerprint": "de280db574da1f137623efaa58e10ef8dc241713769494e8d4cb95bfc694a83fa53c3c710e4c46fa90b0818ac5794a1603ce9e5d148f98fee10f05448db1835a_1", "is_ignored": false, "lines": "  memcpy(auStack_30,param_2,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 23, "offset": 483}, "start": {"col": 3, "line": 23, "offset": 477}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004262ac_004262ac.c", "start": {"col": 3, "line": 23, "offset": 477}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 23, "offset": 508}, "extra": {"engine_kind": "OSS", "fingerprint": "27b24b935d6cfc1b5d490ceaed61a1a2d45c5e7f6fe4cf45312102e3e638b8ee5ec30cd5e0f6fcdc7445f7c5cd83cf74ba2178c37f1797f4f7b6d5c34a09f5d8_0", "is_ignored": false, "lines": "  memcpy(auStack_30,param_2,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_30", "end": {"col": 20, "line": 23, "offset": 494}, "start": {"col": 10, "line": 23, "offset": 484}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 33, "line": 23, "offset": 507}, "start": {"col": 29, "line": 23, "offset": 503}}, "$SRC": {"abstract_content": "param_2", "end": {"col": 28, "line": 23, "offset": 502}, "start": {"col": 21, "line": 23, "offset": 495}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004262ac_004262ac.c", "start": {"col": 3, "line": 23, "offset": 477}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 100, "line": 19, "offset": 613}, "extra": {"engine_kind": "OSS", "fingerprint": "14f8907dd75260d799fa9174bbb825000e35f5d11ffa7ed3c3cddd6261efce4c870093345d13a3ed9d0cbeeb89638163478aa6153fdccaa0e80dcfd396b750cd_0", "is_ignored": false, "lines": "      memcpy((void *)(*(int *)(iVar1 + 0xa48) + 0x108),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 19, "offset": 526}, "start": {"col": 7, "line": 19, "offset": 520}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00426808_00426808.c", "start": {"col": 7, "line": 19, "offset": 520}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 100, "line": 19, "offset": 613}, "extra": {"engine_kind": "OSS", "fingerprint": "af9f918e6d1da74ed60a8efa9b7d067c1e87739e2dd16f32fba8864993eabefab6d6964af8e65b40d94a6403ef3e1dca9fe4d67cc87085dcff93a6ab7bcee342_0", "is_ignored": false, "lines": "      memcpy((void *)(*(int *)(iVar1 + 0xa48) + 0x108),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void**(int*iVar1+0xa48+0x108", "end": {"col": 54, "line": 19, "offset": 567}, "start": {"col": 14, "line": 19, "offset": 527}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 99, "line": 19, "offset": 612}, "start": {"col": 95, "line": 19, "offset": 608}}, "$SRC": {"abstract_content": "(void**(int*param_3+0x20+4", "end": {"col": 93, "line": 19, "offset": 606}, "start": {"col": 56, "line": 19, "offset": 569}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00426808_00426808.c", "start": {"col": 7, "line": 19, "offset": 520}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 45, "line": 13, "offset": 289}, "extra": {"engine_kind": "OSS", "fingerprint": "ea0fc2b53725f3fda6481fe5ae59716a75292b697c1197d3f93732c9b3904aea9e8175177b2238b55c88d390a1a1ec3185f95f63a876eb4e4c1d8aa44b5c9900_0", "is_ignored": false, "lines": "  local_res4 = (short)((uint)param_2 >> 0x10);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x10", "end": {"col": 45, "line": 13, "offset": 289}, "start": {"col": 41, "line": 13, "offset": 285}}, "$NARROW": {"abstract_content": "local_res4", "end": {"col": 13, "line": 13, "offset": 257}, "start": {"col": 3, "line": 13, "offset": 247}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00427778_00427778.c", "start": {"col": 3, "line": 13, "offset": 247}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 45, "line": 14, "offset": 336}, "extra": {"engine_kind": "OSS", "fingerprint": "7df1527cad99aae6be8603fca040ad8186411f63637480df94345b694a01df7084157fff536b6c355c284083a57f47404bf8046f2eb6efa9413ab2f0124c004f_0", "is_ignored": false, "lines": "  local_res8 = (short)((uint)param_3 >> 0x10);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x10", "end": {"col": 45, "line": 14, "offset": 336}, "start": {"col": 41, "line": 14, "offset": 332}}, "$NARROW": {"abstract_content": "local_res8", "end": {"col": 13, "line": 14, "offset": 304}, "start": {"col": 3, "line": 14, "offset": 294}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00427778_00427778.c", "start": {"col": 3, "line": 14, "offset": 294}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 39, "line": 21, "offset": 539}, "extra": {"engine_kind": "OSS", "fingerprint": "57e2954b886cfabcacc7d7319ef0f2f2fb5900ccb7a4cc23c6914e3d5db4547e387d7969b4258a56061bf614364fe4c62e7aa34b7eab08db6ff04adcb6a9d36d_0", "is_ignored": false, "lines": "        sVar1 = *(short *)puVar3[0x36];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x36", "end": {"col": 38, "line": 21, "offset": 538}, "start": {"col": 34, "line": 21, "offset": 534}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 14, "line": 21, "offset": 514}, "start": {"col": 9, "line": 21, "offset": 509}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00427778_00427778.c", "start": {"col": 9, "line": 21, "offset": 509}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 39, "line": 26, "offset": 631}, "extra": {"engine_kind": "OSS", "fingerprint": "31cec39c15e3664ae6a7c77099b2584514960f46acbb16b7e0675567dc3436fd74b484b0d22652fcd97952761eaa79879cdc4512f61f50dec9c00e3ad0016f28_0", "is_ignored": false, "lines": "      sVar1 = *(short *)(puVar3 + 0x44);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x44", "end": {"col": 39, "line": 26, "offset": 631}, "start": {"col": 35, "line": 26, "offset": 627}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 26, "offset": 604}, "start": {"col": 7, "line": 26, "offset": 599}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00427778_00427778.c", "start": {"col": 7, "line": 26, "offset": 599}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 37, "line": 12, "offset": 211}, "extra": {"engine_kind": "OSS", "fingerprint": "aa6bf0f816bf4cc96da857e079d1c0db83529035b53479c42e74934b4e1a7c896156f018d8eaa8458b6fec2569c9f0955057fa6c1249b1b47a25ea6cef3df039_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_2 + 0x254);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 29, "line": 12, "offset": 203}, "start": {"col": 22, "line": 12, "offset": 196}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 12, "offset": 182}, "start": {"col": 3, "line": 12, "offset": 177}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00427d54_00427d54.c", "start": {"col": 3, "line": 12, "offset": 177}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 76, "line": 9, "offset": 174}, "extra": {"engine_kind": "OSS", "fingerprint": "32b5659246424d3558d5a13b7f7c06dfbd99482f405a99801f5223818fa8414ce2de1888434ce44564353acaa1cfd53393e3c4fcf8773a59803552705c7d380f_0", "is_ignored": false, "lines": "  if (((*(char *)(param_2 + 4) == -0x10) || (sVar1 = *(short *)(param_2 + 6), sVar1 == 1)) ||", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 72, "line": 9, "offset": 170}, "start": {"col": 65, "line": 9, "offset": 163}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 51, "line": 9, "offset": 149}, "start": {"col": 46, "line": 9, "offset": 144}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004292f4_004292f4.c", "start": {"col": 46, "line": 9, "offset": 144}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 43, "line": 18, "offset": 494}, "extra": {"engine_kind": "OSS", "fingerprint": "ba9a2f33e3cf3e2ee926143611f87a54b1508aad82899c700df47a90158afc921a0d59b37a92ce3fdb55a8e17eecaf8beeaf8e1bcf1dccf64989a851ab953c1e_0", "is_ignored": false, "lines": "        sVar1 = *(short *)((int)puVar4 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar4", "end": {"col": 39, "line": 18, "offset": 490}, "start": {"col": 28, "line": 18, "offset": 479}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 14, "line": 18, "offset": 465}, "start": {"col": 9, "line": 18, "offset": 460}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00429428_00429428.c", "start": {"col": 9, "line": 18, "offset": 460}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 31, "line": 78, "offset": 2027}, "extra": {"engine_kind": "OSS", "fingerprint": "4ad752f1838afeb05d11e0b87fc54f01d3da1065583560734ec8273305735c798dfb5f18d341fa6c8120e4ec3767046ef95361d503455d7d33b133791cd3ff83_0", "is_ignored": false, "lines": "      memcpy(__dest,param_6,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 78, "offset": 2009}, "start": {"col": 7, "line": 78, "offset": 2003}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "start": {"col": 7, "line": 78, "offset": 2003}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 78, "offset": 2027}, "extra": {"engine_kind": "OSS", "fingerprint": "559efc7ee384be00f924db6e034ad7de2ce8c6fd48b943213346d80162aacfb83fc9fac7389f1b6323af3bfaacbdba57338fa52b5e09d48c29fe68722e927e26_0", "is_ignored": false, "lines": "      memcpy(__dest,param_6,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest", "end": {"col": 20, "line": 78, "offset": 2016}, "start": {"col": 14, "line": 78, "offset": 2010}}, "$LEN": {"abstract_content": "6", "end": {"col": 30, "line": 78, "offset": 2026}, "start": {"col": 29, "line": 78, "offset": 2025}}, "$SRC": {"abstract_content": "param_6", "end": {"col": 28, "line": 78, "offset": 2024}, "start": {"col": 21, "line": 78, "offset": 2017}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "start": {"col": 7, "line": 78, "offset": 2003}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 136, "offset": 3936}, "extra": {"engine_kind": "OSS", "fingerprint": "4ad752f1838afeb05d11e0b87fc54f01d3da1065583560734ec8273305735c798dfb5f18d341fa6c8120e4ec3767046ef95361d503455d7d33b133791cd3ff83_1", "is_ignored": false, "lines": "          memcpy(&local_58,param_6,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 136, "offset": 3915}, "start": {"col": 11, "line": 136, "offset": 3909}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "start": {"col": 11, "line": 136, "offset": 3909}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 136, "offset": 3936}, "extra": {"engine_kind": "OSS", "fingerprint": "e2cfc2251f296032cb1cf80294b6fd2cc8f3dacf1ded788d06e32b7ecaeceff03e3d9ccea66dc28cd3edb8fa01e8f49a63e1666ef3c6b3e48c7462eb0ad542ae_0", "is_ignored": false, "lines": "          memcpy(&local_58,param_6,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_58", "end": {"col": 27, "line": 136, "offset": 3925}, "start": {"col": 18, "line": 136, "offset": 3916}}, "$LEN": {"abstract_content": "6", "end": {"col": 37, "line": 136, "offset": 3935}, "start": {"col": 36, "line": 136, "offset": 3934}}, "$SRC": {"abstract_content": "param_6", "end": {"col": 35, "line": 136, "offset": 3933}, "start": {"col": 28, "line": 136, "offset": 3926}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "start": {"col": 11, "line": 136, "offset": 3909}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 160, "offset": 4585}, "extra": {"engine_kind": "OSS", "fingerprint": "4ad752f1838afeb05d11e0b87fc54f01d3da1065583560734ec8273305735c798dfb5f18d341fa6c8120e4ec3767046ef95361d503455d7d33b133791cd3ff83_2", "is_ignored": false, "lines": "        memcpy(&local_50,param_6,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 160, "offset": 4564}, "start": {"col": 9, "line": 160, "offset": 4558}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "start": {"col": 9, "line": 160, "offset": 4558}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 160, "offset": 4585}, "extra": {"engine_kind": "OSS", "fingerprint": "5f6ecbe0c3bd6d82ba93c9c4051e7f66a5ccafaefe5e922d7a40aa494404ee7ad86b9313139094c74033d90696b8c303dfc56b5b6b06a4c10193992be404b76e_0", "is_ignored": false, "lines": "        memcpy(&local_50,param_6,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_50", "end": {"col": 25, "line": 160, "offset": 4574}, "start": {"col": 16, "line": 160, "offset": 4565}}, "$LEN": {"abstract_content": "6", "end": {"col": 35, "line": 160, "offset": 4584}, "start": {"col": 34, "line": 160, "offset": 4583}}, "$SRC": {"abstract_content": "param_6", "end": {"col": 33, "line": 160, "offset": 4582}, "start": {"col": 26, "line": 160, "offset": 4575}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042989c_0042989c.c", "start": {"col": 9, "line": 160, "offset": 4558}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 35, "line": 42, "offset": 1862}, "extra": {"engine_kind": "OSS", "fingerprint": "1c2ac6df92b207acdd940789adcfac5dd5a9291e43fc304b61161c2080f99018fcccb4684a2977f3f9d3cd776d876e34e65f6d25df2c0c6d249eb250f342726b_0", "is_ignored": false, "lines": "    sVar1 = *(short *)(param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 31, "line": 42, "offset": 1858}, "start": {"col": 24, "line": 42, "offset": 1851}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 10, "line": 42, "offset": 1837}, "start": {"col": 5, "line": 42, "offset": 1832}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042a238_0042a238.c", "start": {"col": 5, "line": 42, "offset": 1832}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 39, "line": 15, "offset": 261}, "extra": {"engine_kind": "OSS", "fingerprint": "500c9a1ee29a147b29c131e373753e1b3956486fb7673b012184929fe70527abb88dea67d0ef0bd8196382182957e3b16cc96118663c61ca4f8e45d494d54634_0", "is_ignored": false, "lines": "    sVar1 = *(short *)((int)puVar4 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar4", "end": {"col": 35, "line": 15, "offset": 257}, "start": {"col": 24, "line": 15, "offset": 246}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 10, "line": 15, "offset": 232}, "start": {"col": 5, "line": 15, "offset": 227}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042a73c_0042a73c.c", "start": {"col": 5, "line": 15, "offset": 227}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 41, "line": 26, "offset": 566}, "extra": {"engine_kind": "OSS", "fingerprint": "500c9a1ee29a147b29c131e373753e1b3956486fb7673b012184929fe70527abb88dea67d0ef0bd8196382182957e3b16cc96118663c61ca4f8e45d494d54634_1", "is_ignored": false, "lines": "      sVar1 = *(short *)((int)puVar4 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar4", "end": {"col": 37, "line": 26, "offset": 562}, "start": {"col": 26, "line": 26, "offset": 551}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 26, "offset": 537}, "start": {"col": 7, "line": 26, "offset": 532}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042a73c_0042a73c.c", "start": {"col": 7, "line": 26, "offset": 532}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 32, "line": 14, "offset": 335}, "extra": {"engine_kind": "OSS", "fingerprint": "d9b173018ce0ea891c66ec1554868399053292a3a501685cdad60defafcf7c72228b036dacf3e1b43c45b4c36f526fd06d3ed5728504f44069f607d8ea0852f6_0", "is_ignored": false, "lines": "  cVar3 = *(char *)(param_2 + 4);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 28, "line": 14, "offset": 331}, "start": {"col": 21, "line": 14, "offset": 324}}, "$NARROW": {"abstract_content": "cVar3", "end": {"col": 8, "line": 14, "offset": 311}, "start": {"col": 3, "line": 14, "offset": 306}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042a844_0042a844.c", "start": {"col": 3, "line": 14, "offset": 306}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 34, "line": 17, "offset": 470}, "extra": {"engine_kind": "OSS", "fingerprint": "d9b173018ce0ea891c66ec1554868399053292a3a501685cdad60defafcf7c72228b036dacf3e1b43c45b4c36f526fd06d3ed5728504f44069f607d8ea0852f6_1", "is_ignored": false, "lines": "    cVar3 = *(char *)(param_2 + 4);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 30, "line": 17, "offset": 466}, "start": {"col": 23, "line": 17, "offset": 459}}, "$NARROW": {"abstract_content": "cVar3", "end": {"col": 10, "line": 17, "offset": 446}, "start": {"col": 5, "line": 17, "offset": 441}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042a844_0042a844.c", "start": {"col": 5, "line": 17, "offset": 441}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 32, "line": 27, "offset": 423}, "extra": {"engine_kind": "OSS", "fingerprint": "e27b0bb2bfb5c50b41e1aa172d1af298ba60e0ab4c63a9637d6fef0cdc4f371fd39ffb33d8aee6aa07811bd0910347ef5b317e779e8863b7047bb1b3dc2cd09c_0", "is_ignored": false, "lines": "    cVar13 = (char)(uVar11 >> 8);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "8", "end": {"col": 32, "line": 27, "offset": 423}, "start": {"col": 31, "line": 27, "offset": 422}}, "$NARROW": {"abstract_content": "cVar13", "end": {"col": 11, "line": 27, "offset": 402}, "start": {"col": 5, "line": 27, "offset": 396}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042a978_0042a978.c", "start": {"col": 5, "line": 27, "offset": 396}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 40, "offset": 782}, "extra": {"engine_kind": "OSS", "fingerprint": "08831add95b16c7e3c381f727305cd607c69d5a9b31f4d7dc1e622c9dcbaa94a133634384aab6f95427fb559ae3b055e7a66211be76c1c253a6e796000aa40a5_0", "is_ignored": false, "lines": "    memcpy(&local_28,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 40, "offset": 757}, "start": {"col": 5, "line": 40, "offset": 751}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b05c_0042b05c.c", "start": {"col": 5, "line": 40, "offset": 751}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 40, "offset": 782}, "extra": {"engine_kind": "OSS", "fingerprint": "619a82fa77d715e7fdd9e1c5bc9270dc90344b0586299c1b44248f8dde4090ecdb50599d9eb4db028d7627138f20ced935bda61e04b953db081311bf396874aa_0", "is_ignored": false, "lines": "    memcpy(&local_28,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_28", "end": {"col": 21, "line": 40, "offset": 767}, "start": {"col": 12, "line": 40, "offset": 758}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 35, "line": 40, "offset": 781}, "start": {"col": 31, "line": 40, "offset": 777}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 30, "line": 40, "offset": 776}, "start": {"col": 22, "line": 40, "offset": 768}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b05c_0042b05c.c", "start": {"col": 5, "line": 40, "offset": 751}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 41, "offset": 820}, "extra": {"engine_kind": "OSS", "fingerprint": "08831add95b16c7e3c381f727305cd607c69d5a9b31f4d7dc1e622c9dcbaa94a133634384aab6f95427fb559ae3b055e7a66211be76c1c253a6e796000aa40a5_1", "is_ignored": false, "lines": "    memcpy(&local_3c,&local_28,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 41, "offset": 794}, "start": {"col": 5, "line": 41, "offset": 788}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b05c_0042b05c.c", "start": {"col": 5, "line": 41, "offset": 788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 41, "offset": 820}, "extra": {"engine_kind": "OSS", "fingerprint": "d12ebd5e0e1efff574988881c4e867d1597e7e5624fdacb72c2ee8b2ccba4b8d79995f549acea837b02e89d9b691a13f062094a051bb9bbe0c649133fd36a202_0", "is_ignored": false, "lines": "    memcpy(&local_3c,&local_28,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_3c", "end": {"col": 21, "line": 41, "offset": 804}, "start": {"col": 12, "line": 41, "offset": 795}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 36, "line": 41, "offset": 819}, "start": {"col": 32, "line": 41, "offset": 815}}, "$SRC": {"abstract_content": "&local_28", "end": {"col": 31, "line": 41, "offset": 814}, "start": {"col": 22, "line": 41, "offset": 805}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b05c_0042b05c.c", "start": {"col": 5, "line": 41, "offset": 788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 27, "line": 43, "offset": 869}, "extra": {"engine_kind": "OSS", "fingerprint": "c9f8b27283f8ce14eb5c48ad08d2a9d820838e26289f7200be9839c2c1b99355ebd6427eada4c7a700756a1f09148ffe2da996d77720d6a986064f9024451135_0", "is_ignored": false, "lines": "    local_54 = local_58[0];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 26, "line": 43, "offset": 868}, "start": {"col": 25, "line": 43, "offset": 867}}, "$NARROW": {"abstract_content": "local_54", "end": {"col": 13, "line": 43, "offset": 855}, "start": {"col": 5, "line": 43, "offset": 847}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b05c_0042b05c.c", "start": {"col": 5, "line": 43, "offset": 847}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 41, "offset": 819}, "extra": {"engine_kind": "OSS", "fingerprint": "87af65774075ec19b4e6027c7a2c32a2da4eff74d714f5a23fc61fe4be8af0157933dd225f7ceed9a340cedefc59628b6dec8d77f6a4ffe71d89c75bb9160061_0", "is_ignored": false, "lines": "    memcpy(&local_54,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 41, "offset": 794}, "start": {"col": 5, "line": 41, "offset": 788}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b424_0042b424.c", "start": {"col": 5, "line": 41, "offset": 788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 41, "offset": 819}, "extra": {"engine_kind": "OSS", "fingerprint": "ce93e3f7cb69c2b779bb34cdfae282c5273da5c92e9f7662ea4a042f74683dfa00c3a4193926f5172a2807fa39bf45cc0623c86d9f30e1cbd2ec430ee3a0a46d_0", "is_ignored": false, "lines": "    memcpy(&local_54,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_54", "end": {"col": 21, "line": 41, "offset": 804}, "start": {"col": 12, "line": 41, "offset": 795}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 35, "line": 41, "offset": 818}, "start": {"col": 31, "line": 41, "offset": 814}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 30, "line": 41, "offset": 813}, "start": {"col": 22, "line": 41, "offset": 805}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b424_0042b424.c", "start": {"col": 5, "line": 41, "offset": 788}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 42, "offset": 857}, "extra": {"engine_kind": "OSS", "fingerprint": "87af65774075ec19b4e6027c7a2c32a2da4eff74d714f5a23fc61fe4be8af0157933dd225f7ceed9a340cedefc59628b6dec8d77f6a4ffe71d89c75bb9160061_1", "is_ignored": false, "lines": "    memcpy(&local_68,&local_54,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 42, "offset": 831}, "start": {"col": 5, "line": 42, "offset": 825}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b424_0042b424.c", "start": {"col": 5, "line": 42, "offset": 825}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 42, "offset": 857}, "extra": {"engine_kind": "OSS", "fingerprint": "554ecd0c15f4c8fa0fd9348bf217eb98bf679858e4001ec8e7bd2475526ffb3984a75e6e15d714a33a4a28ee5592b293440e04e13a1baaa2151a7de160657e43_0", "is_ignored": false, "lines": "    memcpy(&local_68,&local_54,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_68", "end": {"col": 21, "line": 42, "offset": 841}, "start": {"col": 12, "line": 42, "offset": 832}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 36, "line": 42, "offset": 856}, "start": {"col": 32, "line": 42, "offset": 852}}, "$SRC": {"abstract_content": "&local_54", "end": {"col": 31, "line": 42, "offset": 851}, "start": {"col": 22, "line": 42, "offset": 842}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042b424_0042b424.c", "start": {"col": 5, "line": 42, "offset": 825}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 51, "line": 39, "offset": 1323}, "extra": {"engine_kind": "OSS", "fingerprint": "e332da0674a1a5e4fecc7ec38dd3c5520014e186f44e724e73e704d6757d552c78a2c533a87ee6c5026f021001e0aba8d15821c354a6f9e80bac9033dda343f1_0", "is_ignored": false, "lines": "              ((sVar1 = *(short *)((int)puVar6 + 6), sVar1 == 1 ||", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar6", "end": {"col": 47, "line": 39, "offset": 1319}, "start": {"col": 36, "line": 39, "offset": 1308}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 22, "line": 39, "offset": 1294}, "start": {"col": 17, "line": 39, "offset": 1289}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042c3ac_0042c3ac.c", "start": {"col": 17, "line": 39, "offset": 1289}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 33, "line": 17, "offset": 290}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb0c6bd5ea0b66ea26f28fbd2ace811c0c158bc84b6dccaca1e0f51b15da4430fc8d121f6291cab8afbabca00a07bb40c680bc7e207f9b698cc95d077db7d6c_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 29, "line": 17, "offset": 286}, "start": {"col": 22, "line": 17, "offset": 279}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 17, "offset": 265}, "start": {"col": 3, "line": 17, "offset": 260}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042cc08_0042cc08.c", "start": {"col": 3, "line": 17, "offset": 260}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 37, "line": 53, "offset": 1892}, "extra": {"engine_kind": "OSS", "fingerprint": "ccb0c6bd5ea0b66ea26f28fbd2ace811c0c158bc84b6dccaca1e0f51b15da4430fc8d121f6291cab8afbabca00a07bb40c680bc7e207f9b698cc95d077db7d6c_1", "is_ignored": false, "lines": "      sVar1 = *(short *)(param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 33, "line": 53, "offset": 1888}, "start": {"col": 26, "line": 53, "offset": 1881}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 53, "offset": 1867}, "start": {"col": 7, "line": 53, "offset": 1862}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042cc08_0042cc08.c", "start": {"col": 7, "line": 53, "offset": 1862}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 41, "line": 24, "offset": 694}, "extra": {"engine_kind": "OSS", "fingerprint": "6eb341059380602af8d7d045a1fe549500df9b93699646b9dca52656bd1f3da754cedff3b0e2dbb8ccfa79bbfe1a31ef25f2848cd571fa74ac04a3be61bb8683_0", "is_ignored": false, "lines": "      sVar1 = *(short *)((int)puVar2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar2", "end": {"col": 37, "line": 24, "offset": 690}, "start": {"col": 26, "line": 24, "offset": 679}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 12, "line": 24, "offset": 665}, "start": {"col": 7, "line": 24, "offset": 660}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042e080_0042e080.c", "start": {"col": 7, "line": 24, "offset": 660}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 46, "line": 150, "offset": 5669}, "extra": {"engine_kind": "OSS", "fingerprint": "cc3976d9e1698e2f3f80fd170f37e30690b4a2b1fea3041e5cee6fe68ef81614b6122fe959881dbc8c81d8428ac77605854518006eb901fa0bd47f22cc96ae75_0", "is_ignored": false, "lines": "        memcpy(puVar7 + 0x28,zerov6Addr,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 150, "offset": 5638}, "start": {"col": 9, "line": 150, "offset": 5632}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042e884_0042e884.c", "start": {"col": 9, "line": 150, "offset": 5632}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 46, "line": 150, "offset": 5669}, "extra": {"engine_kind": "OSS", "fingerprint": "3fc36fdb6a85cebaee60ed049a564b0f47e9b3965ce72d24e12dfb2e3f22dec2c74d96182bfadd38ae45730b11d67ff30dc38601bb71052038e37c3d9261a5b2_0", "is_ignored": false, "lines": "        memcpy(puVar7 + 0x28,zerov6Addr,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar7+0x28", "end": {"col": 29, "line": 150, "offset": 5652}, "start": {"col": 16, "line": 150, "offset": 5639}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 45, "line": 150, "offset": 5668}, "start": {"col": 41, "line": 150, "offset": 5664}}, "$SRC": {"abstract_content": "zerov6Addr", "end": {"col": 40, "line": 150, "offset": 5663}, "start": {"col": 30, "line": 150, "offset": 5653}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042e884_0042e884.c", "start": {"col": 9, "line": 150, "offset": 5632}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 94, "line": 72, "offset": 2509}, "extra": {"engine_kind": "OSS", "fingerprint": "90a4cfd5667e2539cc5faf44e6e3ffc14cfcb931ff00e5106113dd18b2a94ee881b9edd15c2cf5610411955b37b14cae5591dcfc5aa04448cfd29c2f0274b917_0", "is_ignored": false, "lines": "      sVar4 = mDNS_snprintf(auStack_11b,0xff,pcVar5,local_168,0x1e,10,&local_144,&local_130,\n                            local_170[0],local_16c,auStack_15c,local_150,local_14c,local_148);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0xff", "end": {"col": 45, "line": 71, "offset": 2367}, "start": {"col": 41, "line": 71, "offset": 2363}}, "$NARROW": {"abstract_content": "sVar4", "end": {"col": 12, "line": 71, "offset": 2334}, "start": {"col": 7, "line": 71, "offset": 2329}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042ee98_0042ee98.c", "start": {"col": 7, "line": 71, "offset": 2329}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 94, "line": 72, "offset": 2509}, "extra": {"engine_kind": "OSS", "fingerprint": "4b1e1ece2d48371f916e3ac41526348836c1bf491f63eb6397b6086febc06f3df3a108f6392b85a55c1237d4be16ff9079cd580d59f7acc0e63d44dc83bef827_0", "is_ignored": false, "lines": "      sVar4 = mDNS_snprintf(auStack_11b,0xff,pcVar5,local_168,0x1e,10,&local_144,&local_130,\n                            local_170[0],local_16c,auStack_15c,local_150,local_14c,local_148);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 28, "line": 71, "offset": 2350}, "start": {"col": 15, "line": 71, "offset": 2337}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042ee98_0042ee98.c", "start": {"col": 15, "line": 71, "offset": 2337}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 58, "line": 89, "offset": 3044}, "extra": {"engine_kind": "OSS", "fingerprint": "90a4cfd5667e2539cc5faf44e6e3ffc14cfcb931ff00e5106113dd18b2a94ee881b9edd15c2cf5610411955b37b14cae5591dcfc5aa04448cfd29c2f0274b917_1", "is_ignored": false, "lines": "    sVar4 = mDNS_snprintf(auStack_11b,0xff,pcVar5,local_168,0x1e,10,&local_144,&local_130,\n                          local_170[0],local_16c,param_5);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0xff", "end": {"col": 43, "line": 88, "offset": 2938}, "start": {"col": 39, "line": 88, "offset": 2934}}, "$NARROW": {"abstract_content": "sVar4", "end": {"col": 10, "line": 88, "offset": 2905}, "start": {"col": 5, "line": 88, "offset": 2900}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042ee98_0042ee98.c", "start": {"col": 5, "line": 88, "offset": 2900}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 89, "offset": 3044}, "extra": {"engine_kind": "OSS", "fingerprint": "4b1e1ece2d48371f916e3ac41526348836c1bf491f63eb6397b6086febc06f3df3a108f6392b85a55c1237d4be16ff9079cd580d59f7acc0e63d44dc83bef827_1", "is_ignored": false, "lines": "    sVar4 = mDNS_snprintf(auStack_11b,0xff,pcVar5,local_168,0x1e,10,&local_144,&local_130,\n                          local_170[0],local_16c,param_5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 88, "offset": 2921}, "start": {"col": 13, "line": 88, "offset": 2908}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042ee98_0042ee98.c", "start": {"col": 13, "line": 88, "offset": 2908}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 39, "line": 97, "offset": 3359}, "extra": {"engine_kind": "OSS", "fingerprint": "44e0019348439d8fea86c98a2c15cf51a1ad6f3f8051d1650995b83a86a4ae95f7034f7b5f34f02f5d9368c4a2d95af3415daee3c45dd0e411ae154a758531f1_0", "is_ignored": false, "lines": "      local_11c = (char)sVar4 + '\\x01';", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "sVar4", "end": {"col": 30, "line": 97, "offset": 3350}, "start": {"col": 25, "line": 97, "offset": 3345}}, "$NARROW": {"abstract_content": "local_11c", "end": {"col": 16, "line": 97, "offset": 3336}, "start": {"col": 7, "line": 97, "offset": 3327}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042ee98_0042ee98.c", "start": {"col": 7, "line": 97, "offset": 3327}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 64, "line": 15, "offset": 320}, "extra": {"engine_kind": "OSS", "fingerprint": "4c88767e4d7560ed5d49023e0434dfb673abb5110e863cef76ed8dbcd2e1f45dd1e0f18b3d034bbcada3daa45c3657c0badb7b0e31e1d99e526321fb71cabc75_0", "is_ignored": false, "lines": "      mDNS_snprintf(local_a8,0x80,\"sleep proxy for %d records\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 20, "line": 15, "offset": 276}, "start": {"col": 7, "line": 15, "offset": 263}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "start": {"col": 7, "line": 15, "offset": 263}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 75, "line": 38, "offset": 1277}, "extra": {"engine_kind": "OSS", "fingerprint": "4c88767e4d7560ed5d49023e0434dfb673abb5110e863cef76ed8dbcd2e1f45dd1e0f18b3d034bbcada3daa45c3657c0badb7b0e31e1d99e526321fb71cabc75_1", "is_ignored": false, "lines": "          mDNS_snprintf(local_a8,0x80,\"%s does not support NetWake\",iVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 24, "line": 38, "offset": 1226}, "start": {"col": 11, "line": 38, "offset": 1213}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "start": {"col": 11, "line": 38, "offset": 1213}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 75, "line": 46, "offset": 1667}, "extra": {"engine_kind": "OSS", "fingerprint": "4c88767e4d7560ed5d49023e0434dfb673abb5110e863cef76ed8dbcd2e1f45dd1e0f18b3d034bbcada3daa45c3657c0badb7b0e31e1d99e526321fb71cabc75_2", "is_ignored": false, "lines": "          mDNS_snprintf(local_a8,0x80,\"No sleep proxy server on %s\",iVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 24, "line": 46, "offset": 1616}, "start": {"col": 11, "line": 46, "offset": 1603}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "start": {"col": 11, "line": 46, "offset": 1603}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 94, "line": 71, "offset": 3078}, "extra": {"engine_kind": "OSS", "fingerprint": "4c88767e4d7560ed5d49023e0434dfb673abb5110e863cef76ed8dbcd2e1f45dd1e0f18b3d034bbcada3daa45c3657c0badb7b0e31e1d99e526321fb71cabc75_3", "is_ignored": false, "lines": "          mDNS_snprintf(local_a8,0x80,\"No sleep proxy server with better metric on %s\",iVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 24, "line": 71, "offset": 3008}, "start": {"col": 11, "line": 71, "offset": 2995}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f54c_0042f54c.c", "start": {"col": 11, "line": 71, "offset": 2995}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 68, "line": 618, "offset": 25517}, "extra": {"engine_kind": "OSS", "fingerprint": "09643be2ad5299a46113c72d7c3e3c78d6fe58371b9b5d42fac0a97994ac3110d0a414a0d88489b70dfeb533d0b7e051a8a6e1df3430613e38e7268466f5e51f_0", "is_ignored": false, "lines": "                    cVar2 = *(char *)((int)puVar22 + iVar27 + 0x154);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar22", "end": {"col": 51, "line": 618, "offset": 25500}, "start": {"col": 39, "line": 618, "offset": 25488}}, "$NARROW": {"abstract_content": "cVar2", "end": {"col": 26, "line": 618, "offset": 25475}, "start": {"col": 21, "line": 618, "offset": 25470}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f8fc_0042f8fc.c", "start": {"col": 21, "line": 618, "offset": 25470}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 816, "offset": 34287}, "extra": {"engine_kind": "OSS", "fingerprint": "80257e7b7109f660db78134d38ed372572b14c499736bb8907a662358082238e850d76897ba754c08dc7d50ff0edbe2f05b9f3cc8be6373f7f8d61863f3ab08e_0", "is_ignored": false, "lines": "        memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 816, "offset": 34244}, "start": {"col": 9, "line": 816, "offset": 34238}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f8fc_0042f8fc.c", "start": {"col": 9, "line": 816, "offset": 34238}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 58, "line": 816, "offset": 34287}, "extra": {"engine_kind": "OSS", "fingerprint": "097389c085ecb1c6ef4b5449e86f8566138f762d327deb1f664acced4a2d881bf8726cdef32856ffe46876914db99b3800aacf164d9a93b7e50b32e23683c721_0", "is_ignored": false, "lines": "        memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*local_3dc+0x16", "end": {"col": 41, "line": 816, "offset": 34270}, "start": {"col": 16, "line": 816, "offset": 34245}}, "$LEN": {"abstract_content": "6", "end": {"col": 57, "line": 816, "offset": 34286}, "start": {"col": 56, "line": 816, "offset": 34285}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 55, "line": 816, "offset": 34284}, "start": {"col": 43, "line": 816, "offset": 34272}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f8fc_0042f8fc.c", "start": {"col": 9, "line": 816, "offset": 34238}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 835, "offset": 35185}, "extra": {"engine_kind": "OSS", "fingerprint": "80257e7b7109f660db78134d38ed372572b14c499736bb8907a662358082238e850d76897ba754c08dc7d50ff0edbe2f05b9f3cc8be6373f7f8d61863f3ab08e_1", "is_ignored": false, "lines": "        memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 835, "offset": 35142}, "start": {"col": 9, "line": 835, "offset": 35136}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f8fc_0042f8fc.c", "start": {"col": 9, "line": 835, "offset": 35136}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 58, "line": 835, "offset": 35185}, "extra": {"engine_kind": "OSS", "fingerprint": "097389c085ecb1c6ef4b5449e86f8566138f762d327deb1f664acced4a2d881bf8726cdef32856ffe46876914db99b3800aacf164d9a93b7e50b32e23683c721_1", "is_ignored": false, "lines": "        memcpy((void *)(local_3dc + 0x16),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*local_3dc+0x16", "end": {"col": 41, "line": 835, "offset": 35168}, "start": {"col": 16, "line": 835, "offset": 35143}}, "$LEN": {"abstract_content": "6", "end": {"col": 57, "line": 835, "offset": 35184}, "start": {"col": 56, "line": 835, "offset": 35183}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 55, "line": 835, "offset": 35182}, "start": {"col": 43, "line": 835, "offset": 35170}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0042f8fc_0042f8fc.c", "start": {"col": 9, "line": 835, "offset": 35136}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 42, "line": 57, "offset": 1936}, "extra": {"engine_kind": "OSS", "fingerprint": "842954121b6a4f46856c569cb1a6f59d613548556d05bd3932afb86f694822a328f1b405effc4979290498c6af813a69914868ee43d1f3a0cb448ef3d874f2e8_0", "is_ignored": false, "lines": "         ((sVar2 = *(short *)(param_2 + 6), sVar2 == 1 ||", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 38, "line": 57, "offset": 1932}, "start": {"col": 31, "line": 57, "offset": 1925}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 17, "line": 57, "offset": 1911}, "start": {"col": 12, "line": 57, "offset": 1906}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00431d88_00431d88.c", "start": {"col": 12, "line": 57, "offset": 1906}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 21, "line": 60, "offset": 2104}, "extra": {"engine_kind": "OSS", "fingerprint": "2ab5c0adab415ced9b184d93f921d118586e1a8963c74d49d48baf45e4c5533f452ea40c2ce135fa8e2b9937526c8e33d4d3b86fa34b5a0f70d0672445b8ff49_0", "is_ignored": false, "lines": "          cVar6 = -1;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "1", "end": {"col": 21, "line": 60, "offset": 2104}, "start": {"col": 20, "line": 60, "offset": 2103}}, "$NARROW": {"abstract_content": "cVar6", "end": {"col": 16, "line": 60, "offset": 2099}, "start": {"col": 11, "line": 60, "offset": 2094}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00431d88_00431d88.c", "start": {"col": 11, "line": 60, "offset": 2094}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 47, "line": 43, "offset": 1441}, "extra": {"engine_kind": "OSS", "fingerprint": "9b2d551bf5c799907ea544b0728b8c08fa4f8a6d104cb105a92d981a32253b4117c9c79c629326d32bd254d2f2279613b0f951134fc800605ea3d4944a2355d8_0", "is_ignored": false, "lines": "          ((sVar1 = *(short *)((int)puVar5 + 6), sVar1 == 1 ||", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar5", "end": {"col": 43, "line": 43, "offset": 1437}, "start": {"col": 32, "line": 43, "offset": 1426}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 18, "line": 43, "offset": 1412}, "start": {"col": 13, "line": 43, "offset": 1407}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004320a0_004320a0.c", "start": {"col": 13, "line": 43, "offset": 1407}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 51, "line": 56, "offset": 2182}, "extra": {"engine_kind": "OSS", "fingerprint": "0b743c8a78fd078ae7399a94d6184668bb6b8db19513cc4d176a0ccf946c289dc778daee937529d230a03d13c692a382a6e87da27a9e70faaff85d55be0a8e2e_0", "is_ignored": false, "lines": "              ((sVar2 = *(short *)((int)puVar9 + 6), sVar2 == 1 ||", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar9", "end": {"col": 47, "line": 56, "offset": 2178}, "start": {"col": 36, "line": 56, "offset": 2167}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 22, "line": 56, "offset": 2153}, "start": {"col": 17, "line": 56, "offset": 2148}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00432360_00432360.c", "start": {"col": 17, "line": 56, "offset": 2148}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 37, "line": 12, "offset": 198}, "extra": {"engine_kind": "OSS", "fingerprint": "94c744642b9cb07807001485a8dcc0743c672d0d9645e0bd33173cda02c62facc5c5f5bbdbd6be3ec7a562bdd84242ccc89b5f93d34ea29396ea262e03673033_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_2 + 0x254);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 29, "line": 12, "offset": 190}, "start": {"col": 22, "line": 12, "offset": 183}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 12, "offset": 169}, "start": {"col": 3, "line": 12, "offset": 164}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004326d4_004326d4.c", "start": {"col": 3, "line": 12, "offset": 164}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 14, "offset": 445}, "extra": {"engine_kind": "OSS", "fingerprint": "97ecab0acbd7a223fb01c0192c3b107c5a92e62705f3f5d6c2e0057ad0d5ded1828d1270879486a2b92e733a7ceee2b5c7ea5db3ce0ae84585c9304f57aff648_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 14, "offset": 404}, "start": {"col": 3, "line": 14, "offset": 398}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004337ec_004337ec.c", "start": {"col": 3, "line": 14, "offset": 398}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 14, "offset": 445}, "extra": {"engine_kind": "OSS", "fingerprint": "3cd3f2d36b955c6ca8fba89fabcb5eec77ab04c5d37809463dd8aa5843b3c9215bd60d3dff2ae9e07f10be186bf1179ea1ebf6236819d3a00f0c04a75954fe01_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x13c", "end": {"col": 34, "line": 14, "offset": 429}, "start": {"col": 10, "line": 14, "offset": 405}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 14, "offset": 444}, "start": {"col": 45, "line": 14, "offset": 440}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 14, "offset": 439}, "start": {"col": 36, "line": 14, "offset": 431}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004337ec_004337ec.c", "start": {"col": 3, "line": 14, "offset": 398}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 62, "line": 43, "offset": 1583}, "extra": {"engine_kind": "OSS", "fingerprint": "cb2a1701a0dd63233435f59290843b760793af3d83f4b0627fabed367703be8a2ec81b07e87d4a7ac7b610ceec148619bb7d667534fdbc2c9bba6e48ee225258_0", "is_ignored": false, "lines": "    iVar1 = AllocateAnonInfo(param_2 + 0x154,param_5,sVar2,0);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar1", "end": {"col": 10, "line": 43, "offset": 1531}, "start": {"col": 5, "line": 43, "offset": 1526}}, "$UNSIGNED": {"abstract_content": "sVar2", "end": {"col": 59, "line": 43, "offset": 1580}, "propagated_value": {"svalue_abstract_content": "mDNSPlatformStrLen(param_5)", "svalue_end": {"col": 40, "line": 42, "offset": 1520}, "svalue_start": {"col": 13, "line": 42, "offset": 1493}}, "start": {"col": 54, "line": 43, "offset": 1575}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004337ec_004337ec.c", "start": {"col": 5, "line": 43, "offset": 1526}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 50, "line": 14, "offset": 266}, "extra": {"engine_kind": "OSS", "fingerprint": "70f7ba1c6fc6347e3ab3deed137e25724f2a4609b17c29128b4dd2bc1cacaee4c386ff03a0821c75d19336457b587bcb984de65bb2ed54889ec0e9d93c342ef4_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(*(int *)(param_3 + 0x20) + 8);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_3", "end": {"col": 38, "line": 14, "offset": 254}, "start": {"col": 31, "line": 14, "offset": 247}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 14, "offset": 224}, "start": {"col": 3, "line": 14, "offset": 219}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00434158_00434158.c", "start": {"col": 3, "line": 14, "offset": 219}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 53, "line": 15, "offset": 321}, "extra": {"engine_kind": "OSS", "fingerprint": "2b464eec64b0afef155b34addddbab5bf21fae1dac49e698accc5fe16d695831821400020a5e3ea5d6879123c1fc5e7a37d5d13c3f66ecccce976e188530d765_0", "is_ignored": false, "lines": "  sVar2 = *(short *)(*(int *)(iVar7 + 0xa48) + 0x118);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "iVar7", "end": {"col": 36, "line": 15, "offset": 304}, "start": {"col": 31, "line": 15, "offset": 299}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 8, "line": 15, "offset": 276}, "start": {"col": 3, "line": 15, "offset": 271}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00434158_00434158.c", "start": {"col": 3, "line": 15, "offset": 271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 12, "offset": 239}, "extra": {"engine_kind": "OSS", "fingerprint": "544c6cbcc05a872ed4e03002a2b2b1d9c87e8aa0f6eca3e6872f64912b51ca6f741115a3a978ab7c86fe6f1850cf2f8463fb360b59dbff1d59e74ef560ff7bbd_0", "is_ignored": false, "lines": "  memcpy(auStack_40,zeroOwner,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 12, "offset": 212}, "start": {"col": 3, "line": 12, "offset": 206}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00434f7c_00434f7c.c", "start": {"col": 3, "line": 12, "offset": 206}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 12, "offset": 239}, "extra": {"engine_kind": "OSS", "fingerprint": "996ab5a6dca7ff09f8476387f5fc771780d662318d961c5869f9cf0ccb509b41fc94237095f35991471d3a3c60ecd4376780b31793db27007b18424f0d5f944a_0", "is_ignored": false, "lines": "  memcpy(auStack_40,zeroOwner,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_40", "end": {"col": 20, "line": 12, "offset": 223}, "start": {"col": 10, "line": 12, "offset": 213}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 35, "line": 12, "offset": 238}, "start": {"col": 31, "line": 12, "offset": 234}}, "$SRC": {"abstract_content": "zeroOwner", "end": {"col": 30, "line": 12, "offset": 233}, "start": {"col": 21, "line": 12, "offset": 224}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00434f7c_00434f7c.c", "start": {"col": 3, "line": 12, "offset": 206}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 26, "offset": 821}, "extra": {"engine_kind": "OSS", "fingerprint": "544c6cbcc05a872ed4e03002a2b2b1d9c87e8aa0f6eca3e6872f64912b51ca6f741115a3a978ab7c86fe6f1850cf2f8463fb360b59dbff1d59e74ef560ff7bbd_1", "is_ignored": false, "lines": "      memcpy(auStack_40,puVar2 + 0x13,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 26, "offset": 790}, "start": {"col": 7, "line": 26, "offset": 784}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00434f7c_00434f7c.c", "start": {"col": 7, "line": 26, "offset": 784}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 44, "line": 26, "offset": 821}, "extra": {"engine_kind": "OSS", "fingerprint": "7e306b22cc2f5bd61e4b2a20601f56249fb82024f47f1ae461045a8fa5e1ce8c2317edfd4d6990be65a1c4555a810319c8af49861a7bd59b5ea0eda6ee3cb049_0", "is_ignored": false, "lines": "      memcpy(auStack_40,puVar2 + 0x13,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_40", "end": {"col": 24, "line": 26, "offset": 801}, "start": {"col": 14, "line": 26, "offset": 791}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 43, "line": 26, "offset": 820}, "start": {"col": 39, "line": 26, "offset": 816}}, "$SRC": {"abstract_content": "puVar2+0x13", "end": {"col": 38, "line": 26, "offset": 815}, "start": {"col": 25, "line": 26, "offset": 802}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00434f7c_00434f7c.c", "start": {"col": 7, "line": 26, "offset": 784}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 60, "line": 22, "offset": 617}, "extra": {"engine_kind": "OSS", "fingerprint": "c7340471b917b0ccf615680571afa16c7d409e2df38648cc41fac0f1684f52ffc562f35d9cf6a19c15c1c1aaec8081bc07264a94213d7b695097277d4b8d50ec_0", "is_ignored": false, "lines": "  if ((param_4 == 0) || (sVar1 = *(short *)(param_2 + 0x254), sVar1 != *(short *)(param_3 + 2))) {", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 52, "line": 22, "offset": 609}, "start": {"col": 45, "line": 22, "offset": 602}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 31, "line": 22, "offset": 588}, "start": {"col": 26, "line": 22, "offset": 583}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004350d4_004350d4.c", "start": {"col": 26, "line": 22, "offset": 583}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 80, "line": 78, "offset": 2452}, "extra": {"engine_kind": "OSS", "fingerprint": "784b3f28fb5183b8cfebf0a49f86b012acfea8ad0b3576bfac701f531fa846ad3c69d69b2221087a4473cc09133994d84a21b4d748a1d7aa845cbacb69272a26_0", "is_ignored": false, "lines": "    memcpy((void *)(iVar5 + 0xa4c),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 78, "offset": 2383}, "start": {"col": 5, "line": 78, "offset": 2377}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004350d4_004350d4.c", "start": {"col": 5, "line": 78, "offset": 2377}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 80, "line": 78, "offset": 2452}, "extra": {"engine_kind": "OSS", "fingerprint": "1253ad9f1f4cc1eae75d604529f0dc58eef0530d6941fb6d8f832cd49105a5d0bc809b8f11c2d0feed0d5c15173ee249f958456d3c5c7bef2cb2668996d8455e_0", "is_ignored": false, "lines": "    memcpy((void *)(iVar5 + 0xa4c),(void *)(*(int *)(param_3 + 0x20) + 4),0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*iVar5+0xa4c", "end": {"col": 34, "line": 78, "offset": 2406}, "start": {"col": 12, "line": 78, "offset": 2384}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 79, "line": 78, "offset": 2451}, "start": {"col": 75, "line": 78, "offset": 2447}}, "$SRC": {"abstract_content": "(void**(int*param_3+0x20+4", "end": {"col": 73, "line": 78, "offset": 2445}, "start": {"col": 36, "line": 78, "offset": 2408}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004350d4_004350d4.c", "start": {"col": 5, "line": 78, "offset": 2377}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 121, "offset": 4586}, "extra": {"engine_kind": "OSS", "fingerprint": "c8c7eb1d1338d32f536c8ce3dafdbfd85e3e5281c56bf8dad428bfecab78ffb0f8eb5c8c6cdc2c8513db98a77f9bf762b15189b3831bfc74cba6c8fa5ceb87e5_0", "is_ignored": false, "lines": "    cVar5 = *(char *)(iVar7 + 0x266);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "iVar7", "end": {"col": 28, "line": 121, "offset": 4578}, "start": {"col": 23, "line": 121, "offset": 4573}}, "$NARROW": {"abstract_content": "cVar5", "end": {"col": 10, "line": 121, "offset": 4560}, "start": {"col": 5, "line": 121, "offset": 4555}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004355d0_004355d0.c", "start": {"col": 5, "line": 121, "offset": 4555}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 34, "line": 142, "offset": 5546}, "extra": {"engine_kind": "OSS", "fingerprint": "c8c7eb1d1338d32f536c8ce3dafdbfd85e3e5281c56bf8dad428bfecab78ffb0f8eb5c8c6cdc2c8513db98a77f9bf762b15189b3831bfc74cba6c8fa5ceb87e5_1", "is_ignored": false, "lines": "  cVar5 = *(char *)(iVar7 + 0x266);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "iVar7", "end": {"col": 26, "line": 142, "offset": 5538}, "start": {"col": 21, "line": 142, "offset": 5533}}, "$NARROW": {"abstract_content": "cVar5", "end": {"col": 8, "line": 142, "offset": 5520}, "start": {"col": 3, "line": 142, "offset": 5515}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004355d0_004355d0.c", "start": {"col": 3, "line": 142, "offset": 5515}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 441, "offset": 17256}, "extra": {"engine_kind": "OSS", "fingerprint": "826483e75c4b1c8cffc8759e93e155c771d186c34f0b8f13b63d0a500af33255ec90d7700ddd1407995fdd87b0f8fb87bad7b1ea5fd772cf862bb2952dc13249_0", "is_ignored": false, "lines": "    memcpy(&local_16c,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 441, "offset": 17230}, "start": {"col": 5, "line": 441, "offset": 17224}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "start": {"col": 5, "line": 441, "offset": 17224}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 441, "offset": 17256}, "extra": {"engine_kind": "OSS", "fingerprint": "a4d07378711ee0d43f7319dd31d900533b7b8bdbace173f520a8aaf9e1e6ade6f2236f0e14d92eda6300548c1ccf861b6c8a60abc76a05151e97cd7307b5e323_0", "is_ignored": false, "lines": "    memcpy(&local_16c,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_16c", "end": {"col": 22, "line": 441, "offset": 17241}, "start": {"col": 12, "line": 441, "offset": 17231}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 36, "line": 441, "offset": 17255}, "start": {"col": 32, "line": 441, "offset": 17251}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 31, "line": 441, "offset": 17250}, "start": {"col": 23, "line": 441, "offset": 17242}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "start": {"col": 5, "line": 441, "offset": 17224}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 40, "line": 442, "offset": 17297}, "extra": {"engine_kind": "OSS", "fingerprint": "826483e75c4b1c8cffc8759e93e155c771d186c34f0b8f13b63d0a500af33255ec90d7700ddd1407995fdd87b0f8fb87bad7b1ea5fd772cf862bb2952dc13249_1", "is_ignored": false, "lines": "    memcpy(auStack_180,&local_16c,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 442, "offset": 17268}, "start": {"col": 5, "line": 442, "offset": 17262}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "start": {"col": 5, "line": 442, "offset": 17262}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 40, "line": 442, "offset": 17297}, "extra": {"engine_kind": "OSS", "fingerprint": "a7e7c07a66ae1602aa12e54d2385b1c919d93507147f8a5e36d7808d14bcb6ce1c40db169bcdd8979bb3e30997e4ae9ff1e92758ad2f0561aa1248c39212d355_0", "is_ignored": false, "lines": "    memcpy(auStack_180,&local_16c,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_180", "end": {"col": 23, "line": 442, "offset": 17280}, "start": {"col": 12, "line": 442, "offset": 17269}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 39, "line": 442, "offset": 17296}, "start": {"col": 35, "line": 442, "offset": 17292}}, "$SRC": {"abstract_content": "&local_16c", "end": {"col": 34, "line": 442, "offset": 17291}, "start": {"col": 24, "line": 442, "offset": 17281}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "start": {"col": 5, "line": 442, "offset": 17262}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 443, "offset": 17334}, "extra": {"engine_kind": "OSS", "fingerprint": "826483e75c4b1c8cffc8759e93e155c771d186c34f0b8f13b63d0a500af33255ec90d7700ddd1407995fdd87b0f8fb87bad7b1ea5fd772cf862bb2952dc13249_2", "is_ignored": false, "lines": "    memcpy(puVar4,auStack_180,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 443, "offset": 17309}, "start": {"col": 5, "line": 443, "offset": 17303}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "start": {"col": 5, "line": 443, "offset": 17303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 443, "offset": 17334}, "extra": {"engine_kind": "OSS", "fingerprint": "e59b7466a24ebd1b1014456f242d6d9c114fade74b15e85d47b1b595b4def4956840b04738b94614443ae36a0578e42aa9eee98e44bd1438cbd039fc5363ed8a_0", "is_ignored": false, "lines": "    memcpy(puVar4,auStack_180,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar4", "end": {"col": 18, "line": 443, "offset": 17316}, "start": {"col": 12, "line": 443, "offset": 17310}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 35, "line": 443, "offset": 17333}, "start": {"col": 31, "line": 443, "offset": 17329}}, "$SRC": {"abstract_content": "auStack_180", "end": {"col": 30, "line": 443, "offset": 17328}, "start": {"col": 19, "line": 443, "offset": 17317}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00436018_00436018.c", "start": {"col": 5, "line": 443, "offset": 17303}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 35, "line": 15, "offset": 357}, "extra": {"engine_kind": "OSS", "fingerprint": "c0ff49081c49c713d7c202f8161440a48add43029a68c4665a7978a258f896641d49c355c52a7e3e10fc25617b500558739d53637d1090e6c0907c60260e1de8_0", "is_ignored": false, "lines": "      cVar1 = *(char *)(puVar4 + 1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "1", "end": {"col": 35, "line": 15, "offset": 357}, "start": {"col": 34, "line": 15, "offset": 356}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 12, "line": 15, "offset": 334}, "start": {"col": 7, "line": 15, "offset": 329}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00439fcc_00439fcc.c", "start": {"col": 7, "line": 15, "offset": 329}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 19, "line": 103, "offset": 2178}, "extra": {"engine_kind": "OSS", "fingerprint": "963a439fbdc33c37195ae0ee9a3f5c63ea5c4771a31ef6a5b94b85a11b89183ee162af1e17959285dafb48079340694f1a32d1dee3ae1b7e831f25953c1eedb9_0", "is_ignored": false, "lines": "      local_ea = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 19, "line": 103, "offset": 2178}, "start": {"col": 18, "line": 103, "offset": 2177}}, "$NARROW": {"abstract_content": "local_ea", "end": {"col": 15, "line": 103, "offset": 2174}, "start": {"col": 7, "line": 103, "offset": 2166}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 103, "offset": 2166}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 104, "offset": 2216}, "extra": {"engine_kind": "OSS", "fingerprint": "026621eb2acf4cdbc7852b036ac0e13b85a0ccd66f099c7fa37789f5e9d368373feda29b71524c0ddb5e5036138ed1162321a670c1df8ecc73541d853aa80c9a_0", "is_ignored": false, "lines": "      memcpy(local_5c,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 104, "offset": 2192}, "start": {"col": 7, "line": 104, "offset": 2186}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 104, "offset": 2186}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 104, "offset": 2216}, "extra": {"engine_kind": "OSS", "fingerprint": "349183bdf3eaddd7620794ccb510317c4cfb5f120351d2b3d3e204171308fc7ba936fbacb78bbe5c299f1da4c11773a733094fbb6f65391ead85a87d3a34bc94_0", "is_ignored": false, "lines": "      memcpy(local_5c,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_5c", "end": {"col": 22, "line": 104, "offset": 2201}, "start": {"col": 14, "line": 104, "offset": 2193}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 36, "line": 104, "offset": 2215}, "start": {"col": 32, "line": 104, "offset": 2211}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 31, "line": 104, "offset": 2210}, "start": {"col": 23, "line": 104, "offset": 2202}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 104, "offset": 2186}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 105, "offset": 2254}, "extra": {"engine_kind": "OSS", "fingerprint": "026621eb2acf4cdbc7852b036ac0e13b85a0ccd66f099c7fa37789f5e9d368373feda29b71524c0ddb5e5036138ed1162321a670c1df8ecc73541d853aa80c9a_1", "is_ignored": false, "lines": "      memcpy(local_58,local_5c,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 105, "offset": 2230}, "start": {"col": 7, "line": 105, "offset": 2224}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 105, "offset": 2224}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 105, "offset": 2254}, "extra": {"engine_kind": "OSS", "fingerprint": "642191bc84536f6458886c8bfd287412796ff84391fb74d10cf3d1e363e46752a62e7150e7afe282564f5a89a47760f83b21b9d5550404aff596a228f3fa7e2f_0", "is_ignored": false, "lines": "      memcpy(local_58,local_5c,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_58", "end": {"col": 22, "line": 105, "offset": 2239}, "start": {"col": 14, "line": 105, "offset": 2231}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 36, "line": 105, "offset": 2253}, "start": {"col": 32, "line": 105, "offset": 2249}}, "$SRC": {"abstract_content": "local_5c", "end": {"col": 31, "line": 105, "offset": 2248}, "start": {"col": 23, "line": 105, "offset": 2240}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 7, "line": 105, "offset": 2224}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 23, "line": 160, "offset": 4899}, "extra": {"engine_kind": "OSS", "fingerprint": "963a439fbdc33c37195ae0ee9a3f5c63ea5c4771a31ef6a5b94b85a11b89183ee162af1e17959285dafb48079340694f1a32d1dee3ae1b7e831f25953c1eedb9_1", "is_ignored": false, "lines": "          local_ea = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 23, "line": 160, "offset": 4899}, "start": {"col": 22, "line": 160, "offset": 4898}}, "$NARROW": {"abstract_content": "local_ea", "end": {"col": 19, "line": 160, "offset": 4895}, "start": {"col": 11, "line": 160, "offset": 4887}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 160, "offset": 4887}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 163, "offset": 5003}, "extra": {"engine_kind": "OSS", "fingerprint": "026621eb2acf4cdbc7852b036ac0e13b85a0ccd66f099c7fa37789f5e9d368373feda29b71524c0ddb5e5036138ed1162321a670c1df8ecc73541d853aa80c9a_2", "is_ignored": false, "lines": "          memcpy(&local_78,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 163, "offset": 4978}, "start": {"col": 11, "line": 163, "offset": 4972}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 163, "offset": 4972}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 163, "offset": 5003}, "extra": {"engine_kind": "OSS", "fingerprint": "b774bee08b230d01444aaee6c763e03d87d16adeda64454a0d231e6116086887ae36f9715732f45750fd8d978b5be797cbab35b49de8bae487b4dea51cf33ae6_0", "is_ignored": false, "lines": "          memcpy(&local_78,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&local_78", "end": {"col": 27, "line": 163, "offset": 4988}, "start": {"col": 18, "line": 163, "offset": 4979}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 41, "line": 163, "offset": 5002}, "start": {"col": 37, "line": 163, "offset": 4998}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 36, "line": 163, "offset": 4997}, "start": {"col": 28, "line": 163, "offset": 4989}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 163, "offset": 4972}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 164, "offset": 5046}, "extra": {"engine_kind": "OSS", "fingerprint": "026621eb2acf4cdbc7852b036ac0e13b85a0ccd66f099c7fa37789f5e9d368373feda29b71524c0ddb5e5036138ed1162321a670c1df8ecc73541d853aa80c9a_3", "is_ignored": false, "lines": "          memcpy(local_5c,&local_78,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 164, "offset": 5021}, "start": {"col": 11, "line": 164, "offset": 5015}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 164, "offset": 5015}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 164, "offset": 5046}, "extra": {"engine_kind": "OSS", "fingerprint": "29a45557804172341b66c6cd4d76e4ea350491c37a3241d94111f0077e91d881fc44a1893df829d94a04aad0d89c9d93eb5cca8d341b5ea9fed3a52ee7707e96_0", "is_ignored": false, "lines": "          memcpy(local_5c,&local_78,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_5c", "end": {"col": 26, "line": 164, "offset": 5030}, "start": {"col": 18, "line": 164, "offset": 5022}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 41, "line": 164, "offset": 5045}, "start": {"col": 37, "line": 164, "offset": 5041}}, "$SRC": {"abstract_content": "&local_78", "end": {"col": 36, "line": 164, "offset": 5040}, "start": {"col": 27, "line": 164, "offset": 5031}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043a370_0043a370.c", "start": {"col": 11, "line": 164, "offset": 5015}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 166, "offset": 7011}, "extra": {"engine_kind": "OSS", "fingerprint": "838c464543d63071effc8c7af3c77e2f2be422ab59b473b7589d0a31a5503431e0a4ae73a842d921e17b45a10624f8d392c6e8f1444f15316b2006e13c592b94_0", "is_ignored": false, "lines": "    memcpy(local_6c,(void *)(param_2 + 0x16),0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 166, "offset": 6971}, "start": {"col": 5, "line": 166, "offset": 6965}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "start": {"col": 5, "line": 166, "offset": 6965}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 166, "offset": 7011}, "extra": {"engine_kind": "OSS", "fingerprint": "cef8183543457b52703a2b28e61dace91be92a50ea0610470ac9724b3afa6c0b35e16289c6d1aa86d14e0dc6f8ec8ebf0338539f9a8b32537d24a854e77bdb0b_0", "is_ignored": false, "lines": "    memcpy(local_6c,(void *)(param_2 + 0x16),0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_6c", "end": {"col": 20, "line": 166, "offset": 6980}, "start": {"col": 12, "line": 166, "offset": 6972}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 50, "line": 166, "offset": 7010}, "start": {"col": 46, "line": 166, "offset": 7006}}, "$SRC": {"abstract_content": "(void*param_2+0x16", "end": {"col": 44, "line": 166, "offset": 7004}, "start": {"col": 21, "line": 166, "offset": 6981}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "start": {"col": 5, "line": 166, "offset": 6965}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 168, "offset": 7081}, "extra": {"engine_kind": "OSS", "fingerprint": "838c464543d63071effc8c7af3c77e2f2be422ab59b473b7589d0a31a5503431e0a4ae73a842d921e17b45a10624f8d392c6e8f1444f15316b2006e13c592b94_1", "is_ignored": false, "lines": "    memcpy(local_58,(void *)(param_2 + 0x26),0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 168, "offset": 7041}, "start": {"col": 5, "line": 168, "offset": 7035}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "start": {"col": 5, "line": 168, "offset": 7035}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 168, "offset": 7081}, "extra": {"engine_kind": "OSS", "fingerprint": "e7e650685123b8dd4d1bbd7b6050cfeba0dd4b651e4034021a87ace518608576683c12f9e5266eda8a4face866e66e9dd216f79b5710aa6ad5e55a1a628c6173_0", "is_ignored": false, "lines": "    memcpy(local_58,(void *)(param_2 + 0x26),0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_58", "end": {"col": 20, "line": 168, "offset": 7050}, "start": {"col": 12, "line": 168, "offset": 7042}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 50, "line": 168, "offset": 7080}, "start": {"col": 46, "line": 168, "offset": 7076}}, "$SRC": {"abstract_content": "(void*param_2+0x26", "end": {"col": 44, "line": 168, "offset": 7074}, "start": {"col": 21, "line": 168, "offset": 7051}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "start": {"col": 5, "line": 168, "offset": 7035}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 38, "line": 169, "offset": 7120}, "extra": {"engine_kind": "OSS", "fingerprint": "059f38d5a3e3524ce3d90b5eb68b7e1c66275ab366c242ce4235147d555a4424f4465cb6cf994bf9aa7c95cec6e1fa47a92e4be59c0b265822a2e367554ddf2b_0", "is_ignored": false, "lines": "    cVar15 = *(char *)(param_2 + 0x14);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 31, "line": 169, "offset": 7113}, "start": {"col": 24, "line": 169, "offset": 7106}}, "$NARROW": {"abstract_content": "cVar15", "end": {"col": 11, "line": 169, "offset": 7093}, "start": {"col": 5, "line": 169, "offset": 7087}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "start": {"col": 5, "line": 169, "offset": 7087}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 38, "line": 196, "offset": 8218}, "extra": {"engine_kind": "OSS", "fingerprint": "059f38d5a3e3524ce3d90b5eb68b7e1c66275ab366c242ce4235147d555a4424f4465cb6cf994bf9aa7c95cec6e1fa47a92e4be59c0b265822a2e367554ddf2b_1", "is_ignored": false, "lines": "    cVar15 = *(char *)(param_2 + 0x17);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 31, "line": 196, "offset": 8211}, "start": {"col": 24, "line": 196, "offset": 8204}}, "$NARROW": {"abstract_content": "cVar15", "end": {"col": 11, "line": 196, "offset": 8191}, "start": {"col": 5, "line": 196, "offset": 8185}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043b970_0043b970.c", "start": {"col": 5, "line": 196, "offset": 8185}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 48, "line": 18, "offset": 697}, "extra": {"engine_kind": "OSS", "fingerprint": "7ab987686ce78cb34fe08b2d8a67e03f95b294b984391d6e45bf6553eb7dacf7baa8bc73843a2d605ff45143d68b9af3edd5f2ca4e02f9f7cfcfbc2181b3ed11_0", "is_ignored": false, "lines": "    local_250 = mDNS_snprintf(auStack_24f,0x3e,\"%d-%d-%d-%d.%d %#s\",*(undefined *)(param_1 + 0x2a9c)\n                              ,*(undefined *)(param_1 + 0x2a9d),*(undefined *)(param_1 + 0x2a9e),\n                              *(undefined *)(param_1 + 0x2a9f),*(undefined *)(param_1 + 0x2aa0),\n                              param_1 + 0x1a58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 30, "line": 15, "offset": 383}, "start": {"col": 17, "line": 15, "offset": 370}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043c740_0043c740.c", "start": {"col": 17, "line": 15, "offset": 370}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 29, "offset": 911}, "extra": {"engine_kind": "OSS", "fingerprint": "2f2984eac15fb50be7ed4d4ffa05ceb9e0a234a40385048278b89cf7eb8fe941ac26dda491aca8652107ff37a503c846c8b367be94f79ac308d7468c3bd63583_0", "is_ignored": false, "lines": "      cVar1 = *(char *)(param_2 + 1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 32, "line": 29, "offset": 907}, "start": {"col": 25, "line": 29, "offset": 900}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 12, "line": 29, "offset": 887}, "start": {"col": 7, "line": 29, "offset": 882}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cad4_0043cad4.c", "start": {"col": 7, "line": 29, "offset": 882}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 43, "line": 30, "offset": 956}, "extra": {"engine_kind": "OSS", "fingerprint": "36ca9deb7ab25285cd3e247c628e77a55b9ef07870f3a6c7f31cfd4cd9fb8f62cff45d10c91faef6a7824b13279cb6cb98f0d13ae1c9a9f659aa0cf5374dc929_0", "is_ignored": false, "lines": "      cVar2 = *(char *)((int)puVar8 + 0x4d);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar8", "end": {"col": 36, "line": 30, "offset": 949}, "start": {"col": 25, "line": 30, "offset": 938}}, "$NARROW": {"abstract_content": "cVar2", "end": {"col": 12, "line": 30, "offset": 925}, "start": {"col": 7, "line": 30, "offset": 920}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cad4_0043cad4.c", "start": {"col": 7, "line": 30, "offset": 920}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 60, "line": 46, "offset": 1796}, "extra": {"engine_kind": "OSS", "fingerprint": "f9b15ed287fb21ba3ffe408bc6be85eb21189d1c0bfcafcdd750732dfb35cc7ada2e04088779db91ddeb813e983d4aa8ce29453c52774012223e5d673f80d5cb_0", "is_ignored": false, "lines": "        memcpy((void *)((int)puVar8 + 0x4e),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 46, "offset": 1751}, "start": {"col": 9, "line": 46, "offset": 1745}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cad4_0043cad4.c", "start": {"col": 9, "line": 46, "offset": 1745}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 60, "line": 46, "offset": 1796}, "extra": {"engine_kind": "OSS", "fingerprint": "47da025de8ae2ff4a5ac4a97d57a3a3ed45ecee0e9191fb8e49285bafe460fff8dc4ebd703274bb8783a6796dd4c55ee187ee283fcc07ff2d507d7e6f5bab780_0", "is_ignored": false, "lines": "        memcpy((void *)((int)puVar8 + 0x4e),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*(int puVar8+0x4e", "end": {"col": 43, "line": 46, "offset": 1779}, "start": {"col": 16, "line": 46, "offset": 1752}}, "$LEN": {"abstract_content": "6", "end": {"col": 59, "line": 46, "offset": 1795}, "start": {"col": 58, "line": 46, "offset": 1794}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 57, "line": 46, "offset": 1793}, "start": {"col": 45, "line": 46, "offset": 1781}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cad4_0043cad4.c", "start": {"col": 9, "line": 46, "offset": 1745}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 305, "offset": 12315}, "extra": {"engine_kind": "OSS", "fingerprint": "c5005f69e8e0a7485a5c68d30f48dde7e00a6db1e9e2b6762135a6467ac4692277312cb52da276ff3313b54fb4ad48abbe5cfb5f1ae4827e75a2ef1d2d3cd528_0", "is_ignored": false, "lines": "            memcpy(local_30 + 0x28,zerov6Addr,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 305, "offset": 12282}, "start": {"col": 13, "line": 305, "offset": 12276}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "start": {"col": 13, "line": 305, "offset": 12276}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 305, "offset": 12315}, "extra": {"engine_kind": "OSS", "fingerprint": "9df79b2da7df3b1f86d052ea629da4be490f90ce53ab3fcfb54a2bef9a1fa7699f444f4e95bd5152628695a478b14ad5012ecd50520ee68c0dfd68cc74d2693b_0", "is_ignored": false, "lines": "            memcpy(local_30 + 0x28,zerov6Addr,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_30+0x28", "end": {"col": 35, "line": 305, "offset": 12298}, "start": {"col": 20, "line": 305, "offset": 12283}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 51, "line": 305, "offset": 12314}, "start": {"col": 47, "line": 305, "offset": 12310}}, "$SRC": {"abstract_content": "zerov6Addr", "end": {"col": 46, "line": 305, "offset": 12309}, "start": {"col": 36, "line": 305, "offset": 12299}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "start": {"col": 13, "line": 305, "offset": 12276}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 390, "offset": 15513}, "extra": {"engine_kind": "OSS", "fingerprint": "c5005f69e8e0a7485a5c68d30f48dde7e00a6db1e9e2b6762135a6467ac4692277312cb52da276ff3313b54fb4ad48abbe5cfb5f1ae4827e75a2ef1d2d3cd528_1", "is_ignored": false, "lines": "              memcpy(ppiVar17 + 0x28,local_88,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 21, "line": 390, "offset": 15482}, "start": {"col": 15, "line": 390, "offset": 15476}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "start": {"col": 15, "line": 390, "offset": 15476}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 390, "offset": 15513}, "extra": {"engine_kind": "OSS", "fingerprint": "1a8fd98f149621677c9887a85c9fec0e149d88664e444db84cbc0abab9a09fe7fa624ed9908ea03d3b2e1d90f940dd032682c6f4d4f4f74883e94ea16b75331b_0", "is_ignored": false, "lines": "              memcpy(ppiVar17 + 0x28,local_88,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "ppiVar17+0x28", "end": {"col": 37, "line": 390, "offset": 15498}, "start": {"col": 22, "line": 390, "offset": 15483}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 51, "line": 390, "offset": 15512}, "start": {"col": 47, "line": 390, "offset": 15508}}, "$SRC": {"abstract_content": "local_88", "end": {"col": 46, "line": 390, "offset": 15507}, "start": {"col": 38, "line": 390, "offset": 15499}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "start": {"col": 15, "line": 390, "offset": 15476}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 56, "line": 399, "offset": 15958}, "extra": {"engine_kind": "OSS", "fingerprint": "c5005f69e8e0a7485a5c68d30f48dde7e00a6db1e9e2b6762135a6467ac4692277312cb52da276ff3313b54fb4ad48abbe5cfb5f1ae4827e75a2ef1d2d3cd528_2", "is_ignored": false, "lines": "              memcpy(ppiVar17 + 0x28,onesIPv6Addr,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 21, "line": 399, "offset": 15923}, "start": {"col": 15, "line": 399, "offset": 15917}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "start": {"col": 15, "line": 399, "offset": 15917}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 56, "line": 399, "offset": 15958}, "extra": {"engine_kind": "OSS", "fingerprint": "8eb86b6f5ff14d513772d6d1cc1dbe37070e3f2dc13bed77cb8e02ecb3fb8354fe597a697720cfda3b6f85ee6ce3d3b7233892b5fa9fc004f05048de5208820c_0", "is_ignored": false, "lines": "              memcpy(ppiVar17 + 0x28,onesIPv6Addr,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "ppiVar17+0x28", "end": {"col": 37, "line": 399, "offset": 15939}, "start": {"col": 22, "line": 399, "offset": 15924}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 55, "line": 399, "offset": 15957}, "start": {"col": 51, "line": 399, "offset": 15953}}, "$SRC": {"abstract_content": "onesIPv6Addr", "end": {"col": 50, "line": 399, "offset": 15952}, "start": {"col": 38, "line": 399, "offset": 15940}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043cd50_0043cd50.c", "start": {"col": 15, "line": 399, "offset": 15917}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 7, "offset": 112}, "extra": {"engine_kind": "OSS", "fingerprint": "4a28b251802e2e1466293ff41f77528cec61d01f0c889fe73b8a653bc675af3bc1effa8bfb6eea1a8d3144405978b89f3c66b166d5f57dc31bbbb0b2a321d7ef_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 7, "offset": 71}, "start": {"col": 3, "line": 7, "offset": 65}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e0f8_0043e0f8.c", "start": {"col": 3, "line": 7, "offset": 65}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 7, "offset": 112}, "extra": {"engine_kind": "OSS", "fingerprint": "4de507da4634aa2a72f95b995015589ffe192181e704517501085869e3d6ab509dedcf4f90d41a17485987c4ddbf1f10acabd0790c7f553f1692e03182cc2d4e_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x4e),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x4e", "end": {"col": 33, "line": 7, "offset": 95}, "start": {"col": 10, "line": 7, "offset": 72}}, "$LEN": {"abstract_content": "6", "end": {"col": 49, "line": 7, "offset": 111}, "start": {"col": 48, "line": 7, "offset": 110}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 47, "line": 7, "offset": 109}, "start": {"col": 35, "line": 7, "offset": 97}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e0f8_0043e0f8.c", "start": {"col": 3, "line": 7, "offset": 65}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 47, "line": 33, "offset": 1239}, "extra": {"engine_kind": "OSS", "fingerprint": "5f7246f8d4bd0f96c36ecc2c3abdb139d87293c9662ca2e40553d197256a633f70bba2d9e273f22f27203cd7f44fd2c1763572c70fbcc992ce4bab5f997abc6d_0", "is_ignored": false, "lines": "          cVar1 = *(char *)((int)puVar7 + 0x4d);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar7", "end": {"col": 40, "line": 33, "offset": 1232}, "start": {"col": 29, "line": 33, "offset": 1221}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 16, "line": 33, "offset": 1208}, "start": {"col": 11, "line": 33, "offset": 1203}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e188_0043e188.c", "start": {"col": 11, "line": 33, "offset": 1203}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 40, "line": 34, "offset": 1281}, "extra": {"engine_kind": "OSS", "fingerprint": "df331c2786f978f2c297e26f649819b4a69819b8a57e57f9a3aefd8188ab914ec44f44b9f47f3962884f8eeeb7ca8f3a14f64779787dbbae6dcb05a140eec44b_0", "is_ignored": false, "lines": "          cVar2 = *(char *)(param_2 + 1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 36, "line": 34, "offset": 1277}, "start": {"col": 29, "line": 34, "offset": 1270}}, "$NARROW": {"abstract_content": "cVar2", "end": {"col": 16, "line": 34, "offset": 1257}, "start": {"col": 11, "line": 34, "offset": 1252}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e188_0043e188.c", "start": {"col": 11, "line": 34, "offset": 1252}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 49, "line": 34, "offset": 1511}, "extra": {"engine_kind": "OSS", "fingerprint": "7228f322e313e00f1a1235215ecb2f653ff81b2c82d7d3278be203a21cfb5d16165688b46b9bff522a62378520fc018592ddf8a9f21719626b0c03f2af14fd9a_0", "is_ignored": false, "lines": "            cVar1 = *(char *)((int)puVar5 + 0x4d);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar5", "end": {"col": 42, "line": 34, "offset": 1504}, "start": {"col": 31, "line": 34, "offset": 1493}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 18, "line": 34, "offset": 1480}, "start": {"col": 13, "line": 34, "offset": 1475}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e3a4_0043e3a4.c", "start": {"col": 13, "line": 34, "offset": 1475}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 42, "line": 35, "offset": 1555}, "extra": {"engine_kind": "OSS", "fingerprint": "48d72e0818ea2c5faccb99dcde7c7b1a85efed3b486ca6824d113e7b331bed78726b0ae804ed5f9d167f28983b98910d6f4c4115ea4acf81367e7ac0f8721f50_0", "is_ignored": false, "lines": "            cVar2 = *(char *)(param_2 + 1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 38, "line": 35, "offset": 1551}, "start": {"col": 31, "line": 35, "offset": 1544}}, "$NARROW": {"abstract_content": "cVar2", "end": {"col": 18, "line": 35, "offset": 1531}, "start": {"col": 13, "line": 35, "offset": 1526}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e3a4_0043e3a4.c", "start": {"col": 13, "line": 35, "offset": 1526}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 47, "line": 22, "offset": 653}, "extra": {"engine_kind": "OSS", "fingerprint": "63e740ace9c773a44610448a8ad01c316713f78fc1e445b46db0ce8c391b43344f67f6a375f7179babda698a84d7cfede3a53e9bd4f979b4b194a07cdacd996d_0", "is_ignored": false, "lines": "          cVar1 = *(char *)((int)puVar4 + 0x4d);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar4", "end": {"col": 40, "line": 22, "offset": 646}, "start": {"col": 29, "line": 22, "offset": 635}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 16, "line": 22, "offset": 622}, "start": {"col": 11, "line": 22, "offset": 617}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0043e5f8_0043e5f8.c", "start": {"col": 11, "line": 22, "offset": 617}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 78, "line": 247, "offset": 10066}, "extra": {"engine_kind": "OSS", "fingerprint": "e9cee5cad95019736f29cc916a8649a06fa5df095002e59eb47fe9d76508b1295d05428a9e7c8bff8c8dcc36000aadf564bd2be4210b32af8b5a5d6afce82aa6_0", "is_ignored": false, "lines": "                memcpy((void *)(puVar5[9] + 4),(void *)(puVar14[9] + 4),0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 23, "line": 247, "offset": 10011}, "start": {"col": 17, "line": 247, "offset": 10005}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004410b8_004410b8.c", "start": {"col": 17, "line": 247, "offset": 10005}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 78, "line": 247, "offset": 10066}, "extra": {"engine_kind": "OSS", "fingerprint": "3eee1a51620234abfdab30886f4edb6779b2024aae25e3e0a440a1c41dfdc3edb9c9a64b08334829990864f77838dd3aaf249948e7bb1123ab0cd2a9173b7465_0", "is_ignored": false, "lines": "                memcpy((void *)(puVar5[9] + 4),(void *)(puVar14[9] + 4),0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*puVar5[9]+4", "end": {"col": 46, "line": 247, "offset": 10034}, "start": {"col": 24, "line": 247, "offset": 10012}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 77, "line": 247, "offset": 10065}, "start": {"col": 73, "line": 247, "offset": 10061}}, "$SRC": {"abstract_content": "(void*puVar14[9]+4", "end": {"col": 71, "line": 247, "offset": 10059}, "start": {"col": 48, "line": 247, "offset": 10036}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004410b8_004410b8.c", "start": {"col": 17, "line": 247, "offset": 10005}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 48, "line": 331, "offset": 11108}, "extra": {"engine_kind": "OSS", "fingerprint": "be249fc243facdb84dae9cb3bd093170dee311200a3bc9ffbf8955b19a9dc21e89a8c97e6c056bd0dfba94249c4ecb176e9b2fb84b73d9371fe0bf14c266e1cb_0", "is_ignored": false, "lines": "          (sVar16 = *(short *)(param_1 + 0x7fae), sVar16 != 0xfa)))) {", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 39, "line": 331, "offset": 11099}, "start": {"col": 32, "line": 331, "offset": 11092}}, "$NARROW": {"abstract_content": "sVar16", "end": {"col": 18, "line": 331, "offset": 11078}, "start": {"col": 12, "line": 331, "offset": 11072}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "start": {"col": 12, "line": 331, "offset": 11072}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 51, "line": 695, "offset": 31594}, "extra": {"engine_kind": "OSS", "fingerprint": "be249fc243facdb84dae9cb3bd093170dee311200a3bc9ffbf8955b19a9dc21e89a8c97e6c056bd0dfba94249c4ecb176e9b2fb84b73d9371fe0bf14c266e1cb_1", "is_ignored": false, "lines": "              sVar16 = *(short *)(param_1 + 0x7fae);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 42, "line": 695, "offset": 31585}, "start": {"col": 35, "line": 695, "offset": 31578}}, "$NARROW": {"abstract_content": "sVar16", "end": {"col": 21, "line": 695, "offset": 31564}, "start": {"col": 15, "line": 695, "offset": 31558}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "start": {"col": 15, "line": 695, "offset": 31558}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 49, "line": 710, "offset": 32271}, "extra": {"engine_kind": "OSS", "fingerprint": "be249fc243facdb84dae9cb3bd093170dee311200a3bc9ffbf8955b19a9dc21e89a8c97e6c056bd0dfba94249c4ecb176e9b2fb84b73d9371fe0bf14c266e1cb_2", "is_ignored": false, "lines": "            sVar16 = *(short *)(param_1 + 0x7fae);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 40, "line": 710, "offset": 32262}, "start": {"col": 33, "line": 710, "offset": 32255}}, "$NARROW": {"abstract_content": "sVar16", "end": {"col": 19, "line": 710, "offset": 32241}, "start": {"col": 13, "line": 710, "offset": 32235}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "start": {"col": 13, "line": 710, "offset": 32235}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 30, "line": 1091, "offset": 52017}, "extra": {"engine_kind": "OSS", "fingerprint": "ae74269979e8c966b2d8910063a53840edb880efb8503666744b0c7d1c8558ed8755bbb2d55c5c318ded05623ee3103d9c908c7761070f61b27b4e25a4d8e318_0", "is_ignored": false, "lines": "                sVar16 = 0x10;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x10", "end": {"col": 30, "line": 1091, "offset": 52017}, "start": {"col": 26, "line": 1091, "offset": 52013}}, "$NARROW": {"abstract_content": "sVar16", "end": {"col": 23, "line": 1091, "offset": 52010}, "start": {"col": 17, "line": 1091, "offset": 52004}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "start": {"col": 17, "line": 1091, "offset": 52004}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 34, "line": 1098, "offset": 52321}, "extra": {"engine_kind": "OSS", "fingerprint": "efb0fbedfd510e634b84bdc82b3119f6fd368bdb56b3c506f52b253026b2d2bcdaa468ed920098ed01203b679c57e181cee7ed60a40c303191f9856ddff47100_0", "is_ignored": false, "lines": "                   (sVar16 = 0x21, ppppppppiVar20 == (int ********)0x1194)) goto LAB_004452d0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x21", "end": {"col": 34, "line": 1098, "offset": 52321}, "start": {"col": 30, "line": 1098, "offset": 52317}}, "$NARROW": {"abstract_content": "sVar16", "end": {"col": 27, "line": 1098, "offset": 52314}, "start": {"col": 21, "line": 1098, "offset": 52308}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00442f38_00442f38.c", "start": {"col": 21, "line": 1098, "offset": 52308}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 53, "line": 47, "offset": 1853}, "extra": {"engine_kind": "OSS", "fingerprint": "4d03cfdcacb056350005f62f4518d32f4a3f17e081c940e468343c3349c687431af3e144fef28210f104389079b43ee20057c6f760d42a0c33da1799edf2aca4_0", "is_ignored": false, "lines": "      mDNS_snprintf(local_70,0x4a,\"%d.%d.%d.%d.in-addr.arpa.\",*(undefined *)((int)param_2 + 0x152b),\n                    *(undefined *)((int)param_2 + 0x152a),*(undefined *)((int)param_2 + 0x1529),\n                    *(undefined *)(param_2 + 0x54a));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 20, "line": 45, "offset": 1622}, "start": {"col": 7, "line": 45, "offset": 1609}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004474d0_004474d0.c", "start": {"col": 7, "line": 45, "offset": 1609}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 64, "line": 51, "offset": 2012}, "extra": {"engine_kind": "OSS", "fingerprint": "38c0fc3a22b4dcef1b90baa6a14fc3b7563709c1a34dc2c1078954da083af820d0c43ddaadd5a548b63d2c3e4e0040acfc0fab3117c2e2e2b05105ab0157999d_0", "is_ignored": false, "lines": "      memcpy((void *)(param_2[0x2ae] + 4),param_2 + 0x54a,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 51, "offset": 1961}, "start": {"col": 7, "line": 51, "offset": 1955}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004474d0_004474d0.c", "start": {"col": 7, "line": 51, "offset": 1955}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 64, "line": 51, "offset": 2012}, "extra": {"engine_kind": "OSS", "fingerprint": "8e024745d836c71a3a6f715842119ed4108a9893b9aaf0d40012a280ec1fc40aefbd65c34fd41a2abda313c1b8af03831f169c7343917a897b179634eb442d6e_0", "is_ignored": false, "lines": "      memcpy((void *)(param_2[0x2ae] + 4),param_2 + 0x54a,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2[0x2ae]+4", "end": {"col": 41, "line": 51, "offset": 1989}, "start": {"col": 14, "line": 51, "offset": 1962}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 63, "line": 51, "offset": 2011}, "start": {"col": 59, "line": 51, "offset": 2007}}, "$SRC": {"abstract_content": "param_2+0x54a", "end": {"col": 58, "line": 51, "offset": 2006}, "start": {"col": 43, "line": 51, "offset": 1991}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004474d0_004474d0.c", "start": {"col": 7, "line": 51, "offset": 1955}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 64, "offset": 2499}, "extra": {"engine_kind": "OSS", "fingerprint": "4d03cfdcacb056350005f62f4518d32f4a3f17e081c940e468343c3349c687431af3e144fef28210f104389079b43ee20057c6f760d42a0c33da1799edf2aca4_1", "is_ignored": false, "lines": "      mDNS_snprintf(local_70 + 0x40,10,\"ip6.arpa.\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 20, "line": 64, "offset": 2467}, "start": {"col": 7, "line": 64, "offset": 2454}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_004474d0_004474d0.c", "start": {"col": 7, "line": 64, "offset": 2454}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 57, "line": 17, "offset": 399}, "extra": {"engine_kind": "OSS", "fingerprint": "972985116e40ec131022f6e22c469dd828eacf7f8cd08203d756c12b70b50d69d1d737000d781cd10d783f88f4423b37206ba6c63ddd995e43e33e4615cc4b39_0", "is_ignored": false, "lines": "      memcpy(auStack_50,(void *)(param_1 + 0x1a98),0x40);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 17, "offset": 355}, "start": {"col": 7, "line": 17, "offset": 349}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00447a20_00447a20.c", "start": {"col": 7, "line": 17, "offset": 349}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 57, "line": 17, "offset": 399}, "extra": {"engine_kind": "OSS", "fingerprint": "181c5d62640c943be6605072daf69ca946389646b25f96fbaabc88bd897536df111982c7cddaa3896f79a0d33cc54fb513374ee1c4292e6eeff47145040500c6_0", "is_ignored": false, "lines": "      memcpy(auStack_50,(void *)(param_1 + 0x1a98),0x40);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_50", "end": {"col": 24, "line": 17, "offset": 366}, "start": {"col": 14, "line": 17, "offset": 356}}, "$LEN": {"abstract_content": "0x40", "end": {"col": 56, "line": 17, "offset": 398}, "start": {"col": 52, "line": 17, "offset": 394}}, "$SRC": {"abstract_content": "(void*param_1+0x1a98", "end": {"col": 50, "line": 17, "offset": 392}, "start": {"col": 25, "line": 17, "offset": 367}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00447a20_00447a20.c", "start": {"col": 7, "line": 17, "offset": 349}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 55, "line": 137, "offset": 4782}, "extra": {"engine_kind": "OSS", "fingerprint": "88bd6cddccd9a01883a62898360cba46d221d5b0bce664f51362d4c1f12a7985bc2a95428f89fda57505132cfe456d99a48ff051c275b94f5434a353e6664226_0", "is_ignored": false, "lines": "        sVar3 = mDNSPlatformStrLen((char *)param_2[6]);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "6", "end": {"col": 53, "line": 137, "offset": 4780}, "start": {"col": 52, "line": 137, "offset": 4779}}, "$UNSIGNED": {"abstract_content": "sVar3", "end": {"col": 14, "line": 137, "offset": 4741}, "start": {"col": 9, "line": 137, "offset": 4736}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00448500_00448500.c", "start": {"col": 9, "line": 137, "offset": 4736}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 21, "offset": 600}, "extra": {"engine_kind": "OSS", "fingerprint": "bc6baa87af8c485c9c09d029744501e70ab405ad9e5fdf65d50863a28c23ea3294329e0f639ebd7651ac3b20f0b25c5c112a358734e3cb9b78f093b138a7150a_0", "is_ignored": false, "lines": "    memcpy(param_3,auStack_2a0,0x40);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 21, "offset": 574}, "start": {"col": 5, "line": 21, "offset": 568}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00448dac_00448dac.c", "start": {"col": 5, "line": 21, "offset": 568}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 21, "offset": 600}, "extra": {"engine_kind": "OSS", "fingerprint": "778841ea5e7738568c9a5a7f134e6bef3597be02b398eff133f045fc3d0017e3d185e0c03722be885a731d48cf81b131f4cebbf7d7af15d1bddb59bb3f9ec558_0", "is_ignored": false, "lines": "    memcpy(param_3,auStack_2a0,0x40);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_3", "end": {"col": 19, "line": 21, "offset": 582}, "propagated_value": {"svalue_abstract_content": "auStack_260", "svalue_end": {"col": 26, "line": 20, "offset": 562}, "svalue_start": {"col": 15, "line": 20, "offset": 551}}, "start": {"col": 12, "line": 21, "offset": 575}}, "$LEN": {"abstract_content": "0x40", "end": {"col": 36, "line": 21, "offset": 599}, "start": {"col": 32, "line": 21, "offset": 595}}, "$SRC": {"abstract_content": "auStack_2a0", "end": {"col": 31, "line": 21, "offset": 594}, "start": {"col": 20, "line": 21, "offset": 583}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00448dac_00448dac.c", "start": {"col": 5, "line": 21, "offset": 568}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 84, "line": 23, "offset": 794}, "extra": {"engine_kind": "OSS", "fingerprint": "465814a47a1cf56a862cfb26f409a2e1cabda4cb214dde069486a6a10bdfa9c5004df610509c3cedfb41a283c92a50605d93d7f554ebe06ef4698bba453452d8_0", "is_ignored": false, "lines": "        local_50 = mDNS_snprintf(auStack_4f,0x3e,\"%d-%d-%d-%d.%d %#s\",\n                                 *(undefined *)(param_1 + 0x2a9c),*(undefined *)(param_1 + 0x2a9d),\n                                 *(undefined *)(param_1 + 0x2a9e),uVar3,\n                                 *(undefined *)(param_1 + 0x2aa0),param_1 + 0x1a58);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 20, "offset": 499}, "start": {"col": 20, "line": 20, "offset": 486}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00448f3c_00448f3c.c", "start": {"col": 20, "line": 20, "offset": 486}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 41, "line": 140, "offset": 5193}, "extra": {"engine_kind": "OSS", "fingerprint": "8cd4a62c48c6badc33b68a076ce3c2e77d15078891dba44e1b7d436620daa169985d07456d42f216d64c2dc9eac4d186911bc46d39f31a5173b2078269db4b92_0", "is_ignored": false, "lines": "      cVar1 = *(char *)(param_1 + 0x2aa1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 32, "line": 140, "offset": 5184}, "start": {"col": 25, "line": 140, "offset": 5177}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 12, "line": 140, "offset": 5164}, "start": {"col": 7, "line": 140, "offset": 5159}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c", "start": {"col": 7, "line": 140, "offset": 5159}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 40, "line": 183, "offset": 6913}, "extra": {"engine_kind": "OSS", "fingerprint": "8cd4a62c48c6badc33b68a076ce3c2e77d15078891dba44e1b7d436620daa169985d07456d42f216d64c2dc9eac4d186911bc46d39f31a5173b2078269db4b92_1", "is_ignored": false, "lines": "      cVar1 = *(char *)(param_1 + 0x275);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 32, "line": 183, "offset": 6905}, "start": {"col": 25, "line": 183, "offset": 6898}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 12, "line": 183, "offset": 6885}, "start": {"col": 7, "line": 183, "offset": 6880}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_00449628_00449628.c", "start": {"col": 7, "line": 183, "offset": 6880}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 16, "offset": 415}, "extra": {"engine_kind": "OSS", "fingerprint": "18c6c0e73fa80ecff7407a9d64cf8fa69a22baad3f6b2c2be277460850fcdc697992ba4ea284d63c4a1a5de866494445b3bad1585473065fbb66bcd63c1bd834_0", "is_ignored": false, "lines": "  memset(auStack_1390,0,0x91c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 24, "line": 16, "offset": 408}, "start": {"col": 23, "line": 16, "offset": 407}}, "$DST": {"abstract_content": "auStack_1390", "end": {"col": 22, "line": 16, "offset": 406}, "start": {"col": 10, "line": 16, "offset": 394}}, "$LEN": {"abstract_content": "0x91c", "end": {"col": 30, "line": 16, "offset": 414}, "start": {"col": 25, "line": 16, "offset": 409}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044be14_0044be14.c", "start": {"col": 3, "line": 16, "offset": 387}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 17, "offset": 446}, "extra": {"engine_kind": "OSS", "fingerprint": "7c5fbe091c59c6438aeca6b4f33fdb17723d336e4580c0641b832e05370a092c1cf89da7b4c2bc98b82eb97e7090013c2fdb8b211abb05336077c19037a7a636_0", "is_ignored": false, "lines": "  memset(auStack_a74,0,0xa54);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 17, "offset": 439}, "start": {"col": 22, "line": 17, "offset": 438}}, "$DST": {"abstract_content": "auStack_a74", "end": {"col": 21, "line": 17, "offset": 437}, "start": {"col": 10, "line": 17, "offset": 426}}, "$LEN": {"abstract_content": "0xa54", "end": {"col": 29, "line": 17, "offset": 445}, "start": {"col": 24, "line": 17, "offset": 440}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044be14_0044be14.c", "start": {"col": 3, "line": 17, "offset": 419}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 70, "line": 29, "offset": 994}, "extra": {"engine_kind": "OSS", "fingerprint": "d0bd326acf8936014aba0272e5e54fc227bd441ab9af1502f92d83cd692ec692f081cd3e6f17a7069f16d4723521d5ab962d73893c19113ecc005d226ee70e4f_0", "is_ignored": false, "lines": "    memcpy(auStack_1390,(void *)(*(int *)(param_3 + 0x20) + 4),0x100);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 29, "offset": 935}, "start": {"col": 5, "line": 29, "offset": 929}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044be14_0044be14.c", "start": {"col": 5, "line": 29, "offset": 929}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 70, "line": 29, "offset": 994}, "extra": {"engine_kind": "OSS", "fingerprint": "3c0814e6d4a72bab21cd3217d1d2cbba9ea67ef3aaac2645699e934f46de3637529cc33be08c308db1aac3960b49d13b8d54250eb785b3cdc6d56143c9958488_0", "is_ignored": false, "lines": "    memcpy(auStack_1390,(void *)(*(int *)(param_3 + 0x20) + 4),0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_1390", "end": {"col": 24, "line": 29, "offset": 948}, "start": {"col": 12, "line": 29, "offset": 936}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 69, "line": 29, "offset": 993}, "start": {"col": 64, "line": 29, "offset": 988}}, "$SRC": {"abstract_content": "(void**(int*param_3+0x20+4", "end": {"col": 62, "line": 29, "offset": 986}, "start": {"col": 25, "line": 29, "offset": 949}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044be14_0044be14.c", "start": {"col": 5, "line": 29, "offset": 929}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 31, "line": 21, "offset": 421}, "extra": {"engine_kind": "OSS", "fingerprint": "8df291276eb72c3e2434af08dd96e23df80cf729bdb28586b36d49649f30da6e586cc0424e0325297b60a904df5c67f318802cd31b6b2d8a4a3c4153080587ba_0", "is_ignored": false, "lines": "    memset(auStack_21f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 25, "line": 21, "offset": 415}, "start": {"col": 24, "line": 21, "offset": 414}}, "$DST": {"abstract_content": "auStack_21f", "end": {"col": 23, "line": 21, "offset": 413}, "start": {"col": 12, "line": 21, "offset": 402}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 30, "line": 21, "offset": 420}, "start": {"col": 26, "line": 21, "offset": 416}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 5, "line": 21, "offset": 395}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 33, "line": 30, "offset": 872}, "extra": {"engine_kind": "OSS", "fingerprint": "8a3fc4db6c924d170ed79110ffc8ae51625880cd111ede1c48e7dcf2a481bc52e14843774808f9eda09a7bcd69eb9225b7462fe3b28f96eccd201f631da06c62_0", "is_ignored": false, "lines": "      memset(&local_220,0,0x100);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 26, "line": 30, "offset": 865}, "start": {"col": 25, "line": 30, "offset": 864}}, "$DST": {"abstract_content": "&local_220", "end": {"col": 24, "line": 30, "offset": 863}, "start": {"col": 14, "line": 30, "offset": 853}}, "$LEN": {"abstract_content": "0x100", "end": {"col": 32, "line": 30, "offset": 871}, "start": {"col": 27, "line": 30, "offset": 866}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 7, "line": 30, "offset": 846}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 54, "line": 33, "offset": 1007}, "extra": {"engine_kind": "OSS", "fingerprint": "132edc545053a1c42154475218fe05b89232379f74a7959e02567a38e4d95e3939380ab938fc89781eed612384ea02067fa948a0e89ecf836b966a536e22b06c_0", "is_ignored": false, "lines": "      strncpy(&local_220,(char *)(iVar4 + 0x11d),__n);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 14, "line": 33, "offset": 967}, "start": {"col": 7, "line": 33, "offset": 960}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 7, "line": 33, "offset": 960}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unterminated-string-strncpy-stpncpy", "end": {"col": 54, "line": 33, "offset": 1007}, "extra": {"engine_kind": "OSS", "fingerprint": "07677863e9872b9929fc5e7fb9ffeb68f9bcdc44665a3627537bd98ad0f8358d0fbffebd2d61ea024cda29d4241cec755328d3ab0411eaee1e4bf5714dd52c68_0", "is_ignored": false, "lines": "      strncpy(&local_220,(char *)(iVar4 + 0x11d),__n);", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not NUL-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/170", "https://cwe.mitre.org/data/definitions/126", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$FUN": {"abstract_content": "strncpy", "end": {"col": 14, "line": 33, "offset": 967}, "start": {"col": 7, "line": 33, "offset": 960}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 7, "line": 33, "offset": 960}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 40, "offset": 1275}, "extra": {"engine_kind": "OSS", "fingerprint": "e12d60bd8aae477f796c36ba1575f6f1dccb27256e01a45ca961a5d4ae4857f0d19d65a9ee4627cffe3edf2d7e9e90522b244c7fc6ce19a510558551acf0a847_0", "is_ignored": false, "lines": "          memset(auStack_11f,0,0xff);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 31, "line": 40, "offset": 1269}, "start": {"col": 30, "line": 40, "offset": 1268}}, "$DST": {"abstract_content": "auStack_11f", "end": {"col": 29, "line": 40, "offset": 1267}, "start": {"col": 18, "line": 40, "offset": 1256}}, "$LEN": {"abstract_content": "0xff", "end": {"col": 36, "line": 40, "offset": 1274}, "start": {"col": 32, "line": 40, "offset": 1270}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 11, "line": 40, "offset": 1249}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf", "end": {"col": 93, "line": 59, "offset": 2175}, "extra": {"engine_kind": "OSS", "fingerprint": "c5cf53b60256b0621c2f7aa2d9edf6174929042ec09a426f04a942c0f3d66484baacf3aadd4a8de4a57a8c76b254f727d04e6a9922bf4fd3870a095f1cd3c934_0", "is_ignored": false, "lines": "          sprintf(&local_120,pcVar5,local_21c,(uint)bVar1,(uint)*(byte *)(iVar4 + 0x109),\n                  (uint)*(byte *)(iVar4 + 0x10a),(uint)*(byte *)(iVar4 + 0x10b),(uint)uVar2);", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "HIGH", "references": ["https://cwe.mitre.org/data/definitions/676", "https://cwe.mitre.org/data/definitions/120", "https://cwe.mitre.org/data/definitions/787", "https://g.co/kgs/PCHQjJ"]}, "metavars": {"$1": {"abstract_content": "pcVar5", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$BUF": {"abstract_content": "&local_120", "end": {"col": 29, "line": 58, "offset": 2021}, "start": {"col": 19, "line": 58, "offset": 2011}}, "$FMT": {"abstract_content": "pcVar5", "end": {"col": 36, "line": 58, "offset": 2028}, "start": {"col": 30, "line": 58, "offset": 2022}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 11, "line": 58, "offset": 2003}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 93, "line": 59, "offset": 2175}, "extra": {"engine_kind": "OSS", "fingerprint": "b3243fcef661885b587c23b6f82e36fdc6bff139296ca2256d43e1c8fde45a11c0d5a0bf702fc7e3010c51317552edea3d01c3d25d7d496f5d099777a723ace8_0", "is_ignored": false, "lines": "          sprintf(&local_120,pcVar5,local_21c,(uint)bVar1,(uint)*(byte *)(iVar4 + 0x109),\n                  (uint)*(byte *)(iVar4 + 0x10a),(uint)*(byte *)(iVar4 + 0x10b),(uint)uVar2);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "sprintf", "end": {"col": 18, "line": 58, "offset": 2010}, "start": {"col": 11, "line": 58, "offset": 2003}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/FUN_0044bfd8_0044bfd8.c", "start": {"col": 11, "line": 58, "offset": 2003}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 76, "line": 33, "offset": 720}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_0", "is_ignored": false, "lines": "  iVar6 = mDNS_snprintf(param_3,0x1ff,\"%4d %##s %s \",local_2c,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 24, "line": 33, "offset": 668}, "start": {"col": 11, "line": 33, "offset": 655}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 11, "line": 33, "offset": 655}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 75, "line": 39, "offset": 952}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_1", "is_ignored": false, "lines": "    mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"<< ZERO RDATA LENGTH >>\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 18, "line": 39, "offset": 895}, "start": {"col": 5, "line": 39, "offset": 882}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 5, "line": 39, "offset": 882}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 71, "line": 47, "offset": 1172}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_2", "is_ignored": false, "lines": "    mDNS_snprintf(param_3 + iVar6,iVar10,pcVar12,param_2,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 18, "line": 47, "offset": 1119}, "start": {"col": 5, "line": 47, "offset": 1106}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 5, "line": 47, "offset": 1106}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 89, "line": 55, "offset": 1571}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_3", "is_ignored": false, "lines": "        mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"%##s %##s %d %d %d %d %d\",param_2,\n                      param_2 + 0x80,*(undefined4 *)(param_2 + 0x100),\n                      *(undefined4 *)(param_2 + 0x102),*(undefined4 *)(param_2 + 0x104),\n                      *(undefined4 *)(param_2 + 0x106),*(undefined4 *)(param_2 + 0x108));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 22, "line": 52, "offset": 1256}, "start": {"col": 9, "line": 52, "offset": 1243}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 9, "line": 52, "offset": 1243}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 96, "line": 80, "offset": 2345}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_4", "is_ignored": false, "lines": "            iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"%s%#s\",pcVar12,puVar17,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 35, "line": 80, "offset": 2284}, "start": {"col": 22, "line": 80, "offset": 2271}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 22, "line": 80, "offset": 2271}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 99, "offset": 3189}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_5", "is_ignored": false, "lines": "        iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"\\t%s  %s  %d  %d  %s  %s  %d  %##s \",\n                               local_2c,uVar5,*(byte *)((int)param_2 + 3),\n                               *(undefined4 *)(param_2 + 2),auStack_b4,auStack_74,param_2[8],puVar19\n                              );", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 31, "line": 96, "offset": 2912}, "start": {"col": 18, "line": 96, "offset": 2899}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 18, "line": 96, "offset": 2899}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 48, "line": 122, "offset": 4101}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_6", "is_ignored": false, "lines": "          iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"Max %d\",*(undefined2 *)(param_1 + 4)\n                                 ,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 121, "offset": 3985}, "start": {"col": 20, "line": 121, "offset": 3972}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 20, "line": 121, "offset": 3972}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 79, "line": 136, "offset": 4643}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_7", "is_ignored": false, "lines": "              iVar6 = mDNS_snprintf(pcVar9,iVar6,pcVar12,puVar17,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 36, "line": 136, "offset": 4600}, "start": {"col": 23, "line": 136, "offset": 4587}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 23, "line": 136, "offset": 4587}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 143, "offset": 4951}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_8", "is_ignored": false, "lines": "                  iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,&DAT_00453960,1,uVar15,uVar5\n                                       );", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 40, "line": 142, "offset": 4849}, "start": {"col": 27, "line": 142, "offset": 4836}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 27, "line": 142, "offset": 4836}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 94, "line": 145, "offset": 5088}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_9", "is_ignored": false, "lines": "                  iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" Vers %d\",param_2[2]);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 41, "line": 145, "offset": 5035}, "start": {"col": 28, "line": 145, "offset": 5022}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 28, "line": 145, "offset": 5022}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 92, "line": 147, "offset": 5223}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_10", "is_ignored": false, "lines": "                  iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" Op %d\",param_2[3]);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 41, "line": 147, "offset": 5172}, "start": {"col": 28, "line": 147, "offset": 5159}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 28, "line": 147, "offset": 5159}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 98, "line": 149, "offset": 5364}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_11", "is_ignored": false, "lines": "                  iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" Err/Port %d\",param_2[4]);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 41, "line": 149, "offset": 5307}, "start": {"col": 28, "line": 149, "offset": 5294}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 28, "line": 149, "offset": 5294}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 71, "line": 153, "offset": 5622}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_12", "is_ignored": false, "lines": "                  iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" ID %08X%08X\",\n                                         *(undefined4 *)(param_2 + 6));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 41, "line": 152, "offset": 5505}, "start": {"col": 28, "line": 152, "offset": 5492}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 28, "line": 152, "offset": 5492}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 100, "line": 170, "offset": 6318}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_13", "is_ignored": false, "lines": "                iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,\" Trace\",0xfde9,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 38, "line": 170, "offset": 6256}, "start": {"col": 25, "line": 170, "offset": 6243}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 25, "line": 170, "offset": 6243}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 173, "offset": 6507}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_14", "is_ignored": false, "lines": "                iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" Platform %d\",\n                                       *(byte *)(param_2 + 2));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 39, "line": 172, "offset": 6398}, "start": {"col": 26, "line": 172, "offset": 6385}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 26, "line": 172, "offset": 6385}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 93, "line": 181, "offset": 6871}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_15", "is_ignored": false, "lines": "              iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,\" Owner\",4,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 36, "line": 181, "offset": 6814}, "start": {"col": 23, "line": 181, "offset": 6801}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 23, "line": 181, "offset": 6801}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 184, "offset": 7049}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_16", "is_ignored": false, "lines": "              iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" Vers %d\",*(byte *)(param_2 + 2)\n                                    );", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 37, "line": 183, "offset": 6947}, "start": {"col": 24, "line": 183, "offset": 6934}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 24, "line": 183, "offset": 6934}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 66, "line": 187, "offset": 7233}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_17", "is_ignored": false, "lines": "              iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" Seq %3d\",\n                                     *(byte *)((int)param_2 + 5));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 37, "line": 186, "offset": 7125}, "start": {"col": 24, "line": 186, "offset": 7112}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 24, "line": 186, "offset": 7112}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 92, "line": 189, "offset": 7364}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_18", "is_ignored": false, "lines": "              iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" MAC %.6a\",param_2 + 3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 37, "line": 189, "offset": 7309}, "start": {"col": 24, "line": 189, "offset": 7296}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 24, "line": 189, "offset": 7296}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 97, "line": 192, "offset": 7539}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_19", "is_ignored": false, "lines": "                iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,\" I-MAC %.6a\",param_2 + 6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 38, "line": 192, "offset": 7480}, "start": {"col": 25, "line": 192, "offset": 7467}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 25, "line": 192, "offset": 7467}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 73, "line": 217, "offset": 8351}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_20", "is_ignored": false, "lines": "            mDNS_snprintf(&DAT_0046e7d8,0x10,\"DIG%d\",bVar2,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 217, "offset": 8304}, "start": {"col": 13, "line": 217, "offset": 8291}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 13, "line": 217, "offset": 8291}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 101, "line": 222, "offset": 8583}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_21", "is_ignored": false, "lines": "          iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"\\t%s\\t%d\\t%s \",uVar7,uVar16,pcVar12)", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 222, "offset": 8515}, "start": {"col": 20, "line": 222, "offset": 8502}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 20, "line": 222, "offset": 8502}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 82, "line": 231, "offset": 8974}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_22", "is_ignored": false, "lines": "            iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,\"%x\",\n                                  *(byte *)((int)param_2 + iVar6),uVar16,pcVar12);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 34, "line": 230, "offset": 8854}, "start": {"col": 21, "line": 230, "offset": 8841}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 21, "line": 230, "offset": 8841}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 238, "offset": 9228}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_23", "is_ignored": false, "lines": "          mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"%u %u %u %##s\",*param_2,param_2[1],param_2[2]\n                        ,param_2 + 3);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 24, "line": 237, "offset": 9113}, "start": {"col": 11, "line": 237, "offset": 9100}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 11, "line": 237, "offset": 9100}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 69, "line": 265, "offset": 10192}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_24", "is_ignored": false, "lines": "          iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"\\t%d  %d  %s  %u \",\n                                 (uint)(uVar3 >> 8) << 8 | uVar3 & 0xff,bVar2,uVar5,\n                                 (uVar16 >> 0x10) + uVar16 & 0xffff);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 263, "offset": 9987}, "start": {"col": 20, "line": 263, "offset": 9974}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 20, "line": 263, "offset": 9974}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 95, "line": 286, "offset": 10982}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_25", "is_ignored": false, "lines": "            iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"%##s \",param_2,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 35, "line": 286, "offset": 10922}, "start": {"col": 22, "line": 286, "offset": 10909}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 22, "line": 286, "offset": 10909}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 73, "line": 304, "offset": 11536}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_26", "is_ignored": false, "lines": "            mDNS_snprintf(&DAT_0046e7d8,0x10,\"DIG%d\",bVar2,uVar15,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 304, "offset": 11489}, "start": {"col": 13, "line": 304, "offset": 11476}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 13, "line": 304, "offset": 11476}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 101, "line": 309, "offset": 11777}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_27", "is_ignored": false, "lines": "          iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"\\t%s  %d  %d \",pcVar12,uVar8,uVar16)", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 309, "offset": 11709}, "start": {"col": 20, "line": 309, "offset": 11696}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 20, "line": 309, "offset": 11696}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 81, "line": 313, "offset": 11950}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_28", "is_ignored": false, "lines": "            iVar6 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,&DAT_00453a38);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 34, "line": 313, "offset": 11903}, "start": {"col": 21, "line": 313, "offset": 11890}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 21, "line": 313, "offset": 11890}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 84, "line": 324, "offset": 12392}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_29", "is_ignored": false, "lines": "              iVar18 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,\"%x\",\n                                     *(byte *)((int)param_2 + iVar18),uVar8,uVar16);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 37, "line": 323, "offset": 12270}, "start": {"col": 24, "line": 323, "offset": 12257}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 24, "line": 323, "offset": 12257}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 70, "line": 328, "offset": 12529}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_30", "is_ignored": false, "lines": "          iVar18 = mDNS_snprintf(param_3 + iVar10,0x1ff - iVar10,\" \");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 328, "offset": 12492}, "start": {"col": 20, "line": 328, "offset": 12479}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 20, "line": 328, "offset": 12479}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 68, "line": 335, "offset": 12891}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_31", "is_ignored": false, "lines": "          iVar10 = mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\" \");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 33, "line": 335, "offset": 12856}, "start": {"col": 20, "line": 335, "offset": 12843}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 20, "line": 335, "offset": 12843}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 85, "line": 343, "offset": 13198}, "extra": {"engine_kind": "OSS", "fingerprint": "3d6344e94e46dece83731836e743643d64f98166118e782fd9e463b8c0196c0ed953d10830efc70d4ff516afb451fa25fffd9e752b7190dc2e3829242d516c7a_32", "is_ignored": false, "lines": "    mDNS_snprintf(param_3 + iVar6,0x1ff - iVar6,\"RDLen %d: %s\",uVar16,param_2,uVar5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 18, "line": 343, "offset": 13131}, "start": {"col": 5, "line": 343, "offset": 13118}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetRRDisplayString_rdb_00422548.c", "start": {"col": 5, "line": 343, "offset": 13118}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 64, "offset": 1953}, "extra": {"engine_kind": "OSS", "fingerprint": "10a0a2213d74d32e0ab8185c044da941eab0cf5d100b1b02f4b3f488713a8dfc6d9b94f3aa7f2bf3e13e9bf379c1193eac89eb0198298b8d957ae3ab543c124c_0", "is_ignored": false, "lines": "    mDNS_snprintf(puVar4,0x1e,\"%d.%d.%d.%d.in-addr.arpa.\",*(undefined *)(param_1 + 0x21b3),\n                  *(undefined *)(param_1 + 0x21b2),*(undefined *)(param_1 + 0x21b1),\n                  *(undefined *)(param_1 + 0x21b0));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 18, "line": 62, "offset": 1742}, "start": {"col": 5, "line": 62, "offset": 1729}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetServiceTarget_00412c0c.c", "start": {"col": 5, "line": 62, "offset": 1729}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 72, "offset": 2267}, "extra": {"engine_kind": "OSS", "fingerprint": "53a7c3ceb94c210f5dbbfe8dc84f6339bd7b773293ac0f89110a81bb0a652aa1551ba1151b1851d853148c5a8dc645a9b3b3ccecd7f7af51873109cf443e07c8_0", "is_ignored": false, "lines": "      memcpy((void *)(param_1 + 0x2314),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 72, "offset": 2225}, "start": {"col": 7, "line": 72, "offset": 2219}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetServiceTarget_00412c0c.c", "start": {"col": 7, "line": 72, "offset": 2219}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 55, "line": 72, "offset": 2267}, "extra": {"engine_kind": "OSS", "fingerprint": "b0096f0bac3c2d586744e856d40dfff88d6e6862702536777d831c0d3713339036948c450ad1eb835d331042a661edc660828eacc2392d38dd15b32f011244e8_0", "is_ignored": false, "lines": "      memcpy((void *)(param_1 + 0x2314),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_1+0x2314", "end": {"col": 39, "line": 72, "offset": 2251}, "start": {"col": 14, "line": 72, "offset": 2226}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 54, "line": 72, "offset": 2266}, "start": {"col": 50, "line": 72, "offset": 2262}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 49, "line": 72, "offset": 2261}, "start": {"col": 41, "line": 72, "offset": 2253}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/GetServiceTarget_00412c0c.c", "start": {"col": 7, "line": 72, "offset": 2219}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 45, "line": 52, "offset": 1810}, "extra": {"engine_kind": "OSS", "fingerprint": "c719f866ec1e48b769c00ab52daa7e339a33c5497dd7a39828d355f288748f03c13f8f91e7c1d28d1cba95bca45d09527533bbb2647bcf59cc9e64e8dca10d8f_0", "is_ignored": false, "lines": "          sVar1 = *(short *)((int)puVar6 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar6", "end": {"col": 41, "line": 52, "offset": 1806}, "start": {"col": 30, "line": 52, "offset": 1795}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 16, "line": 52, "offset": 1781}, "start": {"col": 11, "line": 52, "offset": 1776}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/InitializeAnonInfoForCR_00425eb8.c", "start": {"col": 11, "line": 52, "offset": 1776}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 46, "line": 49, "offset": 1772}, "extra": {"engine_kind": "OSS", "fingerprint": "8003bdb441561d110339834d99d55405ef9fd31269ac2efbd1c945a90d13e36b0055a2c8a20bde06712a8ad31d92d6ec35629d3f73ab6ba29bfcb7daf727b5fd_0", "is_ignored": false, "lines": "          sVar1 = *(short *)((int)param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_2", "end": {"col": 42, "line": 49, "offset": 1768}, "start": {"col": 30, "line": 49, "offset": 1756}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 16, "line": 49, "offset": 1742}, "start": {"col": 11, "line": 49, "offset": 1737}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/InitializeAnonInfoForQuestion_00425fac.c", "start": {"col": 11, "line": 49, "offset": 1737}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 50, "line": 113, "offset": 4154}, "extra": {"engine_kind": "OSS", "fingerprint": "c484377bbe1c4256b9c77b82c38da3268055d045e398fef4879e030315727837437e94156668f8665b1404ac82df3d00103005a71b05df64687165314b31db60_0", "is_ignored": false, "lines": "              sVar5 = *(short *)((int)puVar10 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar10", "end": {"col": 46, "line": 113, "offset": 4150}, "start": {"col": 34, "line": 113, "offset": 4138}}, "$NARROW": {"abstract_content": "sVar5", "end": {"col": 20, "line": 113, "offset": 4124}, "start": {"col": 15, "line": 113, "offset": 4119}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/RecordRegistrationGotZoneData_004157d8.c", "start": {"col": 15, "line": 113, "offset": 4119}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 56, "line": 124, "offset": 4817}, "extra": {"engine_kind": "OSS", "fingerprint": "c484377bbe1c4256b9c77b82c38da3268055d045e398fef4879e030315727837437e94156668f8665b1404ac82df3d00103005a71b05df64687165314b31db60_1", "is_ignored": false, "lines": "                    sVar5 = *(short *)((int)puVar10 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar10", "end": {"col": 52, "line": 124, "offset": 4813}, "start": {"col": 40, "line": 124, "offset": 4801}}, "$NARROW": {"abstract_content": "sVar5", "end": {"col": 26, "line": 124, "offset": 4787}, "start": {"col": 21, "line": 124, "offset": 4782}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/RecordRegistrationGotZoneData_004157d8.c", "start": {"col": 21, "line": 124, "offset": 4782}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 52, "line": 226, "offset": 9985}, "extra": {"engine_kind": "OSS", "fingerprint": "c484377bbe1c4256b9c77b82c38da3268055d045e398fef4879e030315727837437e94156668f8665b1404ac82df3d00103005a71b05df64687165314b31db60_2", "is_ignored": false, "lines": "                sVar5 = *(short *)((int)puVar10 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar10", "end": {"col": 48, "line": 226, "offset": 9981}, "start": {"col": 36, "line": 226, "offset": 9969}}, "$NARROW": {"abstract_content": "sVar5", "end": {"col": 22, "line": 226, "offset": 9955}, "start": {"col": 17, "line": 226, "offset": 9950}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/RecordRegistrationGotZoneData_004157d8.c", "start": {"col": 17, "line": 226, "offset": 9950}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 50, "line": 229, "offset": 10088}, "extra": {"engine_kind": "OSS", "fingerprint": "c484377bbe1c4256b9c77b82c38da3268055d045e398fef4879e030315727837437e94156668f8665b1404ac82df3d00103005a71b05df64687165314b31db60_3", "is_ignored": false, "lines": "              sVar5 = *(short *)((int)puVar10 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar10", "end": {"col": 46, "line": 229, "offset": 10084}, "start": {"col": 34, "line": 229, "offset": 10072}}, "$NARROW": {"abstract_content": "sVar5", "end": {"col": 20, "line": 229, "offset": 10058}, "start": {"col": 15, "line": 229, "offset": 10053}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/RecordRegistrationGotZoneData_004157d8.c", "start": {"col": 15, "line": 229, "offset": 10053}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 40, "line": 38, "offset": 1158}, "extra": {"engine_kind": "OSS", "fingerprint": "ae6783aea457047febabb4bb4c1ef185068634adf0820b732353b3f662ca62059733f9aa2188aab5a919e39feb46f9c7d49ff6f1540cdba8d16199b58b1ac63e_0", "is_ignored": false, "lines": "    sVar1 = *(short *)((int)param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_2", "end": {"col": 36, "line": 38, "offset": 1154}, "start": {"col": 24, "line": 38, "offset": 1142}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 10, "line": 38, "offset": 1128}, "start": {"col": 5, "line": 38, "offset": 1123}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/ReleaseCacheRecord_0042e1b0.c", "start": {"col": 5, "line": 38, "offset": 1123}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 16, "line": 25, "offset": 720}, "extra": {"engine_kind": "OSS", "fingerprint": "f38c57575482f44453d33c44184dbf757590dcaed64e322b1a2f6377b4e4bbcb911e88ad3a7388a27a925b1aa6bece919769cb37f69c05e2f48fc7c173864781_0", "is_ignored": false, "lines": "      sVar5 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 16, "line": 25, "offset": 720}, "start": {"col": 15, "line": 25, "offset": 719}}, "$NARROW": {"abstract_content": "sVar5", "end": {"col": 12, "line": 25, "offset": 716}, "start": {"col": 7, "line": 25, "offset": 711}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/SameNameRecordAnswersQuestion_004219c0.c", "start": {"col": 7, "line": 25, "offset": 711}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 46, "line": 27, "offset": 796}, "extra": {"engine_kind": "OSS", "fingerprint": "cda02f595fa270e04db6a1e39ddd4a191147171f1212b09ec2422d964556121e0c0a792b1e1775ac2a958aab9ed204be7348ce298b63c90612c7f3f91bd19f24_0", "is_ignored": false, "lines": "        sVar5 = *(short *)(param_1[9] + 0x13e);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "9", "end": {"col": 37, "line": 27, "offset": 787}, "start": {"col": 36, "line": 27, "offset": 786}}, "$NARROW": {"abstract_content": "sVar5", "end": {"col": 14, "line": 27, "offset": 764}, "start": {"col": 9, "line": 27, "offset": 759}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/SameNameRecordAnswersQuestion_004219c0.c", "start": {"col": 9, "line": 27, "offset": 759}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 16, "line": 29, "offset": 822}, "extra": {"engine_kind": "OSS", "fingerprint": "1a43b2f711f16bd4f29d4553f678a3fcc8286fdd14800a3cc17c7dad7b58d258d5a2045ba860efac56d768dd825d226d3c0ef9ea3083bf9d0d961116bc09973a_0", "is_ignored": false, "lines": "      sVar3 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 16, "line": 29, "offset": 822}, "start": {"col": 15, "line": 29, "offset": 821}}, "$NARROW": {"abstract_content": "sVar3", "end": {"col": 12, "line": 29, "offset": 818}, "start": {"col": 7, "line": 29, "offset": 813}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/SameNameRecordAnswersQuestion_004219c0.c", "start": {"col": 7, "line": 29, "offset": 813}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 60, "line": 31, "offset": 926}, "extra": {"engine_kind": "OSS", "fingerprint": "2beb4380b15a670ebe7f7dde1b454d720e32b683ea6730b7c5763c289db3f4d46d2eddb17c6f0e6f0e3de9fdedf3d839797e1b30a56c8d9f90e533f082cf5f58_0", "is_ignored": false, "lines": "        sVar3 = *(short *)(*(int *)(param_2 + 0xdc) + 0x13e);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 44, "line": 31, "offset": 910}, "start": {"col": 37, "line": 31, "offset": 903}}, "$NARROW": {"abstract_content": "sVar3", "end": {"col": 14, "line": 31, "offset": 880}, "start": {"col": 9, "line": 31, "offset": 875}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/SameNameRecordAnswersQuestion_004219c0.c", "start": {"col": 9, "line": 31, "offset": 875}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 33, "line": 14, "offset": 280}, "extra": {"engine_kind": "OSS", "fingerprint": "e245c7651c8f0ff495fa68e15eb7a02b77f15c9e9de2fac0657f485880c649de5e4b245da297e7a4eb66741c58ffd8177633b1e7a8a6f33a6b1a23695e5f5e99_0", "is_ignored": false, "lines": "  sVar1 = *(short *)(param_1 + 2);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 29, "line": 14, "offset": 276}, "start": {"col": 22, "line": 14, "offset": 269}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 14, "offset": 255}, "start": {"col": 3, "line": 14, "offset": 250}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/SetNewRData_0041d7b0.c", "start": {"col": 3, "line": 14, "offset": 250}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 39, "line": 42, "offset": 1182}, "extra": {"engine_kind": "OSS", "fingerprint": "54684769419b1f1a06b8dcc140474d2e0a492d7b86f8f96c320e6a5032e8814e85f1d9acdb96612645459d4088243aad8aaf4a3e95e8f8f07c128371d4c5465e_0", "is_ignored": false, "lines": "  memcpy(__dest + 0x30c,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 42, "offset": 1152}, "start": {"col": 3, "line": 42, "offset": 1146}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/StartGetZoneData_00412858.c", "start": {"col": 3, "line": 42, "offset": 1146}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 42, "offset": 1182}, "extra": {"engine_kind": "OSS", "fingerprint": "b1ae6a747a545425a0d6b34aebccfc0fc4a2f3069eb5a048116ee7d402bfd8f227d5335a3fa355fd072d50233b5b2a3b96fb53ba9e2dc8739cef8d01156d1cf0_0", "is_ignored": false, "lines": "  memcpy(__dest + 0x30c,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest+0x30c", "end": {"col": 24, "line": 42, "offset": 1167}, "start": {"col": 10, "line": 42, "offset": 1153}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 38, "line": 42, "offset": 1181}, "start": {"col": 34, "line": 42, "offset": 1177}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 33, "line": 42, "offset": 1176}, "start": {"col": 25, "line": 42, "offset": 1168}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/StartGetZoneData_00412858.c", "start": {"col": 3, "line": 42, "offset": 1146}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 17, "line": 43, "offset": 736}, "extra": {"engine_kind": "OSS", "fingerprint": "4e721dc34356b88df08d2a0d7f82ed3f1bd9e974eb12d2d231c81f5999c1cd9b27553b67c39ee9bdd60ab27ed9c1c52921d6eb38cb66cd3eac1cb9d2f3b590ea_0", "is_ignored": false, "lines": "      sVar10 = 0;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0", "end": {"col": 17, "line": 43, "offset": 736}, "start": {"col": 16, "line": 43, "offset": 735}}, "$UNSIGNED": {"abstract_content": "sVar10", "end": {"col": 13, "line": 43, "offset": 732}, "start": {"col": 7, "line": 43, "offset": 726}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 7, "line": 43, "offset": 726}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 21, "line": 44, "offset": 758}, "extra": {"engine_kind": "OSS", "fingerprint": "f4885b518683523b89b5203af7a9bf50464aa78dbbaa8ef2df02a8dd158a2db39b1bd2b055dcfcb332e29269316bd5cbebe1853d70ecdd769a8a0cd064680ffe_0", "is_ignored": false, "lines": "      __size = 0xc80;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0xc80", "end": {"col": 21, "line": 44, "offset": 758}, "start": {"col": 16, "line": 44, "offset": 753}}, "$UNSIGNED": {"abstract_content": "__size", "end": {"col": 13, "line": 44, "offset": 750}, "start": {"col": 7, "line": 44, "offset": 744}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 7, "line": 44, "offset": 744}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-unchecked-ret-malloc-calloc-realloc", "end": {"col": 44, "line": 45, "offset": 803}, "extra": {"engine_kind": "OSS", "fingerprint": "a3e5f29117ff1d702b2a4691b2f4e29b464994708d0a0bf1ff45fcae06507494be6d10f8ef4a1221d7644b7fed07f279aef0329ee6de89492dd05b72baf89b39_0", "is_ignored": false, "lines": "      while (__ptr = (char *)malloc(__size), __ptr != (char *)0x0) {", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/252", "https://cwe.mitre.org/data/definitions/690", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {"$CAST": {"abstract_content": "char*", "end": {"col": 29, "line": 45, "offset": 788}, "start": {"col": 23, "line": 45, "offset": 782}}, "$FUN": {"abstract_content": "malloc", "end": {"col": 36, "line": 45, "offset": 795}, "start": {"col": 30, "line": 45, "offset": 789}}, "$RET": {"abstract_content": "__ptr", "end": {"col": 19, "line": 45, "offset": 778}, "start": {"col": 14, "line": 45, "offset": 773}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 14, "line": 45, "offset": 773}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 45, "offset": 803}, "extra": {"engine_kind": "OSS", "fingerprint": "7acdc452d734aeca7bdece38fe326e16efdad095f29e5d4fe6501be66a023205bc582ad28c56dd64cd33e29761a382c42e898217830ff203b4c5bfcc68ec2484_0", "is_ignored": false, "lines": "      while (__ptr = (char *)malloc(__size), __ptr != (char *)0x0) {", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 36, "line": 45, "offset": 795}, "start": {"col": 30, "line": 45, "offset": 789}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 30, "line": 45, "offset": 789}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 44, "line": 45, "offset": 803}, "extra": {"engine_kind": "OSS", "fingerprint": "bd322e23dace1d97e351b5d092921063e528741cbb5225361bfa80a37cb3797d3a93972897a065acf8256e0a95f125ee4aa10f11a58fc2b76a138062e1919382_0", "is_ignored": false, "lines": "      while (__ptr = (char *)malloc(__size), __ptr != (char *)0x0) {", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$LEN": {"abstract_content": "__size", "end": {"col": 43, "line": 45, "offset": 802}, "propagated_value": {"svalue_abstract_content": "0xc80", "svalue_end": {"col": 21, "line": 44, "offset": 758}, "svalue_start": {"col": 16, "line": 44, "offset": 753}}, "start": {"col": 37, "line": 45, "offset": 796}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 30, "line": 45, "offset": 789}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 46, "line": 48, "offset": 927}, "extra": {"engine_kind": "OSS", "fingerprint": "7fe7361b34a35b3eb90990bb1657dd0d51dbb6a2aa8df574103b9a9cf22b4dfee7613319fa69cfb722b32ab3aabb193faa50641eb656b128cda3b595e7491174_0", "is_ignored": false, "lines": "        iVar5 = ioctl(iVar4,0x8912,&local_7c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar5", "end": {"col": 14, "line": 48, "offset": 895}, "start": {"col": 9, "line": 48, "offset": 890}}, "$UNSIGNED": {"abstract_content": "local_7c", "end": {"col": 45, "line": 48, "offset": 926}, "propagated_value": {"svalue_abstract_content": "__size", "svalue_end": {"col": 26, "line": 46, "offset": 854}, "svalue_start": {"col": 20, "line": 46, "offset": 848}}, "start": {"col": 37, "line": 48, "offset": 918}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 9, "line": 48, "offset": 890}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 66, "offset": 1430}, "extra": {"engine_kind": "OSS", "fingerprint": "12875ca3fc7f21df795a9b61b3b00e8f37136f4c2f1864aac81d2e9b2fb15f1e478ec5016acd6b2726f731c6001a3336f17454622444244566440383bcd865cc_0", "is_ignored": false, "lines": "        __size = __size + 0x140;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x140", "end": {"col": 32, "line": 66, "offset": 1430}, "start": {"col": 27, "line": 66, "offset": 1425}}, "$UNSIGNED": {"abstract_content": "__size", "end": {"col": 15, "line": 66, "offset": 1413}, "start": {"col": 9, "line": 66, "offset": 1407}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 9, "line": 66, "offset": 1407}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 30, "line": 101, "offset": 2269}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_0", "is_ignored": false, "lines": "    memcpy(local_34,__s,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 101, "offset": 2250}, "start": {"col": 5, "line": 101, "offset": 2244}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 5, "line": 101, "offset": 2244}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 101, "offset": 2269}, "extra": {"engine_kind": "OSS", "fingerprint": "c07dd6a5366c95ace631f5ec1a74d103b72e01f7ec1085438e2bfb543323b7627af057e1bce9eef6d001d6129ef3de6df66c8a8f6d25a6491b4684c44430c07a_0", "is_ignored": false, "lines": "    memcpy(local_34,__s,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_34", "end": {"col": 20, "line": 101, "offset": 2259}, "start": {"col": 12, "line": 101, "offset": 2251}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 29, "line": 101, "offset": 2268}, "start": {"col": 25, "line": 101, "offset": 2264}}, "$SRC": {"abstract_content": "__s", "end": {"col": 24, "line": 101, "offset": 2263}, "start": {"col": 21, "line": 101, "offset": 2260}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 5, "line": 101, "offset": 2244}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 102, "offset": 2302}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_1", "is_ignored": false, "lines": "    memcpy(auStack_64,__s,0x20);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 102, "offset": 2281}, "start": {"col": 5, "line": 102, "offset": 2275}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 5, "line": 102, "offset": 2275}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 102, "offset": 2302}, "extra": {"engine_kind": "OSS", "fingerprint": "1f1ee2bdafaa726d86a3588a202a80f17d19b26e0f8231e46253f165716fe9d9fc25c84ce52ae848f9b8492a782278f1cf5f02245ed2a4710ca18c266d0167da_0", "is_ignored": false, "lines": "    memcpy(auStack_64,__s,0x20);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_64", "end": {"col": 22, "line": 102, "offset": 2292}, "start": {"col": 12, "line": 102, "offset": 2282}}, "$LEN": {"abstract_content": "0x20", "end": {"col": 31, "line": 102, "offset": 2301}, "start": {"col": 27, "line": 102, "offset": 2297}}, "$SRC": {"abstract_content": "__s", "end": {"col": 26, "line": 102, "offset": 2296}, "start": {"col": 23, "line": 102, "offset": 2293}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 5, "line": 102, "offset": 2275}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 30, "line": 107, "offset": 2474}, "extra": {"engine_kind": "OSS", "fingerprint": "1240f72aeaf8532d9e4f73ff938fe4a6c363280759dbd2d6b633aef4f72dac615e408d4622856707d9944bd01e04823b197bffe18dcd77ea79965a676c0a93b0_0", "is_ignored": false, "lines": "      __dest = calloc(1,0x38);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 22, "line": 107, "offset": 2466}, "start": {"col": 16, "line": 107, "offset": 2460}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 16, "line": 107, "offset": 2460}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 107, "offset": 2474}, "extra": {"engine_kind": "OSS", "fingerprint": "ebc71a9e1c3b074e69ac06e19f413cd067fea4398c06852aa5bbca62b89b03796a6ed60a995859264c027b617bbde600e189ce13a72361b1fbe037066f03050d_0", "is_ignored": false, "lines": "      __dest = calloc(1,0x38);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 24, "line": 107, "offset": 2468}, "start": {"col": 23, "line": 107, "offset": 2467}}, "$LEN": {"abstract_content": "0x38", "end": {"col": 29, "line": 107, "offset": 2473}, "start": {"col": 25, "line": 107, "offset": 2469}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 16, "line": 107, "offset": 2460}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 30, "line": 116, "offset": 2842}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_2", "is_ignored": false, "lines": "      memcpy(__dest,__s,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 116, "offset": 2825}, "start": {"col": 7, "line": 116, "offset": 2819}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 7, "line": 116, "offset": 2819}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 30, "line": 116, "offset": 2842}, "extra": {"engine_kind": "OSS", "fingerprint": "34f12315788ea6523792724de4339205188205f4de3a236241fdf603612792a460aeaf9d7db85f5f15c58694e608b837ba0cba7d0c5c6bfba2914ef220c340d3_0", "is_ignored": false, "lines": "      memcpy(__dest,__s,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest", "end": {"col": 20, "line": 116, "offset": 2832}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x38)", "svalue_end": {"col": 30, "line": 107, "offset": 2474}, "svalue_start": {"col": 16, "line": 107, "offset": 2460}}, "start": {"col": 14, "line": 116, "offset": 2826}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 29, "line": 116, "offset": 2841}, "start": {"col": 25, "line": 116, "offset": 2837}}, "$SRC": {"abstract_content": "__s", "end": {"col": 24, "line": 116, "offset": 2836}, "start": {"col": 21, "line": 116, "offset": 2833}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 7, "line": 116, "offset": 2819}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 117, "offset": 2879}, "extra": {"engine_kind": "OSS", "fingerprint": "1835d231dde80316b0786a8f8b72c65d7ef3927bfebe42236c9c0744640337e1560ff2d4c7cdb94678e13dd6e7b3d35f2e8c23eacf06024c1f05645623b9560c_0", "is_ignored": false, "lines": "      sVar2 = *(short *)(__s + 0x10);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x10", "end": {"col": 36, "line": 117, "offset": 2879}, "start": {"col": 32, "line": 117, "offset": 2875}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 12, "line": 117, "offset": 2855}, "start": {"col": 7, "line": 117, "offset": 2850}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 7, "line": 117, "offset": 2850}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 34, "line": 122, "offset": 3060}, "extra": {"engine_kind": "OSS", "fingerprint": "1240f72aeaf8532d9e4f73ff938fe4a6c363280759dbd2d6b633aef4f72dac615e408d4622856707d9944bd01e04823b197bffe18dcd77ea79965a676c0a93b0_1", "is_ignored": false, "lines": "          pvVar9 = calloc(1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 26, "line": 122, "offset": 3052}, "start": {"col": 20, "line": 122, "offset": 3046}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 20, "line": 122, "offset": 3046}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 34, "line": 122, "offset": 3060}, "extra": {"engine_kind": "OSS", "fingerprint": "67109c41704ba761143e58683b905ab818bf1deccd5db8ab1f5f4c43b15aaa36f8bd014feb9be396c5fa0b50e1d32c59163eb896ccaafcf68d29b14258b59342_0", "is_ignored": false, "lines": "          pvVar9 = calloc(1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 28, "line": 122, "offset": 3054}, "start": {"col": 27, "line": 122, "offset": 3053}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 33, "line": 122, "offset": 3059}, "start": {"col": 29, "line": 122, "offset": 3055}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 20, "line": 122, "offset": 3046}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 125, "offset": 3209}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_3", "is_ignored": false, "lines": "          memcpy(pvVar9,__s + 0x10,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 125, "offset": 3185}, "start": {"col": 11, "line": 125, "offset": 3179}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 11, "line": 125, "offset": 3179}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 41, "line": 125, "offset": 3209}, "extra": {"engine_kind": "OSS", "fingerprint": "cecc387fec243dee0fd6127bda7fd39b010d513554d0cbfb2db642e3fceb61d98a35a426ee2982f1c0ee53598f4fc8db93762c49794c85a0812a750f1d65c9db_0", "is_ignored": false, "lines": "          memcpy(pvVar9,__s + 0x10,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "pvVar9", "end": {"col": 24, "line": 125, "offset": 3192}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x10)", "svalue_end": {"col": 34, "line": 122, "offset": 3060}, "svalue_start": {"col": 20, "line": 122, "offset": 3046}}, "start": {"col": 18, "line": 125, "offset": 3186}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 40, "line": 125, "offset": 3208}, "start": {"col": 36, "line": 125, "offset": 3204}}, "$SRC": {"abstract_content": "__s+0x10", "end": {"col": 35, "line": 125, "offset": 3203}, "start": {"col": 25, "line": 125, "offset": 3193}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 11, "line": 125, "offset": 3179}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 36, "line": 136, "offset": 3588}, "extra": {"engine_kind": "OSS", "fingerprint": "1240f72aeaf8532d9e4f73ff938fe4a6c363280759dbd2d6b633aef4f72dac615e408d4622856707d9944bd01e04823b197bffe18dcd77ea79965a676c0a93b0_2", "is_ignored": false, "lines": "            pvVar9 = calloc(1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 28, "line": 136, "offset": 3580}, "start": {"col": 22, "line": 136, "offset": 3574}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 22, "line": 136, "offset": 3574}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 36, "line": 136, "offset": 3588}, "extra": {"engine_kind": "OSS", "fingerprint": "67109c41704ba761143e58683b905ab818bf1deccd5db8ab1f5f4c43b15aaa36f8bd014feb9be396c5fa0b50e1d32c59163eb896ccaafcf68d29b14258b59342_1", "is_ignored": false, "lines": "            pvVar9 = calloc(1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 30, "line": 136, "offset": 3582}, "start": {"col": 29, "line": 136, "offset": 3581}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 35, "line": 136, "offset": 3587}, "start": {"col": 31, "line": 136, "offset": 3583}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 22, "line": 136, "offset": 3574}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 41, "line": 140, "offset": 3770}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_4", "is_ignored": false, "lines": "            memcpy(pvVar9,local_54,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 140, "offset": 3748}, "start": {"col": 13, "line": 140, "offset": 3742}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 13, "line": 140, "offset": 3742}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 41, "line": 140, "offset": 3770}, "extra": {"engine_kind": "OSS", "fingerprint": "e1e8f2cdbb2d64f5544139f428585319f006ae5e54a1805c8bf2c5414febc47272c519952a5fd620f3fc9e5a79537f4b5204dcaba83a89e4fda4622e9203d0c0_0", "is_ignored": false, "lines": "            memcpy(pvVar9,local_54,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "pvVar9", "end": {"col": 26, "line": 140, "offset": 3755}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x10)", "svalue_end": {"col": 36, "line": 136, "offset": 3588}, "svalue_start": {"col": 22, "line": 136, "offset": 3574}}, "start": {"col": 20, "line": 140, "offset": 3749}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 40, "line": 140, "offset": 3769}, "start": {"col": 36, "line": 140, "offset": 3765}}, "$SRC": {"abstract_content": "local_54", "end": {"col": 35, "line": 140, "offset": 3764}, "start": {"col": 27, "line": 140, "offset": 3756}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 13, "line": 140, "offset": 3742}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 145, "offset": 3978}, "extra": {"engine_kind": "OSS", "fingerprint": "1240f72aeaf8532d9e4f73ff938fe4a6c363280759dbd2d6b633aef4f72dac615e408d4622856707d9944bd01e04823b197bffe18dcd77ea79965a676c0a93b0_3", "is_ignored": false, "lines": "              pvVar9 = calloc(1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 30, "line": 145, "offset": 3970}, "start": {"col": 24, "line": 145, "offset": 3964}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 24, "line": 145, "offset": 3964}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 145, "offset": 3978}, "extra": {"engine_kind": "OSS", "fingerprint": "67109c41704ba761143e58683b905ab818bf1deccd5db8ab1f5f4c43b15aaa36f8bd014feb9be396c5fa0b50e1d32c59163eb896ccaafcf68d29b14258b59342_2", "is_ignored": false, "lines": "              pvVar9 = calloc(1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 32, "line": 145, "offset": 3972}, "start": {"col": 31, "line": 145, "offset": 3971}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 37, "line": 145, "offset": 3977}, "start": {"col": 33, "line": 145, "offset": 3973}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 24, "line": 145, "offset": 3964}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 43, "line": 148, "offset": 4137}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_5", "is_ignored": false, "lines": "              memcpy(pvVar9,local_54,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 21, "line": 148, "offset": 4115}, "start": {"col": 15, "line": 148, "offset": 4109}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 15, "line": 148, "offset": 4109}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 43, "line": 148, "offset": 4137}, "extra": {"engine_kind": "OSS", "fingerprint": "e1e8f2cdbb2d64f5544139f428585319f006ae5e54a1805c8bf2c5414febc47272c519952a5fd620f3fc9e5a79537f4b5204dcaba83a89e4fda4622e9203d0c0_1", "is_ignored": false, "lines": "              memcpy(pvVar9,local_54,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "pvVar9", "end": {"col": 28, "line": 148, "offset": 4122}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x10)", "svalue_end": {"col": 38, "line": 145, "offset": 3978}, "svalue_start": {"col": 24, "line": 145, "offset": 3964}}, "start": {"col": 22, "line": 148, "offset": 4116}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 42, "line": 148, "offset": 4136}, "start": {"col": 38, "line": 148, "offset": 4132}}, "$SRC": {"abstract_content": "local_54", "end": {"col": 37, "line": 148, "offset": 4131}, "start": {"col": 29, "line": 148, "offset": 4123}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 15, "line": 148, "offset": 4109}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 155, "offset": 4395}, "extra": {"engine_kind": "OSS", "fingerprint": "1240f72aeaf8532d9e4f73ff938fe4a6c363280759dbd2d6b633aef4f72dac615e408d4622856707d9944bd01e04823b197bffe18dcd77ea79965a676c0a93b0_4", "is_ignored": false, "lines": "              pvVar9 = calloc(1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 30, "line": 155, "offset": 4387}, "start": {"col": 24, "line": 155, "offset": 4381}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 24, "line": 155, "offset": 4381}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 155, "offset": 4395}, "extra": {"engine_kind": "OSS", "fingerprint": "67109c41704ba761143e58683b905ab818bf1deccd5db8ab1f5f4c43b15aaa36f8bd014feb9be396c5fa0b50e1d32c59163eb896ccaafcf68d29b14258b59342_3", "is_ignored": false, "lines": "              pvVar9 = calloc(1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 32, "line": 155, "offset": 4389}, "start": {"col": 31, "line": 155, "offset": 4388}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 37, "line": 155, "offset": 4394}, "start": {"col": 33, "line": 155, "offset": 4390}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 24, "line": 155, "offset": 4381}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 43, "line": 158, "offset": 4554}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_6", "is_ignored": false, "lines": "              memcpy(pvVar9,local_54,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 21, "line": 158, "offset": 4532}, "start": {"col": 15, "line": 158, "offset": 4526}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 15, "line": 158, "offset": 4526}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 43, "line": 158, "offset": 4554}, "extra": {"engine_kind": "OSS", "fingerprint": "e1e8f2cdbb2d64f5544139f428585319f006ae5e54a1805c8bf2c5414febc47272c519952a5fd620f3fc9e5a79537f4b5204dcaba83a89e4fda4622e9203d0c0_2", "is_ignored": false, "lines": "              memcpy(pvVar9,local_54,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "pvVar9", "end": {"col": 28, "line": 158, "offset": 4539}, "propagated_value": {"svalue_abstract_content": "calloc(1 0x10)", "svalue_end": {"col": 38, "line": 155, "offset": 4395}, "svalue_start": {"col": 24, "line": 155, "offset": 4381}}, "start": {"col": 22, "line": 158, "offset": 4533}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 42, "line": 158, "offset": 4553}, "start": {"col": 38, "line": 158, "offset": 4549}}, "$SRC": {"abstract_content": "local_54", "end": {"col": 37, "line": 158, "offset": 4548}, "start": {"col": 29, "line": 158, "offset": 4540}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 15, "line": 158, "offset": 4526}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 32, "line": 165, "offset": 4737}, "extra": {"engine_kind": "OSS", "fingerprint": "1240f72aeaf8532d9e4f73ff938fe4a6c363280759dbd2d6b633aef4f72dac615e408d4622856707d9944bd01e04823b197bffe18dcd77ea79965a676c0a93b0_5", "is_ignored": false, "lines": "        pvVar9 = calloc(1,0x1c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "calloc", "end": {"col": 24, "line": 165, "offset": 4729}, "start": {"col": 18, "line": 165, "offset": 4723}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 18, "line": 165, "offset": 4723}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 32, "line": 165, "offset": 4737}, "extra": {"engine_kind": "OSS", "fingerprint": "509e9f2f6f74b57c40105bc711796fad1ceccc0431f4fb4158d013b003b1d83a1b994f86235fa0ed28243980c7b7e483807f525074857f47f145e61d39c6d885_0", "is_ignored": false, "lines": "        pvVar9 = calloc(1,0x1c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CNT": {"abstract_content": "1", "end": {"col": 26, "line": 165, "offset": 4731}, "start": {"col": 25, "line": 165, "offset": 4730}}, "$LEN": {"abstract_content": "0x1c", "end": {"col": 31, "line": 165, "offset": 4736}, "start": {"col": 27, "line": 165, "offset": 4732}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 18, "line": 165, "offset": 4723}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 173, "offset": 5065}, "extra": {"engine_kind": "OSS", "fingerprint": "acf63fc5062f5aff5dc9e19f78e6d7bf4aad5d0675a31df7fc394fb14f4551be4f592af216ecbbac6a80ee49caed913236962e215131a7ffb71c81e2e9730011_7", "is_ignored": false, "lines": "        memcpy(*(void **)((int)__dest + 0x24),__s + 0x10,0x1c);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 173, "offset": 5017}, "start": {"col": 9, "line": 173, "offset": 5011}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 9, "line": 173, "offset": 5011}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 63, "line": 173, "offset": 5065}, "extra": {"engine_kind": "OSS", "fingerprint": "df1fcee84ddf4fe5fe90b52cd65659c5e43ef1c863b80565246b05f8cfabc1c34854e0d67044dd2b892a7689578137b943df089a190f4074a4d6974625a4b282_0", "is_ignored": false, "lines": "        memcpy(*(void **)((int)__dest + 0x24),__s + 0x10,0x1c);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "*(void**(int __dest+0x24", "end": {"col": 45, "line": 173, "offset": 5047}, "start": {"col": 16, "line": 173, "offset": 5018}}, "$LEN": {"abstract_content": "0x1c", "end": {"col": 62, "line": 173, "offset": 5064}, "start": {"col": 58, "line": 173, "offset": 5060}}, "$SRC": {"abstract_content": "__s+0x10", "end": {"col": 57, "line": 173, "offset": 5059}, "start": {"col": 47, "line": 173, "offset": 5049}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/get_ifi_info_004076d0.c", "start": {"col": 9, "line": 173, "offset": 5011}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 39, "line": 233, "offset": 6953}, "extra": {"engine_kind": "OSS", "fingerprint": "f20c1a8750911be87032108d632dc07febddd7c3559f90fb0b04830250802f2ae9c761b9d1c610a4a2bb2812e07d24e1144e52861e56bf5c9a0ce72f68abdea8_0", "is_ignored": false, "lines": "    memcpy(&uStack_478,zeroOwner,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 233, "offset": 6925}, "start": {"col": 5, "line": 233, "offset": 6919}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 5, "line": 233, "offset": 6919}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 39, "line": 233, "offset": 6953}, "extra": {"engine_kind": "OSS", "fingerprint": "228c1510b9cb61e7ac65de89a13c98b41725c4dff54ee61c84159fd0477ad0503b57a62f016cc2b281b22caeeef2e569d66dd781726c50b292e636738cb89513_0", "is_ignored": false, "lines": "    memcpy(&uStack_478,zeroOwner,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&uStack_478", "end": {"col": 23, "line": 233, "offset": 6937}, "start": {"col": 12, "line": 233, "offset": 6926}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 38, "line": 233, "offset": 6952}, "start": {"col": 34, "line": 233, "offset": 6948}}, "$SRC": {"abstract_content": "zeroOwner", "end": {"col": 33, "line": 233, "offset": 6947}, "start": {"col": 24, "line": 233, "offset": 6938}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 5, "line": 233, "offset": 6919}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 53, "line": 300, "offset": 9624}, "extra": {"engine_kind": "OSS", "fingerprint": "f20c1a8750911be87032108d632dc07febddd7c3559f90fb0b04830250802f2ae9c761b9d1c610a4a2bb2812e07d24e1144e52861e56bf5c9a0ce72f68abdea8_1", "is_ignored": false, "lines": "                memcpy(&uStack_478,puVar19 + 2,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 23, "line": 300, "offset": 9594}, "start": {"col": 17, "line": 300, "offset": 9588}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 17, "line": 300, "offset": 9588}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 53, "line": 300, "offset": 9624}, "extra": {"engine_kind": "OSS", "fingerprint": "32e087dc0099172526f874a965913eae6bc096b99ea15fd72384eeeba57af013f2f281f84fe15dd64f746879cb7e3afaaddbc37b3d76dbb36caa5e1eb7df1b80_0", "is_ignored": false, "lines": "                memcpy(&uStack_478,puVar19 + 2,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "&uStack_478", "end": {"col": 35, "line": 300, "offset": 9606}, "start": {"col": 24, "line": 300, "offset": 9595}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 52, "line": 300, "offset": 9623}, "start": {"col": 48, "line": 300, "offset": 9619}}, "$SRC": {"abstract_content": "puVar19+2", "end": {"col": 47, "line": 300, "offset": 9618}, "start": {"col": 36, "line": 300, "offset": 9607}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 17, "line": 300, "offset": 9588}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 46, "line": 376, "offset": 12661}, "extra": {"engine_kind": "OSS", "fingerprint": "b956832de10615a25bc9017fc7e6ef6202d01a4fb7545f383c26a52f04c9cddd5c6477e7fb0c0e6c080ac687d159777a3f15433c24c946191e6460900fee04a5_0", "is_ignored": false, "lines": "          sVar1 = *(short *)(param_1 + 0x7fae);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 37, "line": 376, "offset": 12652}, "start": {"col": 30, "line": 376, "offset": 12645}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 16, "line": 376, "offset": 12631}, "start": {"col": 11, "line": 376, "offset": 12626}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 11, "line": 376, "offset": 12626}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 22, "line": 377, "offset": 12685}, "extra": {"engine_kind": "OSS", "fingerprint": "8adab25ba992da9115468bca11a976d80604b7922e6dc476e338b3ee18aa40c095678aea567e37a805947fc8d40f1aa50c530b6b441c8d1ac6f860b551d1b931_0", "is_ignored": false, "lines": "          __n = 0x200;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x200", "end": {"col": 22, "line": 377, "offset": 12685}, "start": {"col": 17, "line": 377, "offset": 12680}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 14, "line": 377, "offset": 12677}, "start": {"col": 11, "line": 377, "offset": 12674}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 11, "line": 377, "offset": 12674}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 47, "line": 378, "offset": 12733}, "extra": {"engine_kind": "OSS", "fingerprint": "d89aae6ff31e32acf395c99193979e359c5d21a8b9ba187b3380cab662362d129027d0c137503584403c27d0fdd600a989727288ee5fa0a50c851b641d1a8267_0", "is_ignored": false, "lines": "          if ((sVar1 != 0x11) && ((__n = 0x202, sVar1 != 0x1a && (__n = 0x214, sVar1 != 6)))) {", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x202", "end": {"col": 47, "line": 378, "offset": 12733}, "start": {"col": 42, "line": 378, "offset": 12728}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 39, "line": 378, "offset": 12725}, "start": {"col": 36, "line": 378, "offset": 12722}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 36, "line": 378, "offset": 12722}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 78, "line": 378, "offset": 12764}, "extra": {"engine_kind": "OSS", "fingerprint": "4f4f8c3eae9771eea861073240554f4af4330128b5d3e461a04dccfdb27456dcf078a3134d1b84378d3a9cb9df0894afef15bc8b184e41b5d94c36b21b01e976_0", "is_ignored": false, "lines": "          if ((sVar1 != 0x11) && ((__n = 0x202, sVar1 != 0x1a && (__n = 0x214, sVar1 != 6)))) {", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x214", "end": {"col": 78, "line": 378, "offset": 12764}, "start": {"col": 73, "line": 378, "offset": 12759}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 70, "line": 378, "offset": 12756}, "start": {"col": 67, "line": 378, "offset": 12753}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 67, "line": 378, "offset": 12753}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 55, "line": 379, "offset": 12837}, "extra": {"engine_kind": "OSS", "fingerprint": "665bff4418491c855755868ebc3fcbd0a23d637848f935dc2e11f0037e4ae4278ae458b9fd5b689892731371744331edc8444ac9ae080a48df72fb6b8669566f_0", "is_ignored": false, "lines": "            __n = (size_t)*(ushort *)(param_1 + 0x7fb8);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "param_1", "end": {"col": 46, "line": 379, "offset": 12828}, "start": {"col": 39, "line": 379, "offset": 12821}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 16, "line": 379, "offset": 12798}, "start": {"col": 13, "line": 379, "offset": 12795}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 13, "line": 379, "offset": 12795}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 63, "line": 421, "offset": 14825}, "extra": {"engine_kind": "OSS", "fingerprint": "f20c1a8750911be87032108d632dc07febddd7c3559f90fb0b04830250802f2ae9c761b9d1c610a4a2bb2812e07d24e1144e52861e56bf5c9a0ce72f68abdea8_2", "is_ignored": false, "lines": "            memcpy((void *)((int)pvVar5 + 0x4c),local_4c,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 421, "offset": 14781}, "start": {"col": 13, "line": 421, "offset": 14775}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 13, "line": 421, "offset": 14775}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 63, "line": 421, "offset": 14825}, "extra": {"engine_kind": "OSS", "fingerprint": "b42dc250466b6c461d1ea7b91abd8828ec801d69235acd58e14d28696a94f3fbafc090c6d3f2c16e7d42777dcecb6f4723f93be970f5f6a57fe0c0fd75ea0e75_0", "is_ignored": false, "lines": "            memcpy((void *)((int)pvVar5 + 0x4c),local_4c,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*(int pvVar5+0x4c", "end": {"col": 47, "line": 421, "offset": 14809}, "start": {"col": 20, "line": 421, "offset": 14782}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 62, "line": 421, "offset": 14824}, "start": {"col": 58, "line": 421, "offset": 14820}}, "$SRC": {"abstract_content": "local_4c", "end": {"col": 57, "line": 421, "offset": 14819}, "start": {"col": 49, "line": 421, "offset": 14811}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 13, "line": 421, "offset": 14775}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 65, "line": 601, "offset": 23204}, "extra": {"engine_kind": "OSS", "fingerprint": "f20c1a8750911be87032108d632dc07febddd7c3559f90fb0b04830250802f2ae9c761b9d1c610a4a2bb2812e07d24e1144e52861e56bf5c9a0ce72f68abdea8_3", "is_ignored": false, "lines": "            memcpy((void *)((int)puVar22 + 0x4e),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 601, "offset": 23158}, "start": {"col": 13, "line": 601, "offset": 23152}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 13, "line": 601, "offset": 23152}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 65, "line": 601, "offset": 23204}, "extra": {"engine_kind": "OSS", "fingerprint": "39327b5eb2b0e1ea0089d73edd6fadbbf788cffe4f484b1eec8b71cf97f9da28fc9cf9fbee806f73e75c61849665f661fe47890ae7fdd7874d119dc01adcc593_0", "is_ignored": false, "lines": "            memcpy((void *)((int)puVar22 + 0x4e),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*(int puVar22+0x4e", "end": {"col": 48, "line": 601, "offset": 23187}, "start": {"col": 20, "line": 601, "offset": 23159}}, "$LEN": {"abstract_content": "6", "end": {"col": 64, "line": 601, "offset": 23203}, "start": {"col": 63, "line": 601, "offset": 23202}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 62, "line": 601, "offset": 23201}, "start": {"col": 50, "line": 601, "offset": 23189}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 13, "line": 601, "offset": 23152}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 69, "line": 635, "offset": 24527}, "extra": {"engine_kind": "OSS", "fingerprint": "94a21f7304d2726896ca7013a24620295099a6c6ba4f31c2ea760e4468418c9ec2abb638664cbef577db0116b9bbbc2ff8f2cc5380616fba7382047a99982c41_0", "is_ignored": false, "lines": "        iVar3 = mDNS_snprintf(auStack_464,0x80,&DAT_0045d240,uVar23);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 30, "line": 635, "offset": 24488}, "start": {"col": 17, "line": 635, "offset": 24475}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 17, "line": 635, "offset": 24475}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 65, "line": 641, "offset": 24746}, "extra": {"engine_kind": "OSS", "fingerprint": "94a21f7304d2726896ca7013a24620295099a6c6ba4f31c2ea760e4468418c9ec2abb638664cbef577db0116b9bbbc2ff8f2cc5380616fba7382047a99982c41_1", "is_ignored": false, "lines": "            iVar3 = mDNS_snprintf(puVar14,0x80,\" %02X\",*puVar18);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 34, "line": 641, "offset": 24715}, "start": {"col": 21, "line": 641, "offset": 24702}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreReceive_00449d08.c", "start": {"col": 21, "line": 641, "offset": 24702}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 41, "line": 75, "offset": 2888}, "extra": {"engine_kind": "OSS", "fingerprint": "c5f6ea19c69a69670a0f3a22ce16e1cf6dd2b87c67bd1b798eeed402cfee89880a877e4ba829c3f5baa30ec7f8badb69673ff74e0581b1079f4df446a9169e22_0", "is_ignored": false, "lines": "        sVar1 = *(short *)(puVar6 + 0x95);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x95", "end": {"col": 41, "line": 75, "offset": 2888}, "start": {"col": 37, "line": 75, "offset": 2884}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 14, "line": 75, "offset": 2861}, "start": {"col": 9, "line": 75, "offset": 2856}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSCoreRestartAddressQueries_0043739c.c", "start": {"col": 9, "line": 75, "offset": 2856}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 52, "line": 35, "offset": 755}, "extra": {"engine_kind": "OSS", "fingerprint": "aa863fb0179b8e7e78c861d6c188f5e370f475621150b436c9e6bde663bd264010c40f3ad59a24bd51d8a1d734f56f11338e2928d32c02ec89398ec205a547fd_0", "is_ignored": false, "lines": "    cVar1 = *(char *)((int)param_1 + uVar5 + 0x1a59);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_1", "end": {"col": 35, "line": 35, "offset": 738}, "start": {"col": 23, "line": 35, "offset": 726}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 10, "line": 35, "offset": 713}, "start": {"col": 5, "line": 35, "offset": 708}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInit_00406620.c", "start": {"col": 5, "line": 35, "offset": 708}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 54, "line": 49, "offset": 1248}, "extra": {"engine_kind": "OSS", "fingerprint": "aa863fb0179b8e7e78c861d6c188f5e370f475621150b436c9e6bde663bd264010c40f3ad59a24bd51d8a1d734f56f11338e2928d32c02ec89398ec205a547fd_1", "is_ignored": false, "lines": "      cVar1 = *(char *)((int)param_1 + iVar2 + 0x1a99);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_1", "end": {"col": 37, "line": 49, "offset": 1231}, "start": {"col": 25, "line": 49, "offset": 1219}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 12, "line": 49, "offset": 1206}, "start": {"col": 7, "line": 49, "offset": 1201}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInit_00406620.c", "start": {"col": 7, "line": 49, "offset": 1201}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 28, "line": 75, "offset": 2070}, "extra": {"engine_kind": "OSS", "fingerprint": "018ff2545e54420ed057aac6bc770bccf4bf6957a964da7b65d0c7f2b2e229f56907e15fccba5698beccc5985da7eff0c292a1079ee4c3a4e348ecdc89e328ab_0", "is_ignored": false, "lines": "  piVar6 = (int *)malloc(8);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "malloc", "end": {"col": 25, "line": 75, "offset": 2067}, "start": {"col": 19, "line": 75, "offset": 2061}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInit_00406620.c", "start": {"col": 19, "line": 75, "offset": 2061}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 28, "line": 75, "offset": 2070}, "extra": {"engine_kind": "OSS", "fingerprint": "8f1a62041e5ce5a260af1bb3c54b7f038319bd8423eedd4c8a24f201a700e3e577e54aaaaede5d8b5f5424cc88f64e9c0df14bf40eb4d053a3a5ed7a25a3e463_0", "is_ignored": false, "lines": "  piVar6 = (int *)malloc(8);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$LEN": {"abstract_content": "8", "end": {"col": 27, "line": 75, "offset": 2069}, "start": {"col": 26, "line": 75, "offset": 2068}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformInit_00406620.c", "start": {"col": 19, "line": 75, "offset": 2061}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 7, "offset": 130}, "extra": {"engine_kind": "OSS", "fingerprint": "b3ab3678adfcdddd6517ac7e62e79239c08779e0be24e50d3db40e23b7c93ff12aa8dc927166830b8652e4da42b5faf0b4c1aff8b500194dafcbcc7afb48a474_0", "is_ignored": false, "lines": "  iVar1 = memcmp(param_1,param_2,param_3);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "iVar1", "end": {"col": 8, "line": 7, "offset": 96}, "start": {"col": 3, "line": 7, "offset": 91}}, "$UNSIGNED": {"abstract_content": "param_3", "end": {"col": 41, "line": 7, "offset": 129}, "start": {"col": 34, "line": 7, "offset": 122}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformMemSame_00404f1c.c", "start": {"col": 3, "line": 7, "offset": 91}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 51, "offset": 1292}, "extra": {"engine_kind": "OSS", "fingerprint": "9fe5896d31f73eac7211319267829dbacb2485a0cd967a7703a37cdb4fc39e76b5f00871b8898c2db206bb059004b3afd33a8f254afbc5cbc30c0c9d7da0688d_0", "is_ignored": false, "lines": "      memcpy(local_48[0].sa_data + 6,param_6 + 1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 51, "offset": 1250}, "start": {"col": 7, "line": 51, "offset": 1244}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSendUDP_00406a28.c", "start": {"col": 7, "line": 51, "offset": 1244}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 55, "line": 51, "offset": 1292}, "extra": {"engine_kind": "OSS", "fingerprint": "2d776d5f1f451ebeface835782d0b8030b1db4d49ba38b171e43cfcb0530cec310980e6f79883dfdd9f89211422ff721c84e9dfc9e34977884907d3bacbe9e10_0", "is_ignored": false, "lines": "      memcpy(local_48[0].sa_data + 6,param_6 + 1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_48[0].sa_data+6", "end": {"col": 37, "line": 51, "offset": 1274}, "start": {"col": 14, "line": 51, "offset": 1251}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 54, "line": 51, "offset": 1291}, "start": {"col": 50, "line": 51, "offset": 1287}}, "$SRC": {"abstract_content": "param_6+1", "end": {"col": 49, "line": 51, "offset": 1286}, "start": {"col": 38, "line": 51, "offset": 1275}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSendUDP_00406a28.c", "start": {"col": 7, "line": 51, "offset": 1244}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 32, "offset": 675}, "extra": {"engine_kind": "OSS", "fingerprint": "8b072dbbe773c5bcf3fdfa30bb4ad464b14b5dc7038845ee4f34418ee444f68995d7a50e937f04739673f05680c7169772349a4a5b16ef22e275d39db2a574a3_0", "is_ignored": false, "lines": "      memcpy(local_3c.sa_data + 6,param_2 + 1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 32, "offset": 636}, "start": {"col": 7, "line": 32, "offset": 630}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSourceAddrForDest_00424bf4.c", "start": {"col": 7, "line": 32, "offset": 630}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 32, "offset": 675}, "extra": {"engine_kind": "OSS", "fingerprint": "5d5fac7bc8f1021eaa50ec11f8da276604ffb76edafd48b594cc5e28f264dba25c431f16a0311f0e3eb10424df1fa6a2754e8801c03d2ec6319a904b2fc3e753_0", "is_ignored": false, "lines": "      memcpy(local_3c.sa_data + 6,param_2 + 1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_3c.sa_data+6", "end": {"col": 34, "line": 32, "offset": 657}, "start": {"col": 14, "line": 32, "offset": 637}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 51, "line": 32, "offset": 674}, "start": {"col": 47, "line": 32, "offset": 670}}, "$SRC": {"abstract_content": "param_2+1", "end": {"col": 46, "line": 32, "offset": 669}, "start": {"col": 35, "line": 32, "offset": 658}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSourceAddrForDest_00424bf4.c", "start": {"col": 7, "line": 32, "offset": 630}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 56, "line": 59, "offset": 1558}, "extra": {"engine_kind": "OSS", "fingerprint": "8b072dbbe773c5bcf3fdfa30bb4ad464b14b5dc7038845ee4f34418ee444f68995d7a50e937f04739673f05680c7169772349a4a5b16ef22e275d39db2a574a3_1", "is_ignored": false, "lines": "          memcpy(param_1 + 1,local_3c.sa_data + 6,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 59, "offset": 1519}, "start": {"col": 11, "line": 59, "offset": 1513}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSourceAddrForDest_00424bf4.c", "start": {"col": 11, "line": 59, "offset": 1513}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 56, "line": 59, "offset": 1558}, "extra": {"engine_kind": "OSS", "fingerprint": "8bed4aa34469fa9cd7bb62002a56b2ed0c3c52163132bfa63cf77d33f1898cd78fda02275b9f75bbf522b039c8a6f04f3c3f44b566c66382003e3ad10f2c5ace_0", "is_ignored": false, "lines": "          memcpy(param_1 + 1,local_3c.sa_data + 6,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_1+1", "end": {"col": 29, "line": 59, "offset": 1531}, "start": {"col": 18, "line": 59, "offset": 1520}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 55, "line": 59, "offset": 1557}, "start": {"col": 51, "line": 59, "offset": 1553}}, "$SRC": {"abstract_content": "local_3c.sa_data+6", "end": {"col": 50, "line": 59, "offset": 1552}, "start": {"col": 30, "line": 59, "offset": 1532}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSPlatformSourceAddrForDest_00424bf4.c", "start": {"col": 11, "line": 59, "offset": 1513}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 21, "line": 28, "offset": 630}, "extra": {"engine_kind": "OSS", "fingerprint": "6115e06e0b51248abe65b389214167edfa266abe3405e24b0c698373d704d400a9382eebd4b9956443b2dfb8b2706d7e712025e52d6bdb7797937550806cd84f_0", "is_ignored": false, "lines": "  sVar1 = param_2[5];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "5", "end": {"col": 20, "line": 28, "offset": 629}, "start": {"col": 19, "line": 28, "offset": 628}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 8, "line": 28, "offset": 617}, "start": {"col": 3, "line": 28, "offset": 612}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "start": {"col": 3, "line": 28, "offset": 612}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 21, "line": 46, "offset": 1287}, "extra": {"engine_kind": "OSS", "fingerprint": "f950e6252dd9a2392f62bb3c8269ccf226c73b305360bbd258be1e57ba5d92a886912ed3a6fe665d3175cd4bdd24d9fa291ec7c96aadefe1ce0d81cfdb2a3786_0", "is_ignored": false, "lines": "  sVar2 = param_2[5];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "5", "end": {"col": 20, "line": 46, "offset": 1286}, "start": {"col": 19, "line": 46, "offset": 1285}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 8, "line": 46, "offset": 1274}, "start": {"col": 3, "line": 46, "offset": 1269}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "start": {"col": 3, "line": 46, "offset": 1269}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 21, "line": 104, "offset": 3539}, "extra": {"engine_kind": "OSS", "fingerprint": "5122376c843d5b860afa774cafaac5689e3d9ee113fdec6ae0fa1c4747b7fc4f25896a45a82b11e5ae3854a8556b125a973ab56e88da4e9c0c185d22e4ecc9b0_0", "is_ignored": false, "lines": "  sVar2 = param_2[4];", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "4", "end": {"col": 20, "line": 104, "offset": 3538}, "start": {"col": 19, "line": 104, "offset": 3537}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 8, "line": 104, "offset": 3526}, "start": {"col": 3, "line": 104, "offset": 3521}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNSSendDNSMessage_004241e4.c", "start": {"col": 3, "line": 104, "offset": 3521}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 57, "line": 92, "offset": 3056}, "extra": {"engine_kind": "OSS", "fingerprint": "1678d813814d2013d012afcc7a2cf63b7d1c2650395ffa923b494e08a5ed0475b7e6f881af423b725b321cbb9025fdec75451f3ab848015661d4a3876139ae96_0", "is_ignored": false, "lines": "      memcpy((void *)((int)*ppvVar5 + 0xc),param_5,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 92, "offset": 3012}, "start": {"col": 7, "line": 92, "offset": 3006}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_AddDNSServer_004102d0.c", "start": {"col": 7, "line": 92, "offset": 3006}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 57, "line": 92, "offset": 3056}, "extra": {"engine_kind": "OSS", "fingerprint": "aa883391afdb6654e06728dc06b58b5e5aa0caa560adafb53e5724f249a44fa05e1cf650e5aa769a9226b3d968fd307db5be6fd6898d43fb5720b06afb5d8489_0", "is_ignored": false, "lines": "      memcpy((void *)((int)*ppvVar5 + 0xc),param_5,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*(int*ppvVar5+0xc", "end": {"col": 42, "line": 92, "offset": 3041}, "start": {"col": 14, "line": 92, "offset": 3013}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 56, "line": 92, "offset": 3055}, "start": {"col": 52, "line": 92, "offset": 3051}}, "$SRC": {"abstract_content": "param_5", "end": {"col": 51, "line": 92, "offset": 3050}, "start": {"col": 44, "line": 92, "offset": 3043}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_AddDNSServer_004102d0.c", "start": {"col": 7, "line": 92, "offset": 3006}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 32, "line": 22, "offset": 446}, "extra": {"engine_kind": "OSS", "fingerprint": "59799eeacfa05111f209734abbb6839440e715160f4470e8474a438bf05505fe226587c7e0b623575f87f8a367f054c074e1e927e121a38210af51c3ebeb46bb_0", "is_ignored": false, "lines": "  cVar1 = *(char *)(param_2 + 1);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "1", "end": {"col": 32, "line": 22, "offset": 446}, "start": {"col": 31, "line": 22, "offset": 445}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 8, "line": 22, "offset": 422}, "start": {"col": 3, "line": 22, "offset": 417}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_internal_00438e74.c", "start": {"col": 3, "line": 22, "offset": 417}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 61, "line": 52, "offset": 1439}, "extra": {"engine_kind": "OSS", "fingerprint": "a57a89444a948dd30fc66ad83bd74d1d7e432fef982ef1b4e5f88c14d10bff72dcac9a4db0b09975b5ae177bfe7629c12d569ab3421aa7acbbbdd9d84d99a084_0", "is_ignored": false, "lines": "        memcpy((void *)((int)param_2 + 0x4e),&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 52, "offset": 1393}, "start": {"col": 9, "line": 52, "offset": 1387}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_internal_00438e74.c", "start": {"col": 9, "line": 52, "offset": 1387}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 61, "line": 52, "offset": 1439}, "extra": {"engine_kind": "OSS", "fingerprint": "40702358aafe45859629da6bdcc18e52070989c9fa9ed9fc545bb18e0bf517da9b8aecc2b81d8b57612724febd02fea5627fb4210a6fd9cea605890320d323e8_0", "is_ignored": false, "lines": "        memcpy((void *)((int)param_2 + 0x4e),&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*(int param_2+0x4e", "end": {"col": 44, "line": 52, "offset": 1422}, "start": {"col": 16, "line": 52, "offset": 1394}}, "$LEN": {"abstract_content": "6", "end": {"col": 60, "line": 52, "offset": 1438}, "start": {"col": 59, "line": 52, "offset": 1437}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 58, "line": 52, "offset": 1436}, "start": {"col": 46, "line": 52, "offset": 1424}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_internal_00438e74.c", "start": {"col": 9, "line": 52, "offset": 1387}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 52, "line": 127, "offset": 4938}, "extra": {"engine_kind": "OSS", "fingerprint": "a57a89444a948dd30fc66ad83bd74d1d7e432fef982ef1b4e5f88c14d10bff72dcac9a4db0b09975b5ae177bfe7629c12d569ab3421aa7acbbbdd9d84d99a084_1", "is_ignored": false, "lines": "        memcpy(ppiVar12 + 0x28,param_2 + 0x28,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 127, "offset": 4901}, "start": {"col": 9, "line": 127, "offset": 4895}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_internal_00438e74.c", "start": {"col": 9, "line": 127, "offset": 4895}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 52, "line": 127, "offset": 4938}, "extra": {"engine_kind": "OSS", "fingerprint": "be282897813f154935ad6511bb6b9bf91dbc1d2e3503c3798196485e6905f109d91db611fede7b73e69a028d3582b6f25921cd0b63b740dae53e90e517a57aec_0", "is_ignored": false, "lines": "        memcpy(ppiVar12 + 0x28,param_2 + 0x28,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "ppiVar12+0x28", "end": {"col": 31, "line": 127, "offset": 4917}, "start": {"col": 16, "line": 127, "offset": 4902}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 51, "line": 127, "offset": 4937}, "start": {"col": 47, "line": 127, "offset": 4933}}, "$SRC": {"abstract_content": "param_2+0x28", "end": {"col": 46, "line": 127, "offset": 4932}, "start": {"col": 32, "line": 127, "offset": 4918}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Deregister_internal_00438e74.c", "start": {"col": 9, "line": 127, "offset": 4895}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 12, "offset": 339}, "extra": {"engine_kind": "OSS", "fingerprint": "6b2b4a0c5ce4af0fdeb6f68b78f5e24963185ff2d5211d0e97d12b526d386aa254c63b19106df713cefda3abab59d369cae671df63d14e742db0ba4b35af2bfa_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 12, "offset": 298}, "start": {"col": 3, "line": 12, "offset": 292}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_GetDomains_00433fc4.c", "start": {"col": 3, "line": 12, "offset": 292}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 12, "offset": 339}, "extra": {"engine_kind": "OSS", "fingerprint": "bca414b2e7fd86066db1f8e4c0b8a0033017e23bfcff53d1d9d1a904936720a280bd8efdab70e19348cc1b491d9662d336f8c3e1d1bff480ce00587ebc6539ee_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x13c", "end": {"col": 34, "line": 12, "offset": 323}, "start": {"col": 10, "line": 12, "offset": 299}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 12, "offset": 338}, "start": {"col": 45, "line": 12, "offset": 334}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 12, "offset": 333}, "start": {"col": 36, "line": 12, "offset": 325}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_GetDomains_00433fc4.c", "start": {"col": 3, "line": 12, "offset": 292}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 37, "line": 29, "offset": 676}, "extra": {"engine_kind": "OSS", "fingerprint": "8da016fefa4f2513d513b824366a20886298b2b2e4ed8dfed1a0b7c4558cd1f6810cc079cbe10ccb280828bb8f658c0f9b2d3ff84927760900738ce0e15716cb_0", "is_ignored": false, "lines": "  memcpy(param_1 + 5,&zeroEthAddr,6);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 29, "offset": 648}, "start": {"col": 3, "line": 29, "offset": 642}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 3, "line": 29, "offset": 642}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 37, "line": 29, "offset": 676}, "extra": {"engine_kind": "OSS", "fingerprint": "5221527851b4e354379df7e2874185054a45b3ae3b03f160d9e37a77fb36fefeefd6fca43f2bb27d768965b613867ef0f5aac390ab4589d243e64946d9a6ae41_0", "is_ignored": false, "lines": "  memcpy(param_1 + 5,&zeroEthAddr,6);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_1+5", "end": {"col": 21, "line": 29, "offset": 660}, "start": {"col": 10, "line": 29, "offset": 649}}, "$LEN": {"abstract_content": "6", "end": {"col": 36, "line": 29, "offset": 675}, "start": {"col": 35, "line": 29, "offset": 674}}, "$SRC": {"abstract_content": "&zeroEthAddr", "end": {"col": 34, "line": 29, "offset": 673}, "start": {"col": 22, "line": 29, "offset": 661}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 3, "line": 29, "offset": 642}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 135, "offset": 3651}, "extra": {"engine_kind": "OSS", "fingerprint": "8da016fefa4f2513d513b824366a20886298b2b2e4ed8dfed1a0b7c4558cd1f6810cc079cbe10ccb280828bb8f658c0f9b2d3ff84927760900738ce0e15716cb_1", "is_ignored": false, "lines": "    memcpy(param_1 + 0x866,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 135, "offset": 3620}, "start": {"col": 5, "line": 135, "offset": 3614}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 5, "line": 135, "offset": 3614}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 135, "offset": 3651}, "extra": {"engine_kind": "OSS", "fingerprint": "81463a026fa15d9593ed1b5a00fabfee07ad170b16b48b9750447dd8e6e2d3dd7484530b3d424033e75fc7358d01d77c35c8a72565abd9dcc5605c7b16e742a7_0", "is_ignored": false, "lines": "    memcpy(param_1 + 0x866,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_1+0x866", "end": {"col": 27, "line": 135, "offset": 3636}, "start": {"col": 12, "line": 135, "offset": 3621}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 41, "line": 135, "offset": 3650}, "start": {"col": 37, "line": 135, "offset": 3646}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 36, "line": 135, "offset": 3645}, "start": {"col": 28, "line": 135, "offset": 3637}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 5, "line": 135, "offset": 3614}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 136, "offset": 3694}, "extra": {"engine_kind": "OSS", "fingerprint": "8da016fefa4f2513d513b824366a20886298b2b2e4ed8dfed1a0b7c4558cd1f6810cc079cbe10ccb280828bb8f658c0f9b2d3ff84927760900738ce0e15716cb_2", "is_ignored": false, "lines": "    memcpy(param_1 + 0x86b,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 136, "offset": 3663}, "start": {"col": 5, "line": 136, "offset": 3657}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 5, "line": 136, "offset": 3657}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 136, "offset": 3694}, "extra": {"engine_kind": "OSS", "fingerprint": "6211c1c73e206d83deda69b650b1da180cc9571eed63553e5413f2fc0aab5536090c2612be5ce3cd5a3ab9325ea47f5aa0db3312e80d74c5979633f91cc7f06c_0", "is_ignored": false, "lines": "    memcpy(param_1 + 0x86b,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_1+0x86b", "end": {"col": 27, "line": 136, "offset": 3679}, "start": {"col": 12, "line": 136, "offset": 3664}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 41, "line": 136, "offset": 3693}, "start": {"col": 37, "line": 136, "offset": 3689}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 36, "line": 136, "offset": 3688}, "start": {"col": 28, "line": 136, "offset": 3680}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 5, "line": 136, "offset": 3657}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 137, "offset": 3737}, "extra": {"engine_kind": "OSS", "fingerprint": "8da016fefa4f2513d513b824366a20886298b2b2e4ed8dfed1a0b7c4558cd1f6810cc079cbe10ccb280828bb8f658c0f9b2d3ff84927760900738ce0e15716cb_3", "is_ignored": false, "lines": "    memcpy(param_1 + 0x870,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 11, "line": 137, "offset": 3706}, "start": {"col": 5, "line": 137, "offset": 3700}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 5, "line": 137, "offset": 3700}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 137, "offset": 3737}, "extra": {"engine_kind": "OSS", "fingerprint": "657caab4c96170bf55d99c858b9d5ee74362ced6f602f7a944aa3f5993e51874689affc596eba6fb05c2b34ee19718bd6293f4306afb22f0bdf79435f3f92c5c_0", "is_ignored": false, "lines": "    memcpy(param_1 + 0x870,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_1+0x870", "end": {"col": 27, "line": 137, "offset": 3722}, "start": {"col": 12, "line": 137, "offset": 3707}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 41, "line": 137, "offset": 3736}, "start": {"col": 37, "line": 137, "offset": 3732}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 36, "line": 137, "offset": 3731}, "start": {"col": 28, "line": 137, "offset": 3723}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Init_00436e30.c", "start": {"col": 5, "line": 137, "offset": 3700}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 31, "line": 11, "offset": 161}, "extra": {"engine_kind": "OSS", "fingerprint": "6c85bd8ced1ea12069a5a28e2b99388892b7a909b3082bb5f21a5eb26eae32ae2f4b8f7d6e96488bffba5ce2e6918d7639e6bb6f4b9f87d4526d7612645e3fe8_0", "is_ignored": false, "lines": "    sVar2 = mDNSRandom(0xfffe);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0xfffe", "end": {"col": 30, "line": 11, "offset": 160}, "start": {"col": 24, "line": 11, "offset": 154}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 10, "line": 11, "offset": 140}, "start": {"col": 5, "line": 11, "offset": 135}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_NewMessageID_00428b8c.c", "start": {"col": 5, "line": 11, "offset": 135}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 38, "line": 32, "offset": 672}, "extra": {"engine_kind": "OSS", "fingerprint": "9167a0215957a459b508fdcb2838b5a5cbda11b5533f3cb5ff35520b43605c238d16bd8a43e079ba07b362af7ea265437652be9003b45a5617195701671608bd_0", "is_ignored": false, "lines": "  sVar3 = *(short *)((int)param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_2", "end": {"col": 34, "line": 32, "offset": 668}, "start": {"col": 22, "line": 32, "offset": 656}}, "$NARROW": {"abstract_content": "sVar3", "end": {"col": 8, "line": 32, "offset": 642}, "start": {"col": 3, "line": 32, "offset": 637}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Register_internal_004463c4.c", "start": {"col": 3, "line": 32, "offset": 637}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 146, "offset": 5541}, "extra": {"engine_kind": "OSS", "fingerprint": "9e2eba9d94169e57c3c94a26b2c4f391b6c1b4a85f2d915ab1e5f2e9bc2ff8f11b49baa6817f58f46351b99eb81df08619c7b3a3908af55360937db2e65ff14d_0", "is_ignored": false, "lines": "            memcpy(param_2 + 0x28,zerov6Addr,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 146, "offset": 5509}, "start": {"col": 13, "line": 146, "offset": 5503}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Register_internal_004463c4.c", "start": {"col": 13, "line": 146, "offset": 5503}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 51, "line": 146, "offset": 5541}, "extra": {"engine_kind": "OSS", "fingerprint": "164747ea8ce054c2e5b49b5e185a03b77aef28901f8a91adfd28ff4a43b9da42e63f3b980ea844e29b4ebbea938efac8de8bd9ae35ee4256988d60e5eff196a5_0", "is_ignored": false, "lines": "            memcpy(param_2 + 0x28,zerov6Addr,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_2+0x28", "end": {"col": 34, "line": 146, "offset": 5524}, "start": {"col": 20, "line": 146, "offset": 5510}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 50, "line": 146, "offset": 5540}, "start": {"col": 46, "line": 146, "offset": 5536}}, "$SRC": {"abstract_content": "zerov6Addr", "end": {"col": 45, "line": 146, "offset": 5535}, "start": {"col": 35, "line": 146, "offset": 5525}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Register_internal_004463c4.c", "start": {"col": 13, "line": 146, "offset": 5503}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 52, "line": 191, "offset": 7362}, "extra": {"engine_kind": "OSS", "fingerprint": "9167a0215957a459b508fdcb2838b5a5cbda11b5533f3cb5ff35520b43605c238d16bd8a43e079ba07b362af7ea265437652be9003b45a5617195701671608bd_1", "is_ignored": false, "lines": "                sVar3 = *(short *)((int)param_2 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_2", "end": {"col": 48, "line": 191, "offset": 7358}, "start": {"col": 36, "line": 191, "offset": 7346}}, "$NARROW": {"abstract_content": "sVar3", "end": {"col": 22, "line": 191, "offset": 7332}, "start": {"col": 17, "line": 191, "offset": 7327}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_Register_internal_004463c4.c", "start": {"col": 17, "line": 191, "offset": 7327}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 38, "line": 53, "offset": 1412}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_0", "is_ignored": false, "lines": "        memcpy(local_68,puVar10,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 53, "offset": 1389}, "start": {"col": 9, "line": 53, "offset": 1383}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 9, "line": 53, "offset": 1383}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 38, "line": 53, "offset": 1412}, "extra": {"engine_kind": "OSS", "fingerprint": "514540aae49e26a7337d54c2aa34ff18b2f82f0f633bfce9d9a5763f3377927b658629f73fd71681f6106ed9f99eb963045b0305ecd6a8dd6fe1d83b79c1f929_0", "is_ignored": false, "lines": "        memcpy(local_68,puVar10,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "local_68", "end": {"col": 24, "line": 53, "offset": 1398}, "start": {"col": 16, "line": 53, "offset": 1390}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 37, "line": 53, "offset": 1411}, "start": {"col": 33, "line": 53, "offset": 1407}}, "$SRC": {"abstract_content": "puVar10", "end": {"col": 32, "line": 53, "offset": 1406}, "start": {"col": 25, "line": 53, "offset": 1399}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 9, "line": 53, "offset": 1383}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 42, "line": 61, "offset": 1694}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_1", "is_ignored": false, "lines": "          memcpy(auStack_58,puVar10,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 61, "offset": 1669}, "start": {"col": 11, "line": 61, "offset": 1663}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 61, "offset": 1663}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 42, "line": 61, "offset": 1694}, "extra": {"engine_kind": "OSS", "fingerprint": "f76ecf22124b6f04a9bb2cb8c61e98db30fd0d127ca9d159b8a6516a6d2a6605602050597fe63ee3a34861a3d01d6d41b9da7c1a7174b0cf401a74b166f3dbc9_0", "is_ignored": false, "lines": "          memcpy(auStack_58,puVar10,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_58", "end": {"col": 28, "line": 61, "offset": 1680}, "start": {"col": 18, "line": 61, "offset": 1670}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 41, "line": 61, "offset": 1693}, "start": {"col": 37, "line": 61, "offset": 1689}}, "$SRC": {"abstract_content": "puVar10", "end": {"col": 36, "line": 61, "offset": 1688}, "start": {"col": 29, "line": 61, "offset": 1681}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 61, "offset": 1663}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 44, "line": 69, "offset": 1988}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_2", "is_ignored": false, "lines": "            memcpy(auStack_48,puVar10,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 19, "line": 69, "offset": 1963}, "start": {"col": 13, "line": 69, "offset": 1957}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 13, "line": 69, "offset": 1957}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 44, "line": 69, "offset": 1988}, "extra": {"engine_kind": "OSS", "fingerprint": "73b25b02fd65cff2ace907052cd045c8a3ace1edbcf94171e8e4de8911ceff5f72dcc815f5ca0b1941e43f0189e65060c623b36c7a49a577339e20c2320e19fb_0", "is_ignored": false, "lines": "            memcpy(auStack_48,puVar10,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_48", "end": {"col": 30, "line": 69, "offset": 1974}, "start": {"col": 20, "line": 69, "offset": 1964}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 43, "line": 69, "offset": 1987}, "start": {"col": 39, "line": 69, "offset": 1983}}, "$SRC": {"abstract_content": "puVar10", "end": {"col": 38, "line": 69, "offset": 1982}, "start": {"col": 31, "line": 69, "offset": 1975}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 13, "line": 69, "offset": 1957}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 46, "line": 77, "offset": 2298}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_3", "is_ignored": false, "lines": "              memcpy(auStack_38,puVar10,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 21, "line": 77, "offset": 2273}, "start": {"col": 15, "line": 77, "offset": 2267}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 15, "line": 77, "offset": 2267}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 46, "line": 77, "offset": 2298}, "extra": {"engine_kind": "OSS", "fingerprint": "48bd9fdb335b4e5136faefe69f178f7ceda346b2972ce66bd24937e7dca13a9b74ac678685836738ad2fec2d3c275f8636a707e5f8554b6e6b811f5388d2c4e1_0", "is_ignored": false, "lines": "              memcpy(auStack_38,puVar10,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "auStack_38", "end": {"col": 32, "line": 77, "offset": 2284}, "start": {"col": 22, "line": 77, "offset": 2274}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 45, "line": 77, "offset": 2297}, "start": {"col": 41, "line": 77, "offset": 2293}}, "$SRC": {"abstract_content": "puVar10", "end": {"col": 40, "line": 77, "offset": 2292}, "start": {"col": 33, "line": 77, "offset": 2285}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 15, "line": 77, "offset": 2267}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 93, "offset": 2721}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_4", "is_ignored": false, "lines": "          memcpy((void *)(param_1 + 0x21ac),param_2,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 93, "offset": 2680}, "start": {"col": 11, "line": 93, "offset": 2674}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 93, "offset": 2674}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 58, "line": 93, "offset": 2721}, "extra": {"engine_kind": "OSS", "fingerprint": "1bfdba13fa4b9b628b689e350aecf7ff64cc6591c502805d88a27de72e1af73a1a932266f8be17cd9ff414afa2a1da38b4f210f9ac862938cfc4b0a8cec12cf9_0", "is_ignored": false, "lines": "          memcpy((void *)(param_1 + 0x21ac),param_2,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_1+0x21ac", "end": {"col": 43, "line": 93, "offset": 2706}, "start": {"col": 18, "line": 93, "offset": 2681}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 57, "line": 93, "offset": 2720}, "start": {"col": 53, "line": 93, "offset": 2716}}, "$SRC": {"abstract_content": "param_2", "end": {"col": 52, "line": 93, "offset": 2715}, "start": {"col": 45, "line": 93, "offset": 2708}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 93, "offset": 2674}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 21, "line": 99, "offset": 2914}, "extra": {"engine_kind": "OSS", "fingerprint": "bb1b5d1c4746dd96b7626b55b35754ea9e37d01a7671fe7920b38d51686625125b0356969c21b589dd21146da9bec429d797acdece21cc0bebed3d3244f371e4_0", "is_ignored": false, "lines": "          __n = 0x10;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x10", "end": {"col": 21, "line": 99, "offset": 2914}, "start": {"col": 17, "line": 99, "offset": 2910}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 14, "line": 99, "offset": 2907}, "start": {"col": 11, "line": 99, "offset": 2904}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 99, "offset": 2904}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 21, "line": 102, "offset": 2961}, "extra": {"engine_kind": "OSS", "fingerprint": "bd1be0738d9fab1bd4def9c69d4fd6a2b3cdaa87e7fca0685371481f2ad04fb1eb27f543807a68da2b4b8466102e0c04470c021e31a9bab28313326aa81afcb2_0", "is_ignored": false, "lines": "          __n = 0x14;", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$SIGNED": {"abstract_content": "0x14", "end": {"col": 21, "line": 102, "offset": 2961}, "start": {"col": 17, "line": 102, "offset": 2957}}, "$UNSIGNED": {"abstract_content": "__n", "end": {"col": 14, "line": 102, "offset": 2954}, "start": {"col": 11, "line": 102, "offset": 2951}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 102, "offset": 2951}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 35, "line": 105, "offset": 3050}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_5", "is_ignored": false, "lines": "        memcpy(__dest,puVar10,__n);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 105, "offset": 3030}, "start": {"col": 9, "line": 105, "offset": 3024}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 9, "line": 105, "offset": 3024}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 35, "line": 105, "offset": 3050}, "extra": {"engine_kind": "OSS", "fingerprint": "290ae06186b9bbf1308d8fc68ba6b6fa245ddff0280f0f130d1db54f91cff9269049b54aba062c4fd8a76ebc6489b5898ec8deae1bf0800fd21c6dfe1fbaddad_0", "is_ignored": false, "lines": "        memcpy(__dest,puVar10,__n);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "__dest", "end": {"col": 22, "line": 105, "offset": 3037}, "start": {"col": 16, "line": 105, "offset": 3031}}, "$LEN": {"abstract_content": "__n", "end": {"col": 34, "line": 105, "offset": 3049}, "start": {"col": 31, "line": 105, "offset": 3046}}, "$SRC": {"abstract_content": "puVar10", "end": {"col": 30, "line": 105, "offset": 3045}, "start": {"col": 23, "line": 105, "offset": 3038}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 9, "line": 105, "offset": 3024}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 58, "line": 110, "offset": 3220}, "extra": {"engine_kind": "OSS", "fingerprint": "a64c789e08bba823e2f83139f9aa05a6596e0dca575273368abd8c561c3d1c2ca249381646e26e86566fe696de8783f67378fc0e8467678b1bc48ba7aa53d06e_6", "is_ignored": false, "lines": "          memcpy((void *)(param_1 + 0x2198),param_4,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 110, "offset": 3179}, "start": {"col": 11, "line": 110, "offset": 3173}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 110, "offset": 3173}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 58, "line": 110, "offset": 3220}, "extra": {"engine_kind": "OSS", "fingerprint": "f01627d58bb832a4c759c39f1333c228f3116dc540ffe57ff9aafb9c0b71f5029105ac33c00c242c2b8acf61d3ed1564c7d8e06a501301959669325eabdeec0a_0", "is_ignored": false, "lines": "          memcpy((void *)(param_1 + 0x2198),param_4,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_1+0x2198", "end": {"col": 43, "line": 110, "offset": 3205}, "start": {"col": 18, "line": 110, "offset": 3180}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 57, "line": 110, "offset": 3219}, "start": {"col": 53, "line": 110, "offset": 3215}}, "$SRC": {"abstract_content": "param_4", "end": {"col": 52, "line": 110, "offset": 3214}, "start": {"col": 45, "line": 110, "offset": 3207}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetPrimaryInterfaceInfo_00411b44.c", "start": {"col": 11, "line": 110, "offset": 3173}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 59, "line": 58, "offset": 1665}, "extra": {"engine_kind": "OSS", "fingerprint": "ed917b0131d2d0d8f7fd5e6e4791f09f88a56311338703f7393f01ab666a274e18470aa80c954811fb33510dcfbacc9c0e3b32bdab436ef56d33f73a09f876e9_0", "is_ignored": false, "lines": "    mDNS_snprintf((int)param_2 + 0x14b6,0x20,\"%s\",param_5);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 18, "line": 58, "offset": 1624}, "start": {"col": 5, "line": 58, "offset": 1611}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetSecretForDomain_00419c04.c", "start": {"col": 5, "line": 58, "offset": 1611}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 74, "offset": 2340}, "extra": {"engine_kind": "OSS", "fingerprint": "5b967288393ad03c609af866176659032858ac06530895e6963b2a5ee7def1fcb9248024f522384965dc3fd1980da50f3cf4e0087f393d7fc94437339654b20b_0", "is_ignored": false, "lines": "          memcpy(param_2 + 0x469,zerov6Addr,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 17, "line": 74, "offset": 2307}, "start": {"col": 11, "line": 74, "offset": 2301}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetSecretForDomain_00419c04.c", "start": {"col": 11, "line": 74, "offset": 2301}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 74, "offset": 2340}, "extra": {"engine_kind": "OSS", "fingerprint": "37bab508c79122c74224346e9df7836b6f500be4a8ef7db90fda64216eb70317b6483cdfc307f53909317a905c64d9b1b132975304898e3dcd55443e5d525dd7_0", "is_ignored": false, "lines": "          memcpy(param_2 + 0x469,zerov6Addr,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_2+0x469", "end": {"col": 33, "line": 74, "offset": 2323}, "start": {"col": 18, "line": 74, "offset": 2308}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 49, "line": 74, "offset": 2339}, "start": {"col": 45, "line": 74, "offset": 2335}}, "$SRC": {"abstract_content": "zerov6Addr", "end": {"col": 44, "line": 74, "offset": 2334}, "start": {"col": 34, "line": 74, "offset": 2324}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_SetSecretForDomain_00419c04.c", "start": {"col": 11, "line": 74, "offset": 2301}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 54, "offset": 1753}, "extra": {"engine_kind": "OSS", "fingerprint": "66057c26a2a4ff55a45a27d89c7440194e925f267854767dca05689082501c9118f1eae6c98842f504aec38b21c608ece2f3dc6e3ec34dea4fbb2968e9bcd5f8_0", "is_ignored": false, "lines": "    cVar1 = *(char *)(param_2 + 0xd);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0xd", "end": {"col": 36, "line": 54, "offset": 1753}, "start": {"col": 33, "line": 54, "offset": 1750}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 10, "line": 54, "offset": 1727}, "start": {"col": 5, "line": 54, "offset": 1722}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartNATOperation_internal_0040b6b4.c", "start": {"col": 5, "line": 54, "offset": 1722}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 43, "line": 256, "offset": 9852}, "extra": {"engine_kind": "OSS", "fingerprint": "7ba495e087c93a684daf5ae7cfe0345e0965314b070a950c71a66dfc0560c27997699116ad28ce7075b05f871e5f6f730626d3312b67dac44ce63e62d47048d7_0", "is_ignored": false, "lines": "      memcpy(param_2 + 0x3d,zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 256, "offset": 9822}, "start": {"col": 7, "line": 256, "offset": 9816}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartQuery_internal_004329b8.c", "start": {"col": 7, "line": 256, "offset": 9816}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 43, "line": 256, "offset": 9852}, "extra": {"engine_kind": "OSS", "fingerprint": "2154b662499592e069ef58bcccb78912a6081eb18575abea3d3c0e2a7bd61225f3f8774e493f230936f5fff2fa4fc3ef21e28b98987140021b14b0de15480115_0", "is_ignored": false, "lines": "      memcpy(param_2 + 0x3d,zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_2+0x3d", "end": {"col": 28, "line": 256, "offset": 9837}, "start": {"col": 14, "line": 256, "offset": 9823}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 42, "line": 256, "offset": 9851}, "start": {"col": 38, "line": 256, "offset": 9847}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 37, "line": 256, "offset": 9846}, "start": {"col": 29, "line": 256, "offset": 9838}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartQuery_internal_004329b8.c", "start": {"col": 7, "line": 256, "offset": 9816}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 13, "offset": 425}, "extra": {"engine_kind": "OSS", "fingerprint": "4cfee2e3e8e923c7b8c19be03134de3a58139fb25c181269e845d3d4346a92e87562609bc030540d683e7c9b5cad179784e6150359dddd8432378b5a6da5fd22_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 13, "offset": 384}, "start": {"col": 3, "line": 13, "offset": 378}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 13, "offset": 378}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 13, "offset": 425}, "extra": {"engine_kind": "OSS", "fingerprint": "87aea9e10e24faa75da719964e54bdb63c810265f97ec3f34fefafd9093671affe638cffc025025f365bb75891c0be46189685e839a0d1d13d469800ed25c6cb_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x13c),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x13c", "end": {"col": 34, "line": 13, "offset": 409}, "start": {"col": 10, "line": 13, "offset": 385}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 13, "offset": 424}, "start": {"col": 45, "line": 13, "offset": 420}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 13, "offset": 419}, "start": {"col": 36, "line": 13, "offset": 411}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 13, "offset": 378}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 46, "offset": 1719}, "extra": {"engine_kind": "OSS", "fingerprint": "4cfee2e3e8e923c7b8c19be03134de3a58139fb25c181269e845d3d4346a92e87562609bc030540d683e7c9b5cad179784e6150359dddd8432378b5a6da5fd22_1", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x3cc),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 46, "offset": 1678}, "start": {"col": 3, "line": 46, "offset": 1672}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 46, "offset": 1672}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 46, "offset": 1719}, "extra": {"engine_kind": "OSS", "fingerprint": "3665733de38beef6e3141241e0f3dbedcc4734fbe8e89b10a4bc0d1479f019801c8d5566f48b3dd2e949bd91549e73aed62c375f327c559f30c9545efff9cd0d_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x3cc),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x3cc", "end": {"col": 34, "line": 46, "offset": 1703}, "start": {"col": 10, "line": 46, "offset": 1679}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 46, "offset": 1718}, "start": {"col": 45, "line": 46, "offset": 1714}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 46, "offset": 1713}, "start": {"col": 36, "line": 46, "offset": 1705}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 46, "offset": 1672}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 79, "offset": 3023}, "extra": {"engine_kind": "OSS", "fingerprint": "4cfee2e3e8e923c7b8c19be03134de3a58139fb25c181269e845d3d4346a92e87562609bc030540d683e7c9b5cad179784e6150359dddd8432378b5a6da5fd22_2", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x65c),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 79, "offset": 2982}, "start": {"col": 3, "line": 79, "offset": 2976}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 79, "offset": 2976}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 79, "offset": 3023}, "extra": {"engine_kind": "OSS", "fingerprint": "61298581811ea473d2f963fc1d9ccf88157215a45f82b009f4e098abc3af69e03ddb8a765dae3c9c3663096c6a0d8c56abb2ec29124083371f62cf59fb9c2d26_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x65c),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x65c", "end": {"col": 34, "line": 79, "offset": 3007}, "start": {"col": 10, "line": 79, "offset": 2983}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 79, "offset": 3022}, "start": {"col": 45, "line": 79, "offset": 3018}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 79, "offset": 3017}, "start": {"col": 36, "line": 79, "offset": 3009}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 79, "offset": 2976}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 106, "offset": 4147}, "extra": {"engine_kind": "OSS", "fingerprint": "4cfee2e3e8e923c7b8c19be03134de3a58139fb25c181269e845d3d4346a92e87562609bc030540d683e7c9b5cad179784e6150359dddd8432378b5a6da5fd22_3", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x8ec),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 106, "offset": 4106}, "start": {"col": 3, "line": 106, "offset": 4100}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 106, "offset": 4100}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 106, "offset": 4147}, "extra": {"engine_kind": "OSS", "fingerprint": "b57877f53301251287e8e58560ce0662cc276db9896fe716bcfe1cddc347aa484dfd937f3152c04239b347b761c9ed04ad381b1b5ed83cc47b40d9c572d94947_0", "is_ignored": false, "lines": "  memcpy((void *)(param_2 + 0x8ec),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0x8ec", "end": {"col": 34, "line": 106, "offset": 4131}, "start": {"col": 10, "line": 106, "offset": 4107}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 106, "offset": 4146}, "start": {"col": 45, "line": 106, "offset": 4142}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 44, "line": 106, "offset": 4141}, "start": {"col": 36, "line": 106, "offset": 4133}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 106, "offset": 4100}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 55, "line": 136, "offset": 5365}, "extra": {"engine_kind": "OSS", "fingerprint": "4cfee2e3e8e923c7b8c19be03134de3a58139fb25c181269e845d3d4346a92e87562609bc030540d683e7c9b5cad179784e6150359dddd8432378b5a6da5fd22_4", "is_ignored": false, "lines": "  memcpy((void *)((int)param_3 + 0x104),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 9, "line": 136, "offset": 5319}, "start": {"col": 3, "line": 136, "offset": 5313}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 136, "offset": 5313}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 55, "line": 136, "offset": 5365}, "extra": {"engine_kind": "OSS", "fingerprint": "7f58e26a540eec9b54778cb1574cd18b71950de301e40ad7d15609475efb3841a0b5e216c7782c357f8bded58791eda1a278a88b7c695741cb541c972a0a7f52_0", "is_ignored": false, "lines": "  memcpy((void *)((int)param_3 + 0x104),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*(int param_3+0x104", "end": {"col": 39, "line": 136, "offset": 5349}, "start": {"col": 10, "line": 136, "offset": 5320}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 54, "line": 136, "offset": 5364}, "start": {"col": 50, "line": 136, "offset": 5360}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 49, "line": 136, "offset": 5359}, "start": {"col": 41, "line": 136, "offset": 5351}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StartResolveService_00433b68.c", "start": {"col": 3, "line": 136, "offset": 5313}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 36, "line": 52, "offset": 1501}, "extra": {"engine_kind": "OSS", "fingerprint": "6c76d5f99529d3a1c18ddbd5913609aa16177eae22473024b80f6a30f151dad03f89199a3107900cd1cbe5354925490212c44afbe3b6807c581d9c0a28b58ec9_0", "is_ignored": false, "lines": "    cVar1 = *(char *)(param_2 + 0xd);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0xd", "end": {"col": 36, "line": 52, "offset": 1501}, "start": {"col": 33, "line": 52, "offset": 1498}}, "$NARROW": {"abstract_content": "cVar1", "end": {"col": 10, "line": 52, "offset": 1475}, "start": {"col": 5, "line": 52, "offset": 1470}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StopNATOperation_internal_0040f8e0.c", "start": {"col": 5, "line": 52, "offset": 1470}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 46, "line": 56, "offset": 1695}, "extra": {"engine_kind": "OSS", "fingerprint": "dc241a9b45acff6e25e231f251f8969ea3ca1b702fcffdf9a3af626b06b7d47fdc45f485135df0ad93b3e931dfccd4448a9f29fd10bfaa20538c2d10e4a62c1f_0", "is_ignored": false, "lines": "        sVar2 = *(short *)((int)puVar7 + 0x36);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar7", "end": {"col": 39, "line": 56, "offset": 1688}, "start": {"col": 28, "line": 56, "offset": 1677}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 14, "line": 56, "offset": 1663}, "start": {"col": 9, "line": 56, "offset": 1658}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StopNATOperation_internal_0040f8e0.c", "start": {"col": 9, "line": 56, "offset": 1658}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 47, "line": 64, "offset": 1989}, "extra": {"engine_kind": "OSS", "fingerprint": "2753006d0f0252fcc0076f65f13704032c0ecda84dec3d355e806fd42c9bb2f697bf51fb5178ace66d4029d51cecade93ea0bfe24ea3117a1dd07c1197b3175d_0", "is_ignored": false, "lines": "        sVar2 = *(short *)((int)param_2 + 0x36);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int param_2", "end": {"col": 40, "line": 64, "offset": 1982}, "start": {"col": 28, "line": 64, "offset": 1970}}, "$NARROW": {"abstract_content": "sVar2", "end": {"col": 14, "line": 64, "offset": 1956}, "start": {"col": 9, "line": 64, "offset": 1951}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StopNATOperation_internal_0040f8e0.c", "start": {"col": 9, "line": 64, "offset": 1951}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 49, "offset": 1670}, "extra": {"engine_kind": "OSS", "fingerprint": "6c00cfb2be83b1028d536a4083225a5860a96b64a40978f1b42f0cadc7c19410e3b02c881901a612a616b1700e3320743bcb3eaf7d11e68eac7c9e9dcd39c088_0", "is_ignored": false, "lines": "        memcpy(puVar7 + 0x3d,param_2 + 0x3d,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 15, "line": 49, "offset": 1635}, "start": {"col": 9, "line": 49, "offset": 1629}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StopQuery_internal_0042b718.c", "start": {"col": 9, "line": 49, "offset": 1629}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 49, "offset": 1670}, "extra": {"engine_kind": "OSS", "fingerprint": "5ee8648ab6ff51b93669f0d8d22f1f43941937f42c3b617169cb7a064da5642e564bdc0f03fac1ad0de3a4b82d5ac9e38d04a55daa2f45222d6b2c016aaeff45_0", "is_ignored": false, "lines": "        memcpy(puVar7 + 0x3d,param_2 + 0x3d,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar7+0x3d", "end": {"col": 29, "line": 49, "offset": 1649}, "start": {"col": 16, "line": 49, "offset": 1636}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 49, "line": 49, "offset": 1669}, "start": {"col": 45, "line": 49, "offset": 1665}}, "$SRC": {"abstract_content": "param_2+0x3d", "end": {"col": 44, "line": 49, "offset": 1664}, "start": {"col": 30, "line": 49, "offset": 1650}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_StopQuery_internal_0042b718.c", "start": {"col": 9, "line": 49, "offset": 1629}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 19, "line": 5, "offset": 47}, "extra": {"engine_kind": "OSS", "fingerprint": "2b251f277a65065650443f1d66cb3b9ee6093120adecbc1a798c04a1d829202dd5f21837988bf15f176c6291e0b0c71ba4bdd185cba96d7012b7fd6fd855eb73_0", "is_ignored": false, "lines": "  mDNS_vsnprintf();", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_vsnprintf", "end": {"col": 17, "line": 5, "offset": 45}, "start": {"col": 3, "line": 5, "offset": 31}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_snprintf_0041bb78.c", "start": {"col": 3, "line": 5, "offset": 31}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-pointer-subtraction", "end": {"col": 71, "line": 274, "offset": 10271}, "extra": {"engine_kind": "OSS", "fingerprint": "0ca7e02240ac6588aab1e61ced27c0950643bcdea8641b4078414b4ed82ed9b8f7902a0de0370c2fcd727936b5c59f71fa0c5fb4d8ec58fccbebcda90626c29c_0", "is_ignored": false, "lines": "                                  6 < (uint)((int)piVar4 - (int)piVar6))) ||", "message": "The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/469", "https://github.com/struct/mms"]}, "metavars": {"$PTR1": {"abstract_content": "piVar4", "end": {"col": 57, "line": 274, "offset": 10257}, "start": {"col": 51, "line": 274, "offset": 10251}}, "$PTR2": {"abstract_content": "piVar6", "end": {"col": 71, "line": 274, "offset": 10271}, "start": {"col": 65, "line": 274, "offset": 10265}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 46, "line": 274, "offset": 10246}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 76, "line": 314, "offset": 12012}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_0", "is_ignored": false, "lines": "                  piVar4 = (int *)mDNS_snprintf(&local_164,300,\"%02X:%02X:%02X:%02X:%02X:%02X\",\n                                                *(byte *)piVar6,*(byte *)((int)piVar6 + 1),\n                                                *(byte *)((int)piVar6 + 2),\n                                                *(byte *)((int)piVar6 + 3),*(byte *)(piVar6 + 1),\n                                                *(byte *)((int)piVar6 + 5));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 48, "line": 310, "offset": 11622}, "start": {"col": 35, "line": 310, "offset": 11609}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 35, "line": 310, "offset": 11609}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 78, "line": 330, "offset": 13272}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_1", "is_ignored": false, "lines": "                  piVar4 = (int *)mDNS_snprintf(&local_164,300,\n                                                \"%02X%02X:%02X%02X:%02X%02X:%02X%02X:%02X%02X:%02X%02X:%02X%02X:%02X%02X\"\n                                                ,*(byte *)piVar6,*(byte *)((int)piVar6 + 1),\n                                                *(byte *)((int)piVar6 + 2),\n                                                *(byte *)((int)piVar6 + 3),*(byte *)(piVar6 + 1),\n                                                *(byte *)((int)piVar6 + 5),\n                                                *(byte *)((int)piVar6 + 6),\n                                                *(byte *)((int)piVar6 + 7),*(byte *)(piVar6 + 2),\n                                                *(byte *)((int)piVar6 + 9),\n                                                *(byte *)((int)piVar6 + 10),\n                                                *(byte *)((int)piVar6 + 0xb),*(byte *)(piVar6 + 3),\n                                                *(byte *)((int)piVar6 + 0xd),\n                                                *(byte *)((int)piVar6 + 0xe),\n                                                *(byte *)((int)piVar6 + 0xf));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 48, "line": 317, "offset": 12130}, "start": {"col": 35, "line": 317, "offset": 12117}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 35, "line": 317, "offset": 12117}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 76, "line": 336, "offset": 13663}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_2", "is_ignored": false, "lines": "                  piVar4 = (int *)mDNS_snprintf(&local_164,300,\"%d.%d.%d.%d\",*(byte *)piVar6,\n                                                *(byte *)((int)piVar6 + 1),\n                                                *(byte *)((int)piVar6 + 2),\n                                                *(byte *)((int)piVar6 + 3));", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 48, "line": 333, "offset": 13389}, "start": {"col": 35, "line": 333, "offset": 13376}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 35, "line": 333, "offset": 13376}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 49, "line": 341, "offset": 13956}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_3", "is_ignored": false, "lines": "                  piVar4 = (int *)mDNS_snprintf(&local_164,300,\"%s\",\n                                                \"<< ERROR: Must specify address size (i.e. %.4a=IPv4, %.6a=Ethernet, %.16a=IPv6) >>\"\n                                               );", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 48, "line": 339, "offset": 13753}, "start": {"col": 35, "line": 339, "offset": 13740}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 35, "line": 339, "offset": 13740}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 76, "line": 355, "offset": 14404}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_4", "is_ignored": false, "lines": "                piVar4 = (int *)mDNS_snprintf(&local_164,300,&DAT_00452658);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 46, "line": 355, "offset": 14374}, "start": {"col": 33, "line": 355, "offset": 14361}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 33, "line": 355, "offset": 14361}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 96, "line": 390, "offset": 15781}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_5", "is_ignored": false, "lines": "                piVar4 = (int *)mDNS_snprintf(pppiVar12,300,\n                                              \"<<UNKNOWN FORMAT CONVERSION CODE %%%c>>\",iVar13);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 46, "line": 389, "offset": 15670}, "start": {"col": 33, "line": 389, "offset": 15657}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 33, "line": 389, "offset": 15657}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 95, "line": 478, "offset": 18647}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_6", "is_ignored": false, "lines": "    iVar5 = mDNS_snprintf(puVar14,(int)pppiVar12 - (int)puVar14,\"<<INVALID LABEL LENGTH %u>>\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 478, "offset": 18578}, "start": {"col": 13, "line": 478, "offset": 18565}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 13, "line": 478, "offset": 18565}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 85, "line": 484, "offset": 18846}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_7", "is_ignored": false, "lines": "    iVar5 = mDNS_snprintf(puVar14,(int)pppiVar12 - (int)puVar14,\"<<NAME TOO LONG>>\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 26, "line": 484, "offset": 18787}, "start": {"col": 13, "line": 484, "offset": 18774}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 13, "line": 484, "offset": 18774}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 68, "line": 489, "offset": 19053}, "extra": {"engine_kind": "OSS", "fingerprint": "40354003b4ef27c1d3f270d43fe6eb4de7df0ae66a24d779c3397a670d5840bfbb7adbbacedd7970749a702cc09a2816ae8575b5e39264281c535a0fc2f57783_8", "is_ignored": false, "lines": "  iVar5 = mDNS_snprintf(puVar14,local_2c,&DAT_00452764,local_38[0]);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "mDNS_snprintf", "end": {"col": 24, "line": 489, "offset": 19009}, "start": {"col": 11, "line": 489, "offset": 18996}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/mDNS_vsnprintf_0041bba0.c", "start": {"col": 11, "line": 489, "offset": 18996}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 23, "offset": 473}, "extra": {"engine_kind": "OSS", "fingerprint": "8d304b3352d06f4016a17d66409e28cd72a211370b0df794a67893357844e6c01fbec8a7a2012202978a8c34e30f49e4ca6db18d1cb3d01060846b430dc9ab18_0", "is_ignored": false, "lines": "    iVar2 = getopt(param_1,param_2,\"v:t:d:s:f:p:\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$1": {"abstract_content": "opt", "end": {"col": 6, "line": 2, "offset": 6}, "start": {"col": 3, "line": 2, "offset": 3}}, "$FUN": {"abstract_content": "getopt", "end": {"col": 19, "line": 23, "offset": 441}, "start": {"col": 13, "line": 23, "offset": 435}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/main_0044b7d0.c", "start": {"col": 13, "line": 23, "offset": 435}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 51, "line": 29, "offset": 730}, "extra": {"engine_kind": "OSS", "fingerprint": "2297e8d70e4167538bcad55f344d60ff5bd77ae0d44aed489dd1606e4d4cce4fe37fe61af061cccd6b08cd5463e653c8e7660464318161a83433a207f1e9803f_0", "is_ignored": false, "lines": "            DAT_0046e830 = fopen(DAT_0046e834,\"w\");", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "fopen", "end": {"col": 33, "line": 29, "offset": 712}, "start": {"col": 28, "line": 29, "offset": 707}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/main_0044b7d0.c", "start": {"col": 28, "line": 29, "offset": 707}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-format-string-bugs", "end": {"col": 54, "line": 117, "offset": 4309}, "extra": {"engine_kind": "OSS", "fingerprint": "1d057f987fe9709f1cf0820c15fc168ce988f0cf662eba8191a2d72ae0b197da4d49a47bbefac8b2134efec3cca7eac5dfdefdeb25e80de74969458a9f3ebe06_0", "is_ignored": false, "lines": "      fprintf(stderr,pcVar1,PTR_ProgramName_0046e0d8);", "message": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/134", "https://julianor.tripod.com/bc/formatstring-1.2.pdf", "http://phrack.org/issues/70/13.html#article", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/main_0044b7d0.c", "start": {"col": 7, "line": 117, "offset": 4262}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-format-string-bugs", "end": {"col": 38, "line": 125, "offset": 4611}, "extra": {"engine_kind": "OSS", "fingerprint": "1d057f987fe9709f1cf0820c15fc168ce988f0cf662eba8191a2d72ae0b197da4d49a47bbefac8b2134efec3cca7eac5dfdefdeb25e80de74969458a9f3ebe06_1", "is_ignored": false, "lines": "        fprintf(stderr,pcVar1,puVar4);", "message": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/134", "https://julianor.tripod.com/bc/formatstring-1.2.pdf", "http://phrack.org/issues/70/13.html#article", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/main_0044b7d0.c", "start": {"col": 9, "line": 125, "offset": 4582}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 94, "line": 14, "offset": 430}, "extra": {"engine_kind": "OSS", "fingerprint": "80ce013eaf98cbdde1c9f0b1beba7eb1e84049a7998b52ef52dd29671c4e18afd060a713128b0ff6cb83d0b25b9ab04fc2304c7945a1af4b0b87b6c4fc6f0214_0", "is_ignored": false, "lines": "    local_398 = (ushort)*(byte *)(param_1 + 0x1cd9) + (ushort)*(byte *)(param_1 + 0x1bd9) + 2;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_1", "end": {"col": 42, "line": 14, "offset": 378}, "start": {"col": 35, "line": 14, "offset": 371}}, "$NARROW": {"abstract_content": "local_398", "end": {"col": 14, "line": 14, "offset": 350}, "start": {"col": 5, "line": 14, "offset": 341}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/putHINFO_004211c0.c", "start": {"col": 5, "line": 14, "offset": 341}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 29, "line": 29, "offset": 826}, "extra": {"engine_kind": "OSS", "fingerprint": "7b50c1a21d7409d0cb2bace4aedee1cc54f965af5ab9772216036aed24d984ed504f801f8cb3178853a67d5e60bb17227e3b5578600390a252d91b6313f9b0c6_0", "is_ignored": false, "lines": "      memset(param_7,0,0x30);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$CHAR": {"abstract_content": "0", "end": {"col": 23, "line": 29, "offset": 820}, "start": {"col": 22, "line": 29, "offset": 819}}, "$DST": {"abstract_content": "param_7", "end": {"col": 21, "line": 29, "offset": 818}, "start": {"col": 14, "line": 29, "offset": 811}}, "$LEN": {"abstract_content": "0x30", "end": {"col": 28, "line": 29, "offset": 825}, "start": {"col": 24, "line": 29, "offset": 821}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "start": {"col": 7, "line": 29, "offset": 804}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 50, "line": 60, "offset": 1986}, "extra": {"engine_kind": "OSS", "fingerprint": "d66d69c16b2598f298e3997a0c0a492a9122b4761dfbdc1d7a790ec7c6c2b16ab4587a605b1fd4f7eb651fa35f49064aab6a9c85b29f076f965948e6d4ee9001_0", "is_ignored": false, "lines": "              memcpy(param_7 + 4,__cmsg + 1,0x10);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 21, "line": 60, "offset": 1957}, "start": {"col": 15, "line": 60, "offset": 1951}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "start": {"col": 15, "line": 60, "offset": 1951}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 50, "line": 60, "offset": 1986}, "extra": {"engine_kind": "OSS", "fingerprint": "15582d8615bf15d611636089ad094fa047dc1a9a6595ead991bba41d661deb15762a3a3b3082a430ccb23650982bcc7c8bd309ffdbc4f19e063b12db5d50014a_0", "is_ignored": false, "lines": "              memcpy(param_7 + 4,__cmsg + 1,0x10);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "param_7+4", "end": {"col": 33, "line": 60, "offset": 1969}, "start": {"col": 22, "line": 60, "offset": 1958}}, "$LEN": {"abstract_content": "0x10", "end": {"col": 49, "line": 60, "offset": 1985}, "start": {"col": 45, "line": 60, "offset": 1981}}, "$SRC": {"abstract_content": "__cmsg+1", "end": {"col": 44, "line": 60, "offset": 1980}, "start": {"col": 34, "line": 60, "offset": 1970}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/recvfrom_flags_00406df0.c", "start": {"col": 15, "line": 60, "offset": 1951}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 53, "line": 51, "offset": 1780}, "extra": {"engine_kind": "OSS", "fingerprint": "9dbc32e90ef65c92028c56f428f04c85b908118660e1a5ef633b7056399fca93254eb81fe9be3c01e96392e3fc1357d3217af6d36de7d680034c413c6c33b003_0", "is_ignored": false, "lines": "      memcpy((void *)(param_2 + 0xf4),zeroAddr,0x14);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 13, "line": 51, "offset": 1740}, "start": {"col": 7, "line": 51, "offset": 1734}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/startLLQHandshake_004171ac.c", "start": {"col": 7, "line": 51, "offset": 1734}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 53, "line": 51, "offset": 1780}, "extra": {"engine_kind": "OSS", "fingerprint": "7ceb26bfa77e9d21017afa4c106bef3a19077899cb434bc4ea6d86022cdb137cf6dddddbb2568af7794d81a2c706f08c3d0020583c89a626ed2ea9463ee4b716_0", "is_ignored": false, "lines": "      memcpy((void *)(param_2 + 0xf4),zeroAddr,0x14);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "(void*param_2+0xf4", "end": {"col": 37, "line": 51, "offset": 1764}, "start": {"col": 14, "line": 51, "offset": 1741}}, "$LEN": {"abstract_content": "0x14", "end": {"col": 52, "line": 51, "offset": 1779}, "start": {"col": 48, "line": 51, "offset": 1775}}, "$SRC": {"abstract_content": "zeroAddr", "end": {"col": 47, "line": 51, "offset": 1774}, "start": {"col": 39, "line": 51, "offset": 1766}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/startLLQHandshake_004171ac.c", "start": {"col": 7, "line": 51, "offset": 1734}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 43, "line": 58, "offset": 2026}, "extra": {"engine_kind": "OSS", "fingerprint": "4c2902ac55642cdabf2764f91a94e5ece2f8b9e460402532f320fb9fe00d84fb03b8f49ff74ede9447977aa9f0a92a83fb213dd57d54c59019021171ef78546d_0", "is_ignored": false, "lines": "        sVar1 = *(short *)(param_2 + 0x120);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "param_2", "end": {"col": 35, "line": 58, "offset": 2018}, "start": {"col": 28, "line": 58, "offset": 2011}}, "$NARROW": {"abstract_content": "sVar1", "end": {"col": 14, "line": 58, "offset": 1997}, "start": {"col": 9, "line": 58, "offset": 1992}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/startLLQHandshake_004171ac.c", "start": {"col": 9, "line": 58, "offset": 1992}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 21, "line": 111, "offset": 3783}, "extra": {"engine_kind": "OSS", "fingerprint": "05db944c72bc2136d81ca18e79c126ad16534951e4fed74cda76e89b750c8980144b8f865e41503ccf5d8414d18ad1d51f6e3bac9f646c0f67169650a695d24f_0", "is_ignored": false, "lines": "        local_38 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 21, "line": 111, "offset": 3783}, "start": {"col": 20, "line": 111, "offset": 3782}}, "$NARROW": {"abstract_content": "local_38", "end": {"col": 17, "line": 111, "offset": 3779}, "start": {"col": 9, "line": 111, "offset": 3771}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveMsg_004165bc.c", "start": {"col": 9, "line": 111, "offset": 3771}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 54, "line": 136, "offset": 5140}, "extra": {"engine_kind": "OSS", "fingerprint": "462868be0397d6b9fe9baedb6dc9f6a4f8798866b3622eb66ae2c5be06b7fe6b6b0b9fb7314fd25b2e1902492c3c08e44bf04523a85d9ea4bbe700dff1bebcec_0", "is_ignored": false, "lines": "          local_38 = *(short *)(puVar14[0x40] + 0x30a);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0x40", "end": {"col": 45, "line": 136, "offset": 5131}, "start": {"col": 41, "line": 136, "offset": 5127}}, "$NARROW": {"abstract_content": "local_38", "end": {"col": 19, "line": 136, "offset": 5105}, "start": {"col": 11, "line": 136, "offset": 5097}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveMsg_004165bc.c", "start": {"col": 11, "line": 136, "offset": 5097}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 54, "line": 173, "offset": 6870}, "extra": {"engine_kind": "OSS", "fingerprint": "ad0638b6c49f2de04749843db7a750c6de309262410842d2049c907331a0e2ffdc1e70586552db9b031532b3445f525155ebbcf36010abdf14b60083b879aa79_0", "is_ignored": false, "lines": "                  sVar3 = *(short *)((int)puVar14 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar14", "end": {"col": 50, "line": 173, "offset": 6866}, "start": {"col": 38, "line": 173, "offset": 6854}}, "$NARROW": {"abstract_content": "sVar3", "end": {"col": 24, "line": 173, "offset": 6840}, "start": {"col": 19, "line": 173, "offset": 6835}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveMsg_004165bc.c", "start": {"col": 19, "line": 173, "offset": 6835}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 52, "line": 229, "offset": 9289}, "extra": {"engine_kind": "OSS", "fingerprint": "ad0638b6c49f2de04749843db7a750c6de309262410842d2049c907331a0e2ffdc1e70586552db9b031532b3445f525155ebbcf36010abdf14b60083b879aa79_1", "is_ignored": false, "lines": "                sVar3 = *(short *)((int)puVar14 + 6);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "(int puVar14", "end": {"col": 48, "line": 229, "offset": 9285}, "start": {"col": 36, "line": 229, "offset": 9273}}, "$NARROW": {"abstract_content": "sVar3", "end": {"col": 22, "line": 229, "offset": 9259}, "start": {"col": 17, "line": 229, "offset": 9254}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveMsg_004165bc.c", "start": {"col": 17, "line": 229, "offset": 9254}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 15, "line": 169, "offset": 6118}, "extra": {"engine_kind": "OSS", "fingerprint": "5647feb33767fbc27ed5202f3bdccbd2bca33981e0da41ddff5b90167f03d72384356dc276cba015849f186eafe63ab3950977deec8241fded5087c00e6d5409_0", "is_ignored": false, "lines": "    sVar15 = 0;", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "0", "end": {"col": 15, "line": 169, "offset": 6118}, "start": {"col": 14, "line": 169, "offset": 6117}}, "$NARROW": {"abstract_content": "sVar15", "end": {"col": 11, "line": 169, "offset": 6114}, "start": {"col": 5, "line": 169, "offset": 6108}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveNATPacket_00411148.c", "start": {"col": 5, "line": 169, "offset": 6108}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-integer-truncation", "end": {"col": 34, "line": 179, "offset": 6351}, "extra": {"engine_kind": "OSS", "fingerprint": "cc45cc56e55fb6d3ff0d05f66ce94e07ab58d52516883bc830d273c278a05f3a1699d77c143bb9e6f1388c207c9eaabd3dc23424ef81f34f15a621cc1589c439_0", "is_ignored": false, "lines": "  sVar15 = *(short *)(param_3 + 2);", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://cwe.mitre.org/data/definitions/197", "https://cwe.mitre.org/data/definitions/681", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms"]}, "metavars": {"$LARGE": {"abstract_content": "2", "end": {"col": 34, "line": 179, "offset": 6351}, "start": {"col": 33, "line": 179, "offset": 6350}}, "$NARROW": {"abstract_content": "sVar15", "end": {"col": 9, "line": 179, "offset": 6326}, "start": {"col": 3, "line": 179, "offset": 6320}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_ReceiveNATPacket_00411148.c", "start": {"col": 3, "line": 179, "offset": 6320}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 64, "line": 126, "offset": 5199}, "extra": {"engine_kind": "OSS", "fingerprint": "e2d82dec2736888cb100b3d8e4b0edd2eeab824ac5ed7da199a7d6c56fee63d0b6aa4db51aae8968b3e8115720f45fb0f98937bbe4ab80eed58ced06c3b457fa_0", "is_ignored": false, "lines": "                  memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 25, "line": 126, "offset": 5160}, "start": {"col": 19, "line": 126, "offset": 5154}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 19, "line": 126, "offset": 5154}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 64, "line": 126, "offset": 5199}, "extra": {"engine_kind": "OSS", "fingerprint": "30a7326ac5cecdd4f02ea6399a6a1f37be33d7661d23efd7cd615d14bb87848a893af79a43eca2f08ffadc66c07de28cc38c3782956c643684e74d67c429dc39_0", "is_ignored": false, "lines": "                  memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar9+0x49", "end": {"col": 39, "line": 126, "offset": 5174}, "start": {"col": 26, "line": 126, "offset": 5161}}, "$LEN": {"abstract_content": "8", "end": {"col": 63, "line": 126, "offset": 5198}, "start": {"col": 62, "line": 126, "offset": 5197}}, "$SRC": {"abstract_content": "(void*iVar3+0xc", "end": {"col": 60, "line": 126, "offset": 5195}, "start": {"col": 40, "line": 126, "offset": 5175}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 19, "line": 126, "offset": 5154}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-interesting-api-calls", "end": {"col": 64, "line": 142, "offset": 5983}, "extra": {"engine_kind": "OSS", "fingerprint": "e2d82dec2736888cb100b3d8e4b0edd2eeab824ac5ed7da199a7d6c56fee63d0b6aa4db51aae8968b3e8115720f45fb0f98937bbe4ab80eed58ced06c3b457fa_1", "is_ignored": false, "lines": "                  memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "MEDIUM", "references": ["https://github.com/0xdea/ghidra-scripts/blob/main/Rhabdomancer.java", "https://github.com/x509cert/banned/blob/master/banned.h", "https://g.co/kgs/PCHQjJ", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/28719-banned-api-usage-use-updated-function-replacement"]}, "metavars": {"$FUN": {"abstract_content": "memcpy", "end": {"col": 25, "line": 142, "offset": 5944}, "start": {"col": 19, "line": 142, "offset": 5938}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 19, "line": 142, "offset": 5938}}, {"check_id": "external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion", "end": {"col": 64, "line": 142, "offset": 5983}, "extra": {"engine_kind": "OSS", "fingerprint": "30a7326ac5cecdd4f02ea6399a6a1f37be33d7661d23efd7cd615d14bb87848a893af79a43eca2f08ffadc66c07de28cc38c3782956c643684e74d67c429dc39_1", "is_ignored": false, "lines": "                  memcpy(puVar9 + 0x49,(void *)(iVar3 + 0xc),8);", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "metadata": {"author": "Marco Ivaldi <raptor@0xdeadbeef.info>", "confidence": "LOW", "references": ["https://cwe.mitre.org/data/definitions/195", "https://cwe.mitre.org/data/definitions/196", "https://cwe.mitre.org/data/definitions/194", "https://cwe.mitre.org/data/definitions/191", "https://cwe.mitre.org/data/definitions/681", "https://cwe.mitre.org/data/definitions/789", "https://g.co/kgs/PCHQjJ", "https://github.com/struct/mms", "https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf", "http://www.phrack.org/issues/60/10.html#article", "https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples"]}, "metavars": {"$DST": {"abstract_content": "puVar9+0x49", "end": {"col": 39, "line": 142, "offset": 5958}, "start": {"col": 26, "line": 142, "offset": 5945}}, "$LEN": {"abstract_content": "8", "end": {"col": 63, "line": 142, "offset": 5982}, "start": {"col": 62, "line": 142, "offset": 5981}}, "$SRC": {"abstract_content": "(void*iVar3+0xc", "end": {"col": 60, "line": 142, "offset": 5979}, "start": {"col": 40, "line": 142, "offset": 5959}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/tmp/haruspex_mDNSClientPosix/uDNS_recvLLQResponse_00419488.c", "start": {"col": 19, "line": 142, "offset": 5938}}], "skipped_rules": [], "version": "1.89.0"}
