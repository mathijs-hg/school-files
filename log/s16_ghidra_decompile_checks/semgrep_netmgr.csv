/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,28,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,55,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,59,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,75,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,86,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,87,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/APMode_00403550.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,103,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/DaulBandSiteScan_00402f90.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,8,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/DaulBandSiteScan_00402f90.c,external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion,8,The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.
/tmp/haruspex_netmgr/DaulBandSiteScan_00402f90.c,external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion,13,The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.
/tmp/haruspex_netmgr/DaulBandSiteScan_00402f90.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat,21,A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.
/tmp/haruspex_netmgr/DaulBandSiteScan_00402f90.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,21,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/FUN_004018a4_004018a4.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,12,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/FUN_00401ed0_00401ed0.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,11,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/IPReset_00401de8.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,5,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/LEDcontrol_00401e18.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-sprintf-vsprintf,7,A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.
/tmp/haruspex_netmgr/LEDcontrol_00401e18.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,7,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/LEDcontrol_00401e18.c,external.semgrep-rules-0xdea.c.raptor-command-injection,8,The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.
/tmp/haruspex_netmgr/LEDcontrol_00401e18.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,8,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/MsgManager_00401f34.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,51,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/MsgManager_00401f34.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,70,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/MsgManager_00401f34.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,95,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/MsgManager_00401f34.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,141,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/UpdateWPSStatus_00403d90.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,22,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/UpdateWPSStatus_00403d90.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,33,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/UpdateWPSStatus_00403d90.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,47,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,62,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,71,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,72,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,73,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,74,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,84,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,91,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_netmgr/main_0040195c.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,99,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/setWlanDrv_004030a4.c,external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion,48,The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.
/tmp/haruspex_netmgr/startWPS_00404070.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,7,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_netmgr/wiredOff_004029a0.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,25,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
