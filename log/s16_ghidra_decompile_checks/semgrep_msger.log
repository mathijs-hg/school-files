[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat[0m
        Issue description:
    A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.

        [0;32m87[0m - [0;33mstrcpy((char *)local_12c,*(char **)(param_2 + 0x14));[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-interesting-api-calls[0m
        Issue description:
    Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.

        [0;32m87[0m - [0;33mstrcpy((char *)local_12c,*(char **)(param_2 + 0x14));[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion[0m
        Issue description:
    The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.

        [0;32m88[0m - [0;33msVar5 = strlen(*(char **)(param_2 + 0x14));[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion[0m
        Issue description:
    The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.

        [0;32m89[0m - [0;33miVar9 = sVar5 + 1;[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-insecure-api-strcpy-stpcpy-strcat[0m
        Issue description:
    A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.

        [0;32m87[0m - [0;33mstrcpy((char *)local_12c,*(char **)(param_2 + 0x14));[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-interesting-api-calls[0m
        Issue description:
    Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.

        [0;32m87[0m - [0;33mstrcpy((char *)local_12c,*(char **)(param_2 + 0x14));[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion[0m
        Issue description:
    The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.

        [0;32m88[0m - [0;33msVar5 = strlen(*(char **)(param_2 + 0x14));[0m

-----------------------------------------------------------------

[[0;32m+[0m][0;32m Identified source function: [0;33m/logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c[0m[0m
[REF] /logs/s16_ghidra_decompile_checks/haruspex_msger/main_00401150.c
        Semgrep rule: [0;33mexternal.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion[0m
        Issue description:
    The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.

        [0;32m89[0m - [0;33miVar9 = sVar5 + 1;[0m

-----------------------------------------------------------------

