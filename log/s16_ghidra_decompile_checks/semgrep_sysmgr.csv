/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,14,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,15,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,16,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,17,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-insecure-api-signal,18,The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,19,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,28,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_sysmgr/main_00400bec.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,48,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_sysmgr/sysfun_init_00401140.c,external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion,56,The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.
/tmp/haruspex_sysmgr/sysfun_init_00401140.c,external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion,58,The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.
/tmp/haruspex_sysmgr/sysfun_init_00401140.c,external.semgrep-rules-0xdea.c.raptor-signed-unsigned-conversion,60,The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.
/tmp/haruspex_sysmgr/sysfun_init_00401140.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,67,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_sysmgr/sysfun_init_00401140.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,75,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
/tmp/haruspex_sysmgr/sysfun_init_00401140.c,external.semgrep-rules-0xdea.c.raptor-interesting-api-calls,79,Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.
