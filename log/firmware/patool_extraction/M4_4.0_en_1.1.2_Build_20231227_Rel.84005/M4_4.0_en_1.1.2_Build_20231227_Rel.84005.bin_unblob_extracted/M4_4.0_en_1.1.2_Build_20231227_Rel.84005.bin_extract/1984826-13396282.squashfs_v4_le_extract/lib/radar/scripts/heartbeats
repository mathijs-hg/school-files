#!/usr/bin/lua

local tmpv2 = require "tmpv2"
local json = require "luci.json"
local dbg = require "luci.tools.debug"
local uci  = require "luci.model.uci"
local script = require "sync-script"
local sys    = require "luci.sys"
local die = script.die
local finalize = script.finalize

local opcode = 0xc431
local deviceid = arg[1]

local function set_flag(params)
    local cmd = "touch %s " % {params}
    sys.call(cmd)
end

local function clear_flag(params)
    local cmd = "rm %s " % {params}
    sys.call(cmd)
end

local function heartbeats(tmpcli)
    tmpcli:set_timeout(3600)

    local cmd = "cat /tmp/run/heartbeats_remain"     
    while true do
        local heartbeats_remain = (sys.exec(cmd)):trim()
        --dbg("dev " .. deviceid .. " heartbeats_remain is" .. heartbeats_remain)
        if tonumber(heartbeats_remain) == 0 then
            break
        end

        local data, msg = tmpcli:request(opcode, json.encode{
                                   params = "update"})
        if not data then
            dbg("tmpcli:request is error ")
            return nil, msg
        end

        sys.call("sleep 2")
        
    end

    return true, "here"
end

local function main()
    local uci_r = uci.cursor()
    local usr = uci_r:get_profile("accountmgnt", "username")
    local pwd = uci_r:get_profile("accountmgnt", "password") 

    --dbg("##############heartbeats main ############# args is " .. json.encode(arg))
    local heartbeats_flag = "/tmp/run/heartbeats_proc_" .. deviceid
    set_flag(heartbeats_flag)
    
    local data = script.reduce_concurrent(heartbeats, usr, pwd, arg, 2, #arg)

    --dbg("data is" .. json.encode(data))
    if data.errmsg then
        dbg("Warning: collected errors:", data.errmsg)
    end
    clear_flag(heartbeats_flag)

    finalize(data)
end

script.run(main)
