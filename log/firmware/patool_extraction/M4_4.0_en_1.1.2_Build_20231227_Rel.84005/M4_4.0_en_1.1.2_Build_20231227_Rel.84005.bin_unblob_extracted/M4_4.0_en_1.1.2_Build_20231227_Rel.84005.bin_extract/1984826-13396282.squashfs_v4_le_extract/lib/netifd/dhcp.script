#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

tmpmask=
tmpnetdes=
tmpnum=
newsubnet=
is_same_net=

decimal_to_binary()
{
    num=$1
    local result=
    if [ "$num" == "0" ]; then
        result="0"
    else
        while [ $num -gt 0 ]                        
        do
            let r=num%2
            result=$r$result
            let num=num/2
        done
    fi
    tmpnum=`printf "%08d" $result`
}

get_netdes() 
{
    local ip1=$(echo $1 | awk -F "." '{print $1}')
    local ip2=$(echo $1 | awk -F "." '{print $2}')
    local ip3=$(echo $1 | awk -F "." '{print $3}')
    local ip4=$(echo $1 | awk -F "." '{print $4}')

    local mask1=$(echo $2 | awk -F "." '{print $1}')
    local mask2=$(echo $2 | awk -F "." '{print $2}')
    local mask3=$(echo $2 | awk -F "." '{print $3}')
    local mask4=$(echo $2 | awk -F "." '{print $4}')

    local gate1=$((ip1&mask1))
    local gate2=$((ip2&mask2))
    local gate3=$((ip3&mask3))
    local gate4=$((ip4&mask4))
   
    tmpnetdes="$gate1.$gate2.$gate3.$gate4"
}

num2mask ()
{
   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
   [ $1 -gt 1 ] && shift $1 || shift
   tmpmask="${1-0}.${2-0}.${3-0}.${4-0}"
}

check_subnet ()
{
    if [ ! $1 ] || [ ! $2 ] || [ ! $3 ]; then
        echo "exit"
        return
    fi 

    num2mask $2
    local mask=$tmpmask
    get_netdes $1 $mask
    local netdes1=$tmpnetdes
    get_netdes $3 $mask
    local netdes2=$tmpnetdes

    if [ "$netdes1" = "$netdes2" ]; then
		is_same_net=yes
    else
		is_same_net=no
    fi

}

set_routes() {
	local max=128
	local target=
	local oldstr=
	local newstr=
	local mask=

	while [ -n "$1" -a $max -gt 0 ]; do
		target=${1%%/*}
		mask=32
		oldstr=$target
		while [ $mask -ge 0 ]; do
			newstr=${oldstr%%.0}
			if [ "X$newstr" != "X$oldstr" ]; then
				mask=$((mask-8))
				oldstr=$newstr
			else
				break
			fi
		done
		check_subnet $ip $mask "${1##*/}" 
		if [ "$is_same_net" == "no" ];then
			route add -host "${1##*/}/32" dev br-wan
		fi
		proto_add_ipv4_route "$target" $mask "${1##*/}"
		max=$(($max-1))
		shift 1
	done
}

set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		check_subnet $ip $mask "$2" 
		if [ "$is_same_net" == "no" ];then
			route add -host "${2}/32" dev br-wan
		fi
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2"
		max=$(($max-1))
		shift 2
	done
}

setup_interface () {
	local inetproto=""
	local dslite_state="disconnect"

	proto_init_update "$IFNAME" 1
	network_echo $LOG_PRI_NOTICE "dhcp" "get ip info success."
	network_echo $LOG_PRI_DEBUG "dhcp" "now set ip info in $IFNAME."
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	# save ip to config
	echo "$ip" > /var/run/udhcpc-$IFNAME.ip

	config_load network
	config_get inetproto internet proto
	config_get v6proto internetv6 proto
	if [ "$v6proto" == "dslite" ]; then
		local connected=$(ubus call network.interface.internetv6 status | grep '\"state\": \"connected\"')
		if [ -n "$connected" ]; then
			dslite_state="connected"
		fi
	fi

	if [[ "X$inetproto" != "Xpppoe" -a "$dslite_state" != "connected" ]]; then
		for i in $router; do
			proto_add_ipv4_route 0.0.0.0 0 "$i"
		done
	fi

	if [ -n "$staticroutes" -o -n "$msstaticroutes" ];then
		# CIDR STATIC ROUTES (rfc3442)
		# echo $staticroutes > /dev/console
		[ -n "$staticroutes" ] && set_classless_routes $staticroutes
		[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes
	else
		# option 33
		# echo $routes > /dev/console
		[ -n "$routes" ] && set_routes $routes
	fi

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done
	proto_send_update "$INTERFACE"

	# TODO
	# [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
	# [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
	# [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
	# [ -n "$timezone" ] && 	change_state network "$ifc" lease_timezone "$timezone"
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
	network_echo $LOG_PRI_NOTICE "dhcp" "interface $INTERFACE down,and now delete ip info."
}

case "$1" in
	deconfig)
		deconfig_interface
		;;
	renew|bound)
		setup_interface
		;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user

exit 0
