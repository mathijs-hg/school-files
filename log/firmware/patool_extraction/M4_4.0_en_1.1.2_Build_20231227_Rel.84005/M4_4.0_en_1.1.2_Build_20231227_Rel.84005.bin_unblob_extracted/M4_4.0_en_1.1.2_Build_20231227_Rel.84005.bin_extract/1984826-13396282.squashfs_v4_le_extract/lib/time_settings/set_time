#!/usr/bin/lua

local uci   = require "luci.model.uci"
local sys   = require "luci.sys"
local fs    = require "luci.fs"
local dbg   = require "luci.tools.debug"
local uci_r = uci.cursor()

------------- begin: for glibc --------------------------------

local MON_TBL  = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",
		"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}
local DAY_TBL  = {[0]="Sun", "Mon", "Tues", "Wed", "Thur", "Fri", "Sat"}


local zoneinfoTable = {
    { 'GMT-12:00', 'Etc/GMT+12'},
    { 'GMT-11:00', 'Etc/GMT+11'},
    { 'GMT-10:00', 'US/Hawaii'},
    { 'GMT-09:00', 'US/Alaska'},
    { 'GMT-08:00', 'US/Pacific'},
    { 'GMT-07:00', 'US/Mountain'},
    { 'GMT-06:00', 'US/Central'},
    { 'GMT-05:00', 'US/Eastern'},
    { 'GMT-04:30', 'America/Caracas'},
    { 'GMT-04:00', 'Canada/Atlantic'},
    { 'GMT-03:30', 'Canada/Newfoundland'},
    { 'GMT-03:00', 'America/Buenos_Aires'},
    { 'GMT-02:00', 'Etc/GMT+2'},
    { 'GMT-01:00', 'Atlantic/Azores'},
    { 'GMT-00:00', 'Europe/Dublin'},
    { 'GMT+01:00', 'Europe/Berlin'},
    { 'GMT+02:00', 'Europe/Athens'},
    { 'GMT+03:00', 'Asia/Baghdad'},
    { 'GMT+03:30', 'Asia/Tehran'},
    { 'GMT+04:00', 'Asia/Muscat'},
    { 'GMT+04:30', 'Asia/Kabul'},
    { 'GMT+05:00', 'Asia/Karachi'},
    { 'GMT+05:30', 'Asia/Kolkata'},
    { 'GMT+05:45', 'Asia/Kathmandu'},
    { 'GMT+06:00', 'Asia/Dhaka'},
    { 'GMT+06:30', 'Asia/Rangoon'},
    { 'GMT+07:00', 'Asia/Bangkok'},
    { 'GMT+08:00', 'Asia/Shanghai'},
    { 'GMT+09:00', 'Asia/Tokyo'},
    { 'GMT+09:30', 'Australia/Darwin'},
    { 'GMT+10:00', 'Australia/Brisbane'},
    { 'GMT+11:00', 'Asia/Magadan'},
    { 'GMT+12:00', 'Pacific/Fiji'},
    { 'GMT+13:00', 'Pacific/Tongatapu'},
}

local zoneinfoTable_New = {
	{ "0",    '0',   'Etc/GMT+12' },
	{ "60",   '1',   'Etc/GMT+11' },
	{ "120",  '2',   'Etc/GMT+10' },
	{ "120",  '3',   'US/Aleutian' },
	{ "120",  '4',   'US/Hawaii' },
	{ "150",  '5',   'Pacific/Marquesas' },
	{ "180",  '6',   'Etc/GMT+9' },
	{ "180",  '7',   'US/Alaska' },
	{ "240",  '8',   'Etc/GMT+8' },
	{ "240",  '9',   'US/Pacific', 'Canada/Pacific' },
	{ "300",  '10',  'Etc/GMT+7' },
	{ "300",  '11',  'US/Arizona' },
	{ "300",  '12',  'America/Chihuahua', 'America/La_Paz', 'America/Mazatlan' },
	{ "300",  '13',  'US/Mountain', 'Canada/Mountain' },
	{ "360",  '14',  'Etc/GMT+6' },
	{ "360",  '15',  'US/Central', 'Canada/Central' },
	{ "360",  '16',  'Pacific/Easter' },
	{ "360",  '17',  'America/Mexico_City', 'America/Monterrey' },
	{ "360",  '18',  'Canada/Saskatchewan' },
	{ "420",  '19',  'Etc/GMT+5' },
	{ "420",  '20',  'America/Bogota', 'America/Lima', 'America/Rio_Branco' },
	{ "420",  '21',  'US/Eastern', 'Canada/Eastern' },
	{ "420",  '22',  'America/Port-au-Prince' },		-- Haiti: ios return America/Port-au-Prince
	{ "420",  '23',  'America/Havana' },
	{ "420",  '24',  'US/East-Indiana' },
	{ "480",  '25',  'Etc/GMT+4' },
	{ "450",  '26',  'America/Caracas' },
	{ "480",  '27',  'America/Asuncion' },
	{ "480",  '28',  'Canada/Atlantic' },
	{ "480",  '29',  'America/Cuiaba' },
	{ "480",  '30',  'America/La_Paz', 'America/Manaus', 'America/Argentina/San_Juan' },
	{ "480",  '31',  'America/Santiago' },
	{ "480",  '32',  'America/Grand_Turk' },		-- Turks and Caicos: ios return America/Grand_Turk
	{ "510",  '33',  'Canada/Newfoundland' },
	{ "540",  '34',  'Etc/GMT+3' },
	{ "540",  '35',  'America/Araguaina' },
	{ "540",  '36',  'America/Sao_Paulo' },		-- Brasilia: ios return America/Sao_Paulo
	{ "540",  '37',  'America/Cayenne', 'America/Fortaleza' },
	{ "540",  '38',  'America/Buenos_Aires' },
	{ "540",  '39',  'America/Godthab' },
	{ "540",  '40',  'America/Montevideo' },
	--    { "540",  '38',  'America/Punta_Arenas' },		-- Punta Arenas: ios return America/Punta_Arenas but not in zone tbl
	{ "540",  '41',  'America/Miquelon' },
	{ "540",  '42',  'America/El_Salvador' },
	{ "600",  '43',  'Etc/GMT+2' },
	{ "660",  '44',  'Etc/GMT+1' },
	{ "660",  '45',  'Atlantic/Azores' },
	{ "660",  '46',  'Atlantic/Cape_Verde' },
	{ "720",  '47',  'Etc/GMT+0' },
	{ "720",  '48',  'Africa/Casablanca' },
	{ "720",  '49',  'Europe/Dublin', 'Europe/Lisbon', 'Europe/London' },
	{ "720",  '50',  'Africa/Monrovia', 'Atlantic/Reykjavik' },
	{ "780",  '51',  'Etc/GMT-1' },
	{ "780",  '52',  'Europe/Amsterdam', 'Europe/Berlin', 'Europe/Rome', 'Europe/Stockholm', 'Europe/Vienna' },
	{ "780",  '53',  'Europe/Belgrade', 'Europe/Bratislava', 'Europe/Budapest', 'Europe/Ljubljana', 'Europe/Prague' },
	{ "780",  '54',  'Europe/Brussels', 'Europe/Copenhagen', 'Europe/Madrid', 'Europe/Paris' },
	{ "780",  '55',  'Europe/Sarajevo', 'Europe/Skopje', 'Europe/Warsaw', 'Europe/Zagreb' },
	{ "780",  '56',  'Africa/Windhoek' },
	{ "840",  '57',  'Etc/GMT-2' },
	{ "840",  '58',  'Asia/Amman' },
	{ "840",  '59',  'Europe/Athens', 'Europe/Bucharest' },
	{ "840",  '60',  'Asia/Beirut' },
	{ "840",  '61',  'Africa/Cairo' },
	{ "840",  '62',  'Europe/Chisinau' },
	{ "840",  '63',  'Asia/Damascus' },
	{ "840",  '64',  'Asia/Gaza', 'Asia/Hebron' },
	{ "840",  '65',  'Africa/Harare' },
	{ "840",  '66',  'Europe/Helsinki', 'Europe/Riga', 'Europe/Sofia', 'Europe/Tallinn', 'Europe/Vilnius' },
	{ "840",  '67',  'Asia/Jerusalem' },
	{ "840",  '68',  'Europe/Kaliningrad' },
	{ "840",  '69',  'Africa/Tripoli' },
	{ "900",  '70',  'Etc/GMT-3' },
	{ "900",  '71',  'Asia/Baghdad' },
	{ "900",  '72',  'Europe/Istanbul' },
	{ "900",  '73',  'Asia/Kuwait', 'Asia/Riyadh' },
	{ "900",  '74',  'Europe/Minsk' },
	{ "900",  '75',  'Europe/Moscow', 'Europe/Volgograd' },
	{ "900",  '76',  'Africa/Nairobi' },
	{ "930",  '77',  'Asia/Tehran' },
	{ "960",  '78',  'Etc/GMT-4' },
	{ "960",  '79',  'Asia/Muscat' },
	{ "960",  '80',  'Europe/Astrakhan', 'Europe/Ulyanovsk' },
	{ "960",  '81',  'Asia/Baku' },
	{ "960",  '82',  'Europe/Samara' },
	{ "960",  '83',  'Indian/Mauritius' },
	--    { "960",  '79', '(UTC+04:00) Saratov' },		-- Saratov: ios return Europe/Saratov but not in zone tbl
	{ "960",  '84',  'Asia/Tbilisi' },
	{ "960",  '85',  'Asia/Yerevan' },
	{ "990",  '86',  'Asia/Kabul' },
	{ "1020", '87',  'Etc/GMT-5' },
	{ "1020", '88',  'Asia/Ashgabat', 'Asia/Tashkent' },
	{ "1020", '89',  'Asia/Yekaterinburg' },
	{ "1020", '90',  'Asia/Karachi' },		-- Islamabad: ios return Asia/Karachi
	{ "1050", '91',  'Asia/Kolkata' },		-- Chennai/Mumbai/New Delhi: ios return kolkata
	{ "1050", '92',  'Asia/Colombo' },		--NOT FOUND ZONE
	{ "1065", '93',  'Asia/Kathmandu' },
	{ "1080", '94',  'Etc/GMT-6'},
	{ "1080", '95',  'Asia/Almaty' },		-- Astana: ios return Asia/Almaty
	{ "1080", '96',  'Asia/Dhaka' },
	{ "1080", '97',  'Asia/Omsk' },
	{ "1110", '98',  'Asia/Rangoon' },
	{ "1140", '99',  'Etc/GMT-7' },
	{ "1140", '100', 'Asia/Bangkok', 'Asia/Saigon', 'Asia/Jakarta' },		-- Hanoi: ios return Asia/Saigon
	{ "1140", '101', 'Asia/Barnaul' },
	{ "1140", '102', 'Asia/Hovd' },
	{ "1140", '103', 'Asia/Krasnoyarsk' },
	{ "1140", '104', 'Asia/Novosibirsk' },
	{ "1140", '105', 'Asia/Tomsk' },
	{ "1200", '106', 'Etc/GMT-8' },
	{ "1200", '107', 'Asia/Chongqing', 'Asia/Hong_Kong', 'Hongkong', 'Asia/Urumqi', 'Asia/Shanghai' },
	{ "1200", '108', 'Asia/Kuala_Lumpur', 'Asia/Irkutsk' },
	{ "1200", '109', 'Asia/Singapore' },
	{ "1200", '110', 'Australia/Perth' },
	{ "1200", '111', 'Asia/Taipei' },
	{ "1200", '112', 'Asia/Ulaanbaatar' },
	{ "1230", '113', 'Asia/Pyongyang' },
	{ "1245", '114', 'Australia/Eucla' },
	{ "1260", '115', 'Etc/GMT-9' },
	{ "1260", '116', 'Asia/Chita' },
	{ "1260", '117', 'Asia/Tokyo' },		-- Osaka: ios return Asia/Tokyo
	{ "1260", '118', 'Asia/Seoul' },
	{ "1260", '119', 'Asia/Yakutsk' },
	{ "1290", '120', 'Australia/Adelaide' },
	{ "1290", '121', 'Australia/Darwin' },
	{ "1320", '122', 'Etc/GMT-10' },
	{ "1320", '123', 'Australia/Brisbane' },
	{ "1320", '124', 'Australia/Canberra', 'Australia/Melbourne', 'Australia/Sydney' },
	{ "1320", '125', 'Pacific/Guam', 'Pacific/Port_Moresby' },
	{ "1320", '126', 'Australia/Hobart' },
	{ "1320", '127', 'Asia/Vladivostok' },
	{ "1350", '128', 'Australia/Lord_Howe' },
	{ "1380", '129', 'Etc/GMT-11' },
	{ "1380", '130', 'Pacific/Bougainville' },
	{ "1380", '131', 'Asia/Magadan' },
	{ "1380", '132', 'Pacific/Norfolk' },
	{ "1380", '133', 'Asia/Sakhalin' },
	{ "1380", '134', 'Pacific/Guadalcanal', 'Pacific/Noumea' },		-- Solomon Is.: ios return Guadalcanal; New Caledonia: Noumea
	{ "1440", '135', 'Etc/GMT-12' },
	{ "1440", '136', 'Asia/Anadyr', 'Asia/Kamchatka' },		-- Petropavlovsk-Kamchatsky: ios return Asia/Kamchatka
	{ "1440", '137', 'Pacific/Auckland' },		-- Wellington: ios return Auckland
	{ "1440", '138', 'Pacific/Fiji' },
	{ "1485", '139', 'Pacific/Chatham' },
	{ "1500", '140', 'Etc/GMT-13' },
	{ "1500", '141', 'Pacific/Tongatapu' },		--Nuku'alofa: ios return Tongatapu
	{ "1500", '142', 'Pacific/Samoa' },
	{ "1560", '143', 'Pacific/Kiritimati' },
}

local function parse_timezone_new(zone)
	-- 	Default tz_save: 720-->GMT+0
	local ret = 720

	if not zone then
		return ret
	end

	for k, v in ipairs(zoneinfoTable_New) do
		for index=3, #v, 1 do
			if v[index] == zone then
				ret = v[1]
				return ret
			end
		end
	end

	return ret
end

local function jetlag_to_timezone(time)
	local h, hour, minute, time_save
	h = (time/60)-12
	minute = time%60

	if minute == 0 then
		hour = h
		time_save = hour .. ":00"
	else
		if h >= 0 then
			hour = math.floor(h)
		else
			hour = math.ceil(h)
			minute = 60-time%60
		end
		time_save = hour .. ":" .. minute
	end
	return time_save
end

--- use zic to do timezone and dst (just for glibc)
-- @param N/A
-- @return N/A
function ts_makeffec_tz_and_dst_for_glibc(tz, dst_time)
    local zoneId_ori = string.sub(tz,0,9)
    --print(zoneId_ori)

    local zoneId = nil
    for k, v in ipairs(zoneinfoTable) do
        if v[1] == zoneId_ori then
            zoneId=v[2]
            break
        end
    end
    --print(zoneId)

	local zoneinfo = zoneId or zoneId_ori or "Etc/GMT+0"
	local tz_save = tonumber(parse_timezone_new(zoneinfo))
	local gmtoff = jetlag_to_timezone(tz_save)
    --print(gmtoff)

    -- default value start:Mar 5th Sun 1am end:Oct 4th Sun 1am
    local start_month = 3
    local start_week = 5
    local start_day = 0
    local start_hour = 1
    local end_month = 10
    local end_week = 4
    local end_day = 0
    local end_hour = 2

    local dst_save = "1:00"

    if not dst_time.start_time or not dst_time.end_time then
        dst_save = 0
    else
    	if dst_time.start_time then
    		start_month = dst_time.start_time.month
    		start_week = dst_time.start_time.week
    		start_day = dst_time.start_time.day
    		start_hour = dst_time.start_time.hour
    	end

    	if dst_time.end_time then
    		end_month = dst_time.end_time.month
    		end_week = dst_time.end_time.week
    		end_day = dst_time.end_time.day
    		end_hour = dst_time.end_time.hour
    	end
    end

	--local shour = ts_parse_hours(start_hour)
	--local ehour = ts_parse_hours(end_hour)
	local shour = start_hour
	local ehour = end_hour
	local smonth = MON_TBL[tonumber(start_month)]
	local emonth = MON_TBL[tonumber(end_month)]
	local sday = DAY_TBL[tonumber(start_day)]
	local eday = DAY_TBL[tonumber(end_day)]

    local start_on = ""
    local end_on = ""
    if tonumber(start_week) == 5 then
        start_on = "last"..sday
    else
        start_on = sday.."<="..tostring(start_week*7)
    end
    if tonumber(end_week) == 5 then
        end_on = "last"..eday
    else
        end_on = eday.."<="..tostring(end_week*7)
    end

    -- make the zic.conf
    local file = io.open("/tmp/zic.conf", "w")
    local rule = "# Rule  NAME  FROM  TO    TYPE  IN   ON       AT    SAVE  LETTER/S\n"..
                    "  Rule  MYDST 1970  max   -     "..smonth.." "..start_on.." "..shour.." "..dst_save.."   -\n"..
                    "  Rule  MYDST 1970  max   -     "..emonth .. " "..end_on .. " "..ehour.." 0      -\n\n"..
                    "# Zone  NAME        GMTOFF RULES/SAVE  FORMAT UNTIL\n"..
                    "  Zone "..zoneinfo.." "..gmtoff.."     -        GMT       1970\n"..
                            "              "..gmtoff.."     MYDST    GMT/DST     \n\n"..
                    "  Link "..zoneinfo.." mydst\n"
    file:write(string.format(rule))
    file:close()

    -- dst work for glibc
	local cmd = string.format("/usr/sbin/zic -d /tmp/zoneinfo /tmp/zic.conf; sleep 1; cp /tmp/zoneinfo/mydst /etc/localtime")
	-- print('cmd is ',cmd)
	sys.exec(cmd)

end

------------- end: for glibc --------------------------------

-----------------new---------------------------

function _print_tbl(data)
    if type(data) == "table" then
        for i, v in pairs(data) do
            dbg.print(i .. " = " .. tostring(data[i]))
            if type(data[i]) == "table" then
                _print_tbl(data[i])
            end
        end
    end
end

--- comps for dst rules sort
-- @param dst rules
-- @return data
local function comps(a, b)
    return tonumber(a.startTime) < tonumber(b.startTime)
end

--- Load config dst rules
-- @param N/A
-- @return data the choosen dst rule
local function load_cloud_dst()
    local res
    local ruleList = {}

    -- 1. load from config
    uci_r:foreach("systime", "dstrule",
        function(section)
            local dstrule = uci_r:get_all("systime", section[".name"])
            local startTime = tonumber(dstrule.startTime)
            local endTime = tonumber(dstrule.endTime)

            local rule = {}
            rule.startTime = startTime
            rule.endTime = endTime
            rule.dstSavings = dstrule.dstSavings
            ruleList[#ruleList + 1] = rule
        end
    )

    -- 2. check
    local dstrule_num = #ruleList
    if dstrule_num > 0 then
        table.sort(ruleList, comps)
        --ladded by lizhongwen 20200314
        --compare with systime,choose the right rule
        local sys_time = tonumber(os.time())
        local rule_filter = {}
        for i, v in pairs(ruleList) do
            if tonumber(v.endTime) > sys_time  then
                rule_filter[#rule_filter+1]  = ruleList[i]
            end
        end

        if rule_filter == nil or rule_filter[1] == nil then
            res = ruleList[1]
        elseif #rule_filter > 1 then
            table.sort(rule_filter, comps)
            res = rule_filter[1]
        else
            res = rule_filter[1]
        end
    end

    return res
end


--- Transfer timestamp to dst string
-- @param timestamp
-- @return data return dst string
local function ts_timestamp_to_dst(timestamp)
    dbg.print("timestamp " .. timestamp)

    local res = {}
    res.year = os.date("%Y", timestamp)
    res.month = tostring(os.date("%m", timestamp) + 0)
    -- day of week
    res.day = tostring(os.date("%w", timestamp) + 0)

    local day = tonumber(os.date("%d", timestamp))
    local dateVal = res.year .. "-" .. res.month .. "-1"
    local cmd = 'echo -n $(( 1+(' .. day .. '-1-(7+' .. res.day .. '-$(date -d ' .. dateVal .. ' +%w))%7)/7 ))'
    --dbg.print(cmd)
    res.week = sys.exec(cmd)

    res.hour = os.date("%H", timestamp) + 0
    res.minutes = os.date("%H", timestamp) * 60 + os.date("%M", timestamp)

    --_print_tbl(res)

    ---- /etc/TZ M3.4.0/1
    local sys_hour = os.date("%H:%M", timestamp)
    local sys_dst = 'M' .. res.month .. '.' .. res.week .. '.' .. res.day .. '/' .. sys_hour
    dbg.print(sys_dst)

    return res, sys_dst
end

--- Load cloud dst
-- @param N/A
-- @return data
function ts_load_cloud_dst()
    -- get current system timezone
    local sname = uci_r:get_first("time_settings", "system", nil, nil)
    local timezone = uci_r:get("time_settings", sname, "timezone")

    -- get tz cmd
    local tz = timezone
    tz = tz:find("+") and tz:gsub("+", "-") or tz:gsub("-", "+")

    -- check if it is glibc
    local is_gblic = io.open("/lib/time_settings/is_glibc")
    local zic = io.open("/usr/sbin/zic")
    local glibc_flag = false
    if is_gblic ~= nil and zic ~= nil then 
        glibc_flag = true
    end

    -- set tz without dst to avoid local_time misunderstand
    local dst_time = {}
    if glibc_flag == true then
        ts_makeffec_tz_and_dst_for_glibc(timezone, dst_time)
    else
	fs.writefile("/etc/TZ", tz .. "\n")
    end
    
    local dst = load_cloud_dst()

    -- TODO: dst.dstSavings
    if dst and dst.dstSavings == "60" then
        local startTime, dst_start = ts_timestamp_to_dst(dst.startTime)
        local endTime, dst_end = ts_timestamp_to_dst(dst.endTime)

        -- if dst start time is equal to end time, then return error
        if dst_start == dst_end then
            return false, "start time cannot be the same as end time"
        end

        if glibc_flag == true then
            dst_time.start_time = startTime
            dst_time.end_time = endTime
        end         

        tz  = tz .. "TMG," .. dst_start .. "," .. dst_end
    end

    dbg.printf(tz)

    if glibc_flag == true then
        -- only for glibc
        ts_makeffec_tz_and_dst_for_glibc(timezone, dst_time)
    else
	fs.writefile("/etc/TZ", tz .. "\n")
    end

	-- /etc/TZ is UTC and execute(date -k) ==> sys_tz.tz_minuteswest not always 0
	sys.exec("date -k ")

    return true
end

ts_load_cloud_dst()
