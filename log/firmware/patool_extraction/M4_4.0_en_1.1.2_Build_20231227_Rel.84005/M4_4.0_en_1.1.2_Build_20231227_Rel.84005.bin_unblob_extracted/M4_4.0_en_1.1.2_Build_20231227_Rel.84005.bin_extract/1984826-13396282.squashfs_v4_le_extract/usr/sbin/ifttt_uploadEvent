#!/usr/bin/lua

local AppsError = require "cloud.tp_apps.tp_app_error"
local ifttt = require "cloud.tp_apps.ifttt"
local sys   = require "luci.sys"
local nixio = require "nixio"
local dbg   = require "luci.tools.debug"
local json = require "luci.json"
local io    = require "io"
local clientmgmt = require "luci.model.app_clientmgmt"
local uci_r = uci.cursor()
local getfirm = require "luci.model.getfirm"

local ctl_ifttt = {}
ctl_ifttt.dispatch = ifttt.dispatch
local ctl_tbl = {
    del_trigger = {
        ctl = ctl_ifttt,
        form = "trigger",
        oper = "del"
    }
}

local TRIGGER_CFG = "ifttt"
local TRIGGER_CFG_NAME = "trigger"

local content_type = "Content-type: application/json;charset=utf-8"
local url_postfix = "/cloudDevice"
local CACERT_FILE = "/etc/certificate/2048_newroot.cer"

local retry_count = 0
local token
local origin_url
local fp
local flag = false
local file_path = arg[1]

local event_list
if nixio.fs.access(file_path) then
    fp = io.open(file_path, "r")
    event_list = fp:read("*all")
    fp:close()
end

while(retry_count <= 2)
do
	retry_count = retry_count + 1
	flag = false

	local Locker = require("luci.model.locker").Locker
	local locker = Locker("/tmp/cloud/nbu_api_token_lock")
	locker:lock()

	if not nixio.fs.access("/tmp/cloud/nbu_api_token") then
		sys.call("cloud_getDevToken nbu")
	end

	if nixio.fs.access("/tmp/cloud/nbu_api_token") then
		fp = io.open("/tmp/cloud/nbu_api_token", "r")
		token = fp:read("*line")
		origin_url = fp:read("*line")..url_postfix
		--origin_url = "https://api-ifttt-router.tplinknbu.com" .. url_postfix
		fp:close()
		locker:close()
	else
		-- try again when not get the nbu token
		sys.call("cloud_getDevToken nbu")
		if nixio.fs.access("/tmp/cloud/nbu_api_token") then
			fp = io.open("/tmp/cloud/nbu_api_token", "r")
			token = fp:read("*line")
			origin_url = fp:read("*line")..url_postfix
			--origin_url = "https://api-ifttt-router.tplinknbu.com" .. url_postfix
			fp:close()
			locker:close()
		else
			locker:close()
			break
		end
	end
		
	local data = {
		["method"] = "uploadTriggerEvents",
		["params"] = {
			["version"] = 1,
			["deviceToken"] = token,
			["deviceId"] = string.match(getfirm.getfirm_cached("DEV_ID"), "%w+"),
			["eventList"] = {}
		}
	}

    if event_list == nil then
        break
    end
	data.params.eventList = json.decode(event_list)

	function time_format_to_iso8601(time)
		local res
		fp = io.popen("date -d \'@%d\' +%%FT%%X%%z" % {time})
		if fp then                                    
			res = fp:read("*line")                    
			fp:close()                             
		end
		-- format timezone
		res = res:gsub("([+|-])(%d)(%d)(%d)(%d)", "%1%2%3:%4%5")
		return res
	end

	for _, event in ipairs(data.params.eventList) do
		event.ingredients["0"] = time_format_to_iso8601(tonumber(event.ingredients["0"]))
	end
	
	sys.call("echo `date` >/var/log/ifttt_upload.result; echo '%s' >>/var/log/ifttt_upload.result" % {json.encode(data)})
	dbg.print("ifttt request:",json.encode(data))

	local ret
	fp = io.popen("curl -s -S -l -H \"%s\" -X POST -d \'%s\' --cacert %s --connect-timeout 5 %s --retry 3 --retry-delay 1 2>>/var/log/ifttt_upload.result" % {content_type, json.encode(data), CACERT_FILE, origin_url})
	if fp then                                    
		ret = fp:read("*all")                    
		fp:close()                             
	end

	dbg.print("ifttt response:",ret)
	ret = json.decode(ret)

	if ret ~= nil then
		if tonumber(ret.error_code) == AppsError.ERROR_MSG.ERROR_INVAILD_TOKEN[1] then
			--refresh token and upload again
			sys.call("rm /tmp/cloud/nbu_api_token")
			flag = true
		elseif tonumber(ret.error_code) == AppsError.ERROR_MSG.ERROR_UNMATCHED_TRIGGER_ITEM[1] then
			--delete the appointed trigger. 
            --[[
			for _, list in ipairs(ret.triggerIdList) do
				uci_r:delete_all(TRIGGER_CFG, TRIGGER_CFG_NAME,
					function(section)
						old_trigger = uci_r:get_all(TRIGGER_CFG, section[".name"])
						return tonumber(old_trigger.id) == tonumber(list)
					end
				)		
			end
			uci_r:commit(TRIGGER_CFG)
            --]]
            local delTriggerParams = {}
            local delTriggerList = {}
            for _, triggerId in ipairs(ret.triggerIdList) do
                local del_trigger = {}
                del_trigger.id = triggerId
                delTriggerList[#delTriggerList+1] = del_trigger		
			end
            delTriggerParams.trigger_list = delTriggerList
            ifttt.control_dispatch(ctl_tbl.del_trigger, delTriggerParams, ret.configVersion)
		end
	end
	
	if flag == false then
		break
	end
	
end

os.execute("rm -f %s" % {file_path})
