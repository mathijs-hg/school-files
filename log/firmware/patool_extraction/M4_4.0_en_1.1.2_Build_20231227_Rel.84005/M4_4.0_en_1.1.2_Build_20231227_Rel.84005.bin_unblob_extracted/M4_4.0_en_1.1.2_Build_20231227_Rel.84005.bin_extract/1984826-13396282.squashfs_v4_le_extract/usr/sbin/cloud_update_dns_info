#!/usr/bin/lua

local uci   = require "luci.model.uci"
local dbg   = require "luci.tools.debug"
local uci_r = uci.cursor()
local sys   = require "luci.sys"
local cloud_ddns = require "cloud_req.cloud_ddns"
local ctl_cloud = require "luci.controller.admin.mobile_app.cloud"
local socket = require "socket"

local function is_ddns_enable()
    local bind_domain = uci_r:get("cloud_ddns", "dns_info", "domain")
    local status = uci_r:get_bool("cloud_ddns", "dns_info", "status")
    if not bind_domain or status == false then
        return false
    end
    return true
end

local function update_dns_info()
	local sysmode =  uci_r:get("sysmode", "sysmode", "mode") or "Router"
	local ret
	local domain_list 
	
	dbg.print("== update_dns_info start ==")
	domain_list = cloud_ddns.ddns_get_domain_list()
	if domain_list == nil then
		dbg.print("fail to get ddns info")
		return false
	end
	
	local uci_s = uci.cursor_state()
	local mode = uci_s:get("repacd", "repacd", "DeviceType")
	if mode == "RE" then
		dbg.print("=== RE role ===")
		
		if (#domain_list) == 0 then
			return true
		end
		ret = cloud_ddns.ddns_unbind_all()
		if ret ~= 0 then
			dbg.print("fail to unbind old domains")
			return false
		end
		
		local del_domain_list = {}
		for _,del_domain in ipairs(domain_list) do
			del_domain_list[#del_domain_list+1] = del_domain.domain
		end
		ret = cloud_ddns.ddns_delete_domains(del_domain_list)
		if ret ~= 0 then
			dbg.print("fail to delete old domains")
			return false
		end
	else
		dbg.print("=== AP role ===")
		local bind_domain = uci_r:get("cloud_ddns", "dns_info", "domain")
		local status = uci_r:get_bool("cloud_ddns", "dns_info", "status")
		if (#domain_list) == 0 and bind_domain then
			--  shouldn't bind automatically
			--params.domain_name = bind_doamin
			--params.ddns_status = status or false
			dbg.print("== shouldn't bind dns automatically ==")
			return true
		elseif (#domain_list) ~= 0 then
			local form = {}
			local params = {}
			
			form.form = "ddns"
			form.operation = "set"
			form.params = params
			form.config_version = tostring(math.floor(socket.gettime()*1000))
			local sync_ver = uci_r:get("sync", "config", "version")
			if tonumber(sync_ver) == 0 then
				dbg.print("Shouldn't update local dns info when reset")
				return true
			end
			params.domain_name = domain_list[1].domain
			if sysmode == "AP" then
				params.ddns_status = false
			else
				params.ddns_status = (tonumber(domain_list[1].isBind) == 1) and true or false
			end
			params.update_local = true
			
			ret = ctl_cloud.dispatch(form)
			if ret.error_code ~= 0 then
				dbg.print("== fail to update local dns info ==")
				return false
			end
		else
			dbg.print("== Nothing to do about dns info ==")
		end
		
		if sysmode == "AP" then
			dbg.print("=== AP mode ===")
			ret = cloud_ddns.ddns_unbind_all()
			if ret ~= 0 then
				dbg.print("fail to unbind old domains")
				return false
			end
		end
	end
	
	dbg.print("== update_dns_info end ==")
	return true
end

local update_suc = false
local retry_time = 0

if not is_ddns_enable() then
	dbg.print("ddns is not enabled no need to check status")
    return false
end

while not update_suc and (retry_time < 10) do
	retry_time = retry_time + 1
    -- local cloud_status = appcloud.get_cloud_link_status()
    -- if cloud_status == "offline" then
    --     return
    -- end
	
	update_suc = update_dns_info()
	if not update_suc then
		sys.call("sleep 6")
	end
end

if update_suc then
	dbg.print("succeed to update dns info after %d times" % retry_time)
else
	dbg.print("fail to update dns info after %d times" % retry_time)
end
