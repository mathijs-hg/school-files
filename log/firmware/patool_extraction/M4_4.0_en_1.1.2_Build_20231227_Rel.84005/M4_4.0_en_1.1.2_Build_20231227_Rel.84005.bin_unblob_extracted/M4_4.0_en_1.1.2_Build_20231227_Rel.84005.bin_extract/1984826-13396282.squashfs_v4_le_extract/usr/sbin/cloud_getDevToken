#!/usr/bin/lua

local cloud = require "cloud_req.cloud_comm"
local sys   = require "luci.sys"
local nixio = require "nixio"
local dbg   = require "luci.tools.debug"
local getfirm = require "luci.model.getfirm"

local CLOUD_TMP_DIR = "/tmp/cloud/"
local DELETE_TOKEN_SCRIPT = "/lib/deleteToken.sh"

local req = {}
req.params = {}
local SERVICETYPE = {
	["eweb"] = { 
		type = "eweb", 
		strore = CLOUD_TMP_DIR .. "cloud_token",
		script = DELETE_TOKEN_SCRIPT
	},
	["nbu"] = {
		type ="nbu.ifttt-router.api",
		strore = CLOUD_TMP_DIR .. "nbu_api_token",
		script = DELETE_TOKEN_SCRIPT		
	},
	["libcloud_proxy"] = {
		type ="datasink",
		strore = CLOUD_TMP_DIR .. "libcloud_proxy_token",
		script = DELETE_TOKEN_SCRIPT		
	},
	["dcmp"] = {
		type ="nbu.event.dcmp",
		strore = CLOUD_TMP_DIR .. "dcmp_token",
		script = DELETE_TOKEN_SCRIPT
	},
    ["homecare"] = {
        type = "nbu.homecare-cloud",
        strore = CLOUD_TMP_DIR .. "cloud_token_homecare",
        script = DELETE_TOKEN_SCRIPT
    },
	["smart_home"] = {
		type ="nbu.event.gw",
		strore = CLOUD_TMP_DIR .. "smart_home_token",
		script = DELETE_TOKEN_SCRIPT		
	}
}

local index
if arg[1] == nil then
	index = "eweb"
else
	index = tostring(arg[1])
end

local serviceType = SERVICETYPE[index].type or SERVICETYPE["eweb"].type
local storefile = SERVICETYPE[index].strore or SERVICETYPE["eweb"].strore
local script = SERVICETYPE[index].script or SERVICETYPE["eweb"].script

--req.method = "getDeviceToken"
req.method = "getNewDeviceTokenWithServices"
req.params.deviceId = cloud.TrimStr(getfirm.getfirm_cached("DEV_ID"))
req.params.serviceIds = {}
table.insert(req.params.serviceIds, serviceType)

local re, data = cloud.send_request_sync(req, 5000, 1)

if re ~= 0 then os.exit(-1) end

-- handler err_code
if data.error_code ~= 0 then os.exit(data.error_code) end

local token = data.result.deviceToken
local expiresIn = data.result.expiresIn
local origin_url = data.result.serviceUrls[SERVICETYPE[index].type]

if not nixio.fs.access(CLOUD_TMP_DIR) then
	sys.call("mkdir -p %s" % {CLOUD_TMP_DIR})
end

sys.call("echo %s > %s" % {token, storefile})
sys.call("echo %s >> %s" % {origin_url, storefile})
sys.fork_call("sh %s %d %s &" % {script, expiresIn, storefile})
