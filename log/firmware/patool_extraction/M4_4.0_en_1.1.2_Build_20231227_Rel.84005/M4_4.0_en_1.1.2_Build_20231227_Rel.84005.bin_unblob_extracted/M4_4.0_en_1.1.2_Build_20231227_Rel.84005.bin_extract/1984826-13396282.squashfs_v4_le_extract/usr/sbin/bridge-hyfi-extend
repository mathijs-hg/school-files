#!/bin/sh

WLAN_HOST_AP_DEVICES=
WLAN_BACKHAUL_AP_DEVICES=
WLAN_STA_DEVICES=
WLAN_VLAN_STA_DEVICES=
ETHER_DEVICES=
PLC_DEVICES=
ALL_DEVICES=

. /lib/functions/whc-network.sh
. /lib/functions.sh

local backhaul_network="backhaul"
local traffic_separation_enabled=0
local traffic_separation_active=0
local iface_config

__bridge_get_ether_plc_ifaces() {
    local config="$1"
    local plcAsEth="$3"
    local ifnames
    local plcIfnames

    if [ "$2" = "$config" ]; then
        ifnames=`uci get "network.lan.ifname"`
        for iface in $ifnames; do
            ETHER_DEVICES="${ETHER_DEVICES}${ETHER_DEVICES:+","}${iface}"
        done
        
        config_get plcIfnames "$config" plcIfs
        for iface in $plcIfnames; do
            if [ "$plcAsEth" -gt 0 ]; then
                ETHER_DEVICES="${ETHER_DEVICES}${ETHER_DEVICES:+","}${iface}"
            else
                PLC_DEVICES="${PLC_DEVICES}${PLC_DEVICES:+","}${iface}"
            fi
        done        
    fi
}

__bridge_get_wlan_ifaces() {
    local config="$1"
    local iface network disabled mode is5g

    config_get iface "$config" ifname
    config_get network "$config" network
    config_get disabled "$config" disabled '0'
    config_get mode "$config" mode

    if [ -n "$iface" -a "$2" = "$network" -a "$disabled" -eq 0 ]; then
        if [ "$mode" = "ap" ]; then
            WLAN_HOST_AP_DEVICES="${WLAN_HOST_AP_DEVICES}${WLAN_HOST_AP_DEVICES:+","}${iface}"
        elif [ "$mode" = "sta" ]; then
            WLAN_STA_DEVICES="${WLAN_STA_DEVICES}${WLAN_STA_DEVICES:+","}${iface}"
        fi
    fi
}

__bridge_is_vlan_iface() {
    local iface="$1"

    echo "$iface" | grep '\.' >/dev/null 2>&1
    if [ "$?" -eq "0" ]; then
        return 0
    fi

    return 1
}

__bridge_iterate_wlan_ifaces() {
    local config="$1"
    local iface network disabled
    local interface

    config_get iface "$config" ifname
    config_get network "$config" network
    config_get disabled "$config" disabled '0'

    if [ -n "$iface" -a "$backhaul_network" = "$network" -a "$disabled" -eq 0 ]; then
        interface=`echo "$2" | cut -d '.' -f1`
        if [ "$interface" = "$iface" ]; then
            eval "$3='0'"
            eval "$4=$config"
        fi
    fi
}

__bridge_is_device_wlan() {
    local iface="$1"
    device_wlan=1

    if [ -n "$backhaul_network" ]; then
        config_load wireless
        config_foreach __bridge_iterate_wlan_ifaces wifi-iface $iface device_wlan iface_config
    fi

    return $device_wlan
}

__bridge_get_wlan_vlan_ifaces() {
    local config="$1"
    local ifnames bridge_name is5g


    if [ "$2" = "$config" ]; then
                #initially VLAN interfaces are added using vconfig and brctl tool 
                #to avoid multiple restarts.VLAN interfaces added this way are not 
                #detected by config_get, so using direct command here.
        config_get ifnames "$1" vlanifs
        for iface in $ifnames; do
            if __bridge_is_vlan_iface $iface; then
                if __bridge_is_device_wlan $iface; then
                    config_load wireless
                    config_get mode "$iface_config" mode
                    if [ "$mode" = "sta" ]; then
                        WLAN_VLAN_STA_DEVICES="${WLAN_VLAN_STA_DEVICES}${WLAN_VLAN_STA_DEVICES:+","}${iface}"
                    elif [ "$mode" = "ap" ]; then
                        WLAN_BACKHAUL_AP_DEVICES="${WLAN_BACKHAUL_AP_DEVICES}${WLAN_BACKHAUL_AP_DEVICES:+","}${iface}"                       
                    fi
                fi
            fi
        done
    fi
}

bridge_get_iface()
{
    local bridge="$1"
    
    WLAN_HOST_AP_DEVICES=""
    WLAN_BACKHAUL_AP_DEVICES=""
    WLAN_STA_DEVICES=""
    WLAN_VLAN_STA_DEVICES=""
    ETHER_DEVICES=""
    PLC_DEVICES=""
    ALL_DEIVE=""
    
    config_load repacd
    config_get device_type repacd DeviceType 'RE'
    config_get traffic_separation_enabled repacd TrafficSeparationEnabled '0'
    config_get traffic_separation_active repacd TrafficSeparationActive '0'
    config_get traffic_plc_as_eth repacd TrafficPlcAsEth '0'      
    config_get backhaul_network repacd NetworkBackhaul 'backhaul'

    config_load network
    config_foreach __bridge_get_ether_plc_ifaces interface $bridge $traffic_plc_as_eth   
    
    config_load wireless
    config_foreach __bridge_get_wlan_ifaces wifi-iface $bridge
    
    if [ "$traffic_separation_enabled" -gt 0 ] && \
        [ "$traffic_separation_active" -gt 0 ]; then
        config_load network
        config_foreach __bridge_get_wlan_vlan_ifaces interface $bridge
        
        # Since hyd doesn't support daisy chain now, the device connected to RE should not have traffic from both ath02 and ath12
        # So ath02 and ath12 go into different group in RE just now. We may change it when hyd support daisy chain.
        if [ "$device_type" = 'RE' ]; then
            WLAN_BACKHAUL_AP_DEVICES="${WLAN_BACKHAUL_AP_DEVICES//,/:}"
        fi 
        
        ALL_DEVICES="${WLAN_HOST_AP_DEVICES}:${WLAN_BACKHAUL_AP_DEVICES}:${WLAN_VLAN_STA_DEVICES}:${ETHER_DEVICES}:${PLC_DEVICES}"
    else
        # Since hyd doesn't support daisy chain now, the device connected to RE should not have traffic from both ath02 and ath12
        # So ath02 and ath12 go into different group in RE just now. We may change it when hyd support daisy chain.
        if [ "$device_type" = 'RE' ]; then
            WLAN_BACKHAUL_AP_DEVICES="${WLAN_BACKHAUL_AP_DEVICES//,/:}"
        fi    
        ALL_DEVICES="${WLAN_HOST_AP_DEVICES}:${WLAN_BACKHAUL_AP_DEVICES}:${WLAN_STA_DEVICES}:${ETHER_DEVICES}:${PLC_DEVICES}"    
    fi
    
}

bridge_hyfi_extend_enable()
{
   local bridge="$1"
   [ ! -d "/sys/class/net/br-$bridge" ] && return
   
   bridge_get_iface $bridge
   echo "$ALL_DEVICES" >/sys/class/net/br-$bridge/bridge/bridge_group_matrix
   echo 1 > /sys/class/net/br-$bridge/bridge/bridge_hyfi_extend_enable
}


bridge_hyfi_extend_disable()
{  
    [ -d "/sys/class/net/br-$1" ] && {
        echo '0' > /sys/class/net/br-$1/bridge/bridge_hyfi_extend_enable
    }    
}

if [ "$2" = "enable" ]; then
    bridge_hyfi_extend_enable $1
else
    bridge_hyfi_extend_disable $1
fi

