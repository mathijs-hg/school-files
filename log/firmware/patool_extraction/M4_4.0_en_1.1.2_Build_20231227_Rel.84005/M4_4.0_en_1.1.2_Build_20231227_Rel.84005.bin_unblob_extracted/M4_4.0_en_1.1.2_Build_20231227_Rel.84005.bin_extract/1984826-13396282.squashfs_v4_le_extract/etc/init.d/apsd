#!/bin/sh /etc/rc.common

START=43
USE_PROCD=1
PROG=/usr/bin/apsd
DEBUG_OUTOUT=1


config_load sysmode
config_get system_mode sysmode mode "Router"
config_clear

guest_vlan_id=$(uci get wifi.guest.vlan_id -c /etc/config)
guest_isolate=$(uci get wifi.guest.host_isolation -c /etc/config)

config_load iptv_v2
config_get iptv_vlan_id info iptv_vid "0"
config_get iptv_vlan_backhaul_id info iptv_backhaul_vid "491"
config_clear

config_load plc_sync
config_get plc_vlan_id vlan vlan_id "5"
config_get plc_backhaul_vlan_id vlan backhaul_vlan_id "191"
config_get plc_guest_vlan_id vlan guest_vlan_id "291"
config_get plc_iptv_vlan_id vlan iptv_vlan_id "391"
config_clear

fap_mac=""

get_fap_mac(){
    local section=$1
    local value
    local role

    config_get value $section mac
    config_get role $section role
    echo "mac:$value" > /dev/console
    echo "role:$role" > /dev/console
    if [ "$role" = "AP" ]; then
        fap_mac="$value"
    fi
    
}



apsd_echo() {
    if [ "$DEBUG_OUTOUT" -gt 0 ]; then
            echo "${1}: ""$2"> /dev/console
    fi
}

start_service() {
    lock /var/run/apsd.lock
    trap "" INT TERM ABRT QUIT ALRM
    apsd_echo apsd "start apsd"
    if [ "$system_mode" = "Router" ]; then
        sed "s/\"eth_vlan_id\":[  ]*10/\"eth_vlan_id\": $guest_vlan_id/g" /etc/apsd.json > /tmp/apsd.json
        sed -i "s/\"iptv_vlan_id\":[  ]*0/\"iptv_vlan_id\": $iptv_vlan_id/g" /tmp/apsd.json
        sed -i "s/\"iptv_vlan_backhaul_id\":[  ]*491/\"iptv_vlan_backhaul_id\": $iptv_vlan_backhaul_id/g" /tmp/apsd.json
        sed -i "s/\"plc_vlan_backhaul_id\":[ ]*191/\"plc_vlan_backhaul_id\": $plc_backhaul_vlan_id/g" /tmp/apsd.json
        sed -i "s/\"plc_vlan_guest_id\":[ ]*291/\"plc_vlan_guest_id\": $plc_guest_vlan_id/g" /tmp/apsd.json
        sed -i "s/\"plc_vlan_iptv_id\":[ ]*391/\"plc_vlan_iptv_id\": $plc_iptv_vlan_id/g" /tmp/apsd.json

	config_load repacd
	config_get device_type repacd DeviceType 'RE'
	[ "$device_type" = "RE" -a -s /tmp/group-info ] &&  sed -i "/\"br-wan\":/d" /tmp/apsd.json
        
        echo "$guest_vlan_id" > /tmp/eth_vlan_id

        bcm_iface=$(grep "wl0" /tmp/apsd.json)
        if [ -n "$bcm_iface" ] && [ -f /tmp/g_factorymode ]; then
            # factory mode ap vifs is wl0/wl1/wl2
            # delete all wlx/wlx.1/wlx.2 sta vap config, like:
            # "wl1": {"type": "2.4g", "nonrelay": true, "compat_group": 1, "path": true, "needha": true},
            sed -i -e '/\"nonrelay\"/d' /tmp/apsd.json

            # wlx2 config change to wlx
            # "wl12": {"type": "2.4g", "compat_group": 255} ==> "wl1": {"type": "2.4g", "compat_group": 255}
            # to do X50V2 wl12 XE75 wl11
            sed -i -e 's/\"wl02\"/\"wl0\"/g' /tmp/apsd.json
            sed -i -e 's/\"wl22\"/\"wl2\"/g' /tmp/apsd.json

            local support_6g
            support_6g=$(uci -c /etc/profile.d/ get profile.band_6g.support 2>/dev/null)
            if [ "$support_6g" = "yes" ]; then
                sed -i -e 's/\"wl11\"/\"wl1\"/g' /tmp/apsd.json
            else
                sed -i -e 's/\"wl12\"/\"wl1\"/g' /tmp/apsd.json
            fi

        fi

        procd_open_instance
        procd_set_param command $PROG -c /tmp/apsd.json
        procd_set_param respawn
        procd_close_instance
    else
        cat /etc/apsd_ap.json > /tmp/apsd.json
        if [ "$guest_isolate" = "1" ]; then
            qca_iface=$(grep "ath01" /tmp/apsd.json)
            if [ -n "$qca_iface" ]; then
                sed  -i 's/^[ ]*\"ath01\".*$/\"ath01\": {\"type\": \"2.4g\", \"compat_group\": 255, \"class\":1 },/g' /tmp/apsd.json
                sed  -i 's/^[ ]*\"ath11\".*$/\"ath11\": {\"type\": \"5g\", \"compat_group\": 255, \"class\":1 },/g' /tmp/apsd.json
                sed  -i 's/^[ ]*\"ath21\".*$/\"ath21\": {\"type\": \"5g_2\", \"compat_group\": 255, \"class\":1 },/g' /tmp/apsd.json
            fi

            bcm_iface=$(grep "wl03" /tmp/apsd.json)
            if [ -n "$bcm_iface" ]; then
                # add BBB after 1111: sed -i 's/1111/&BBB/' /tmp/test.txt
                # add ("class":1, ) after ("wl13": {)
                # guest_isolate=0 "wl03": {"type": "5g", "compat_group": 255 },
                # guest_isolate=1 "wl03": {"class":1, "type": "5g", "compat_group": 255 },
                class_exist=$(grep "wl03" /tmp/apsd.json | grep "class")
                if [ ! -n "$class_exist" ]; then
                    sed -i 's/\"wl03\": {/&\"class\":1, /' /tmp/apsd.json
                fi
                class_exist=$(grep "wl13" /tmp/apsd.json | grep "class")
                if [ ! -n "$class_exist" ]; then
                    sed -i 's/\"wl13\": {/&\"class\":1, /' /tmp/apsd.json
                fi
                class_exist=$(grep "wl23" /tmp/apsd.json | grep "class")
                if [ ! -n "$class_exist" ]; then
                    sed -i 's/\"wl23\": {/&\"class\":1, /' /tmp/apsd.json
                fi
            fi

            mtk_iface=$(grep "ra0" /tmp/apsd.json)
            if [ -n "$mtk_iface" ]; then
                class_exist=$(grep "ra4" /tmp/apsd.json | grep "class")
                if [ ! -n "$class_exist" ]; then
                    sed -i 's/\"ra4\": {/&\"class\":1, /' /tmp/apsd.json
                fi
                class_exist=$(grep "rai4" /tmp/apsd.json | grep "class")
                if [ ! -n "$class_exist" ]; then
                    sed -i 's/\"rai4\": {/&\"class\":1, /' /tmp/apsd.json
                fi
                class_exist=$(grep "rax4" /tmp/apsd.json | grep "class")
                if [ ! -n "$class_exist" ]; then
                    sed -i 's/\"rax4\": {/&\"class\":1, /' /tmp/apsd.json
                fi
            fi
        fi

        config_load bind_device_list
        config_foreach get_fap_mac "device"
        config_clear
        fap_mac=${fap_mac//-/:}
        echo "fap: $fap_mac" > /dev/console


        if [ -f "/proc/hyfi_filter/fap_mac"  ]; then
            echo ${fap_mac:-00:00:00:00:00:00} > /proc/hyfi_filter/fap_mac
        fi

        if [ -f "/proc/tpbr_filter/fap_mac"  ]; then
            echo ${fap_mac:-00:00:00:00:00:00} > /proc/tpbr_filter/fap_mac
        fi

        procd_open_instance
        procd_set_param command $PROG -c /tmp/apsd.json
        procd_set_param respawn
        procd_close_instance
    fi

    trap - INT TERM ABRT QUIT ALRM 
    lock -u /var/run/apsd.lock
}

stop_service(){
    apsd_echo apsd "stop apsd"
}

