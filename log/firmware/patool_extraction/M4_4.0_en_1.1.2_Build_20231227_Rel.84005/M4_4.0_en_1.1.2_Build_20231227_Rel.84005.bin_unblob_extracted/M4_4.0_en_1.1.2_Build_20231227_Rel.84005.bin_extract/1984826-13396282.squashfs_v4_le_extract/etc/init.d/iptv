#!/bin/sh /etc/rc.common

#start before wanDetect
START=83
STOP=83
USE_PROCD=1
DEBUG_OUTOUT=1
DEBUG_LEVEL=6

. /lib/iptv/iptv.sh
local device_id=$(getfirm DEV_ID)
local role=$(uci get bind_device_list."$device_id".role 2>/dev/null)
local port_count=0

iptv_echo() {
    if [ "$DEBUG_OUTOUT" -gt 0 ]; then
            echo "${1} $2" > /dev/console
            logger -p $DEBUG_LEVEL "${1} $2"
    fi
}



__iptv_count_ports() {
    local cfg=$1
    config_get port_enable "$cfg" enable "0"
    config_get port_idx  "$cfg" port "-1"

    if [ "$port_enable" = "1" ] && [ "$port_idx" != "-1" ]; then
            port_count=$((port_count + 1))
    fi

}

fill_bridge_port() {
    local portlist 
    config_load iptv_v2
    config_get iptv_enable info enable "0"
    config_get iptv_type info iptv_type "normal"

    if [  "$role" = "AP" ] && [ "$iptv_enable" = "1" -o "$iptv_type" = "bridge" ]; then
	port_count = 0
	config_foreach __iptv_count_ports ports
	if [ "$port_count" -eq 0 ]; then 
		iptv_echo iptv.init "portlist is null in bridge mode"
		device_id=$(getfirm DEV_ID)

		uci set iptv_v2.0="ports"
		uci set iptv_v2.0.index='0'
		uci set iptv_v2.0.enable='1'
		uci set iptv_v2.0.port='1'
		uci set iptv_v2.0.device_id="$device_id"

		uci set iptv_v2.1="ports"
		uci set iptv_v2.1.index='1'
		uci set iptv_v2.1.enable='0'
		uci set iptv_v2.1.port='-1'
		uci set iptv_v2.1.device_id=""

		uci set iptv_v2.2="ports"
		uci set iptv_v2.2.index='2'
		uci set iptv_v2.2.enable='0'
		uci set iptv_v2.2.port='-1'
		uci set iptv_v2.2.device_id=""
		uci commit

	fi
    fi  

    if [ "$iptv_enable" = "0" ] && [ "$iptv_type" != "bridge" ]; then
		uci set iptv_v2.0="ports"
		uci set iptv_v2.0.index='0'
		uci set iptv_v2.0.enable='0'
		uci set iptv_v2.0.port='-1'
		uci set iptv_v2.0.device_id=""

		uci set iptv_v2.1="ports"
		uci set iptv_v2.1.index='1'
		uci set iptv_v2.1.enable='0'
		uci set iptv_v2.1.port='-1'
		uci set iptv_v2.1.device_id=""

		uci set iptv_v2.2="ports"
		uci set iptv_v2.2.index='2'
		uci set iptv_v2.2.enable='0'
		uci set iptv_v2.2.port='-1'
		uci set iptv_v2.2.device_id=""
		uci commit
    fi  

}


          
# AP_MODE RE_MODE
# iptv_v2.iptv_device.DEV_ID
# config iptv_device 'DEV_ID'
#   option port '0' /* 0, 1, both */
#   option enable '0' /* 0, 1 */

is_iptv_enable() {
    local iptv_enable=$1
    local iptv_type=$2
    if [ "$iptv_enable" = "1" ] || [ "$iptv_type" = "bridge" ]; then
        return 0
    else
        return 1
    fi
}



start_service() {
    iptv_echo iptv.init "start iptv"
    iptv_echo iptv "start_service " 
    local old_guest_eth_enable
    local br=$(brctl show | grep br-iptv)
    local sysmode
    local iptv_port

    config_load iptv_v2
    config_get iptv_enable info enable "0"
    config_get iptv_vid info iptv_vid "0"
    config_get iptv_prio info iptv_prio "0"
    config_get iptv_type info iptv_type "normal"
    config_get iptv_backhaul_vid info iptv_backhaul_vid "491"
    #config_get iptv_port "$device_id" port "other"
    config_clear

    count_self_iptv_ports "$device_id" iptv_port
    iptv_echo "self iptv_port is $iptv_port"

    config_load wifi
    config_get old_guest_eth_enable guest vlan_enable "1"
    config_get old_guest_iptv_ports guest iptv_port "other"
    config_clear

    config_load sysmode
    config_get sysmode sysmode mode 'Router'
    config_clear
    
    local eth_num eth_num_seq
    local port_mask
    local iptv_port_count=0

    eth_num=$(get_eth_port_num)
    eth_num_seq=$((eth_num-1))
    for i in $(seq 0 1 $eth_num_seq);do
        port_mask=$((1<<i))
        if [ $((port_mask&iptv_port)) -gt 0 ]; then
            iptv_port_count=$((iptv_port_count+1))
        fi
    done

    [ "$sysmode" != "Router" ] && return 0 

    if [ -z "$br" ]; then
        brctl addbr br-iptv
        ifconfig br-iptv mtu 1500
        ifconfig br-iptv up
    fi

	echo 0 > /sys/devices/virtual/net/br-iptv/bridge/multicast_snooping

    if [  "$role" = "AP" ]; then
        if [ "$iptv_enable" == 1 ] || [ "$iptv_type" == "bridge" ]; then
            #guest_eth clean
            if [ "$iptv_port" != "other" ] && [ "$old_guest_eth_enable" = "1" ] && [ $iptv_port_count -eq $eth_num_seq ]; then
                uci_toggle_state wifi guest vlan_enable "0"
                uci_toggle_state wifi guest vlan_id "0"
                uci_revert_state wifi guest iptv_port
                /etc/init.d/guest_eth reload "clear" "full"
            fi

            #iptv set
            if [ "$iptv_enable" == 1 ]; then
                setup_iptv "$iptv_vid" "$iptv_prio" "normal" "ap_mode" "$iptv_port"
            elif [ "$iptv_type" == "bridge" ]; then
                setup_iptv "$iptv_vid" "1" "$iptv_type" "ap_mode" "$iptv_port"
            fi

            #guest_eth set
            if [ "$iptv_port" == "other" ] && [ "$old_guest_eth_enable" = "0" ]; then
                uci_revert_state wifi guest vlan_enable
                uci_revert_state wifi guest vlan_id
                uci_toggle_state wifi guest iptv_port $iptv_port
                /etc/init.d/guest_eth reload "wifi" "duetoiptv"
            fi
        else
            #iptv clean
            clear_iptv "$iptv_type"

                #guest_eth set
            if [ "$old_guest_eth_enable" = "0" ] || [ "$old_guest_iptv_ports" != "other" ]  ; then
                uci_revert_state wifi guest vlan_enable
                uci_revert_state wifi guest vlan_id
                uci_revert_state wifi guest iptv_port                
                /etc/init.d/guest_eth reload "wifi" "duetoiptv"
            fi
        fi
    else
        clear_iptv "$iptv_type"

        #FIXME
        if is_iptv_enable "$iptv_enable" "$iptv_type"; then
            #guest_eth clean
            if [ $iptv_port_count -eq $eth_num ] && [ "$old_guest_eth_enable" = "1" ]; then
                uci_toggle_state wifi guest vlan_enable "0"
                uci_toggle_state wifi guest vlan_id "0"
                uci_revert_state wifi guest iptv_port
                /etc/init.d/guest_eth reload "clear" "full"
            fi
            setup_iptv "$iptv_vid" "$iptv_prio" "$iptv_type" "re_mode" "$iptv_port"

            #guest_eth set
            if [ $iptv_port_count -ne $eth_num ] && [ "$old_guest_eth_enable" = "0" -o  "$old_guest_iptv_ports" != "$iptv_port" ]; then
                uci_revert_state wifi guest vlan_enable
                uci_revert_state wifi guest vlan_id
                uci_toggle_state wifi guest iptv_port $iptv_port
                /etc/init.d/guest_eth reload "wifi" "duetoiptv"
            fi
        else
            if [ "$old_guest_eth_enable" = "0" ] || [ "$old_guest_iptv_ports" != "other" ] ; then
                #guest_eth set
                uci_revert_state wifi guest vlan_enable
                uci_revert_state wifi guest vlan_id
                uci_revert_state wifi guest iptv_port
                /etc/init.d/guest_eth reload "wifi" "duetoiptv"
            fi
        fi
    fi
    local old_iptv_id=`cat /tmp/apsd.json | grep iptv_vlan_id | tr -cd "[0-9]"`
    local old_iptv_backhaul_id=`cat /tmp/apsd.json | grep iptv_vlan_backhaul_id | tr -cd "[0-9]"`
    local is_br_wan_exist=$(grep "br-wan" /tmp/apsd.json)
    if [ "$old_iptv_id" != "$iptv_vid" ] || [ "$old_iptv_backhaul_id" != "$iptv_backhaul_vid" ] || [ "$iptv_type" = "bridge" -a -z $is_br_wan_exist ]; then
        /etc/init.d/apsd restart &
    fi
    /etc/init.d/repacd reload > /dev/null 2>&1 &
}

service_triggers() {
    procd_add_reload_trigger "iptv_v2"
}

reload_service() {
    iptv_echo iptv.init "reload iptv"
    /etc/init.d/iptv restart
}

boot() {
	fill_bridge_port
	start
}
